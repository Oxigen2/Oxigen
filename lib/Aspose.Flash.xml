<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Aspose.Flash</name>
  </assembly>
  <members>
    <member name="T:Aspose.JavaThrowsAttribute">
      <summary>
            Use this attribute to override whether CsPorter adds the "throws Exception" clause to a method or not.
            </summary>
    </member>
    <member name="T:Aspose.Flash.ActionScript3.ABCFile">
      <summary>
            Represents an AS3 compiled bytecode file also called ABC,
            this code can be found inside the DoABC tags along the swf file.
            </summary>
      <remarks>
            This class has limited functionaity while product is unlicensed:
            The count of parsed contants is reduced, and string constants are preprocessed.
            Also addition of the new constants will have no effect on writing the resulting ABC file using the <see cref="M:Aspose.Flash.ActionScript3.ABCFile.Write(System.IO.Stream)" />.
            </remarks>
    </member>
    <member name="M:Aspose.Flash.ActionScript3.ABCFile.#ctor(System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Flash.ActionScript3.ABCFile" /> class.
            </summary>
      <param name="stream">The stream from which abc should be read.</param>
    </member>
    <member name="M:Aspose.Flash.ActionScript3.ABCFile.Write(System.IO.Stream)">
      <summary>
            Writes the content of the ABC file to the specified stream.
            </summary>
      <param name="stream">The stream.</param>
      <returns>Number of bytes written.</returns>
    </member>
    <member name="M:Aspose.Flash.ActionScript3.ABCFile.Dump">
      <summary>
            Creates a text respresentation of the entire code,
            including packages, classes, class members, constants.
            Method bodies are represented as AVM2 command sequences.
            </summary>
      <remarks>
            When product is unlicensed, the functionality of this method is limited and only a portion of the entire file is processed:
            1 script;
            maximum 3 classes, 5 members of each kind( static functions, instance functions, static consts and variables, instance consts and variables);
            static and nonstatic ctors.
            </remarks>
    </member>
    <member name="P:Aspose.Flash.ActionScript3.ABCFile.Multinames">
      <summary>
            Gets the multiname constants.
            </summary>
      <value>The multinames.</value>
    </member>
    <member name="P:Aspose.Flash.ActionScript3.ABCFile.Integers">
      <summary>
            Gets the integer contants.
            </summary>
      <value>The integers.</value>
    </member>
    <member name="P:Aspose.Flash.ActionScript3.ABCFile.Uintegers">
      <summary>
            Gets the unsigned integer constant.
            </summary>
      <value>The uintegers.</value>
    </member>
    <member name="P:Aspose.Flash.ActionScript3.ABCFile.Doubles">
      <summary>
            Gets the double constants. 
            </summary>
      <value>The doubles.</value>
    </member>
    <member name="P:Aspose.Flash.ActionScript3.ABCFile.Strings">
      <summary>
            Gets the string constants.
            </summary>
      <value>The strings.</value>
    </member>
    <member name="P:Aspose.Flash.ActionScript3.ABCFile.Namespaces">
      <summary>
            Gets the namespace constants.
            </summary>
      <value>The namespaces.</value>
    </member>
    <member name="P:Aspose.Flash.ActionScript3.ABCFile.NamespaceSets">
      <summary>
            Gets the set namespace sets.
            </summary>
      <value>The namespace sets.</value>
    </member>
    <member name="T:Aspose.Flash.ActionScript3.AvmInstruction">
      <summary>
            Represents an instruction set of the AVM2.
            </summary>
    </member>
    <member name="T:Aspose.Flash.ActionScript3.Multiname">
      <summary>
            Represents a multiname.
            </summary>
    </member>
    <member name="T:Aspose.Flash.ActionScript3.MultinameBase">
      <summary>
            A base class for multinames in AVM2.
            </summary>
    </member>
    <member name="M:Aspose.Flash.ActionScript3.MultinameBase.GetLocalName(Aspose.Flash.ActionScript3.ABCFile)">
      <summary>
            Gets the string representation of the local name.
            </summary>
    </member>
    <member name="M:Aspose.Flash.ActionScript3.MultinameBase.ToString(Aspose.Flash.ActionScript3.ABCFile)">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <param name="abc">The abc file this instance belongs to.</param>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="P:Aspose.Flash.ActionScript3.MultinameBase.Runtime">
      <summary>
            Gets a value indicating whether this <see cref="T:Aspose.Flash.ActionScript3.MultinameBase" /> is runtime multiname.
            </summary>
      <value>
        <c>true</c> if runtime; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Aspose.Flash.ActionScript3.MultinameBase.Kind">
      <summary>
            Gets or sets the kind of the multiname.
            </summary>
      <value>The kind.</value>
    </member>
    <member name="P:Aspose.Flash.ActionScript3.MultinameBase.LocalName">
      <summary>
            Gets the local name, its the index into the strings array.
            </summary>
    </member>
    <member name="M:Aspose.Flash.ActionScript3.Multiname.#ctor(System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Flash.ActionScript3.Multiname" /> class.
            </summary>
      <param name="ns_set">The ns_set index in constant pool.</param>
      <param name="name">The name index into the string array of the constant pool.</param>
    </member>
    <member name="M:Aspose.Flash.ActionScript3.Multiname.ToString(Aspose.Flash.ActionScript3.ABCFile)">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <param name="abc">The abc file this instance belongs to.</param>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="P:Aspose.Flash.ActionScript3.Multiname.Namespaces">
      <summary>
            Gets the namespaces.
            </summary>
      <value>The namespaces.</value>
    </member>
    <member name="T:Aspose.Flash.ActionScript3.Namespace">
      <summary>
            Describes a namespace.
            </summary>
    </member>
    <member name="M:Aspose.Flash.ActionScript3.Namespace.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Flash.ActionScript3.Namespace" /> class.
            </summary>
      <param name="uri">The URI, its the index in strings array of the constant pool.</param>
    </member>
    <member name="M:Aspose.Flash.ActionScript3.Namespace.#ctor(System.Int32,System.Int32,Aspose.Flash.ActionScript3.NamespaceKind)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Flash.ActionScript3.Namespace" /> class.
            </summary>
      <param name="prefix">The prefix, index into the strings array.</param>
      <param name="uri">The URI, index into the strings array.</param>
      <param name="kind">Kind of the namespace.</param>
    </member>
    <member name="M:Aspose.Flash.ActionScript3.Namespace.ToString(Aspose.Flash.ActionScript3.ABCFile)">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <param name="file">The abc file this instance belongs to.</param>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="P:Aspose.Flash.ActionScript3.Namespace.Kind">
      <summary>
            Gets the kind of the namespace.
            </summary>
      <value>The kind.</value>
    </member>
    <member name="P:Aspose.Flash.ActionScript3.Namespace.Uri">
      <summary>
            Gets the URI - index inside strings array.
            </summary>
      <value>The URI.</value>
    </member>
    <member name="T:Aspose.Flash.ActionScript3.NamespaceKind">
      <summary>
            Describes possible namespace kinds.
            </summary>
    </member>
    <member name="T:Aspose.Flash.ActionScript3.QName">
      <summary>
            Represents a Qname.
            </summary>
    </member>
    <member name="M:Aspose.Flash.ActionScript3.QName.#ctor(System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Flash.ActionScript3.QName" /> class.
            </summary>
      <param name="uri">The URI.</param>
      <param name="localName">Name of the local.</param>
    </member>
    <member name="M:Aspose.Flash.ActionScript3.QName.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Flash.ActionScript3.QName" /> class.
            </summary>
      <param name="localName">Local name.</param>
    </member>
    <member name="M:Aspose.Flash.ActionScript3.QName.ToString(Aspose.Flash.ActionScript3.ABCFile)">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <param name="abc">The abc file this instance belongs to.</param>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="P:Aspose.Flash.ActionScript3.QName.Uri">
      <summary>
            Gets the URI, it's the index into the namespaces array.
            </summary>
      <value>The URI.</value>
    </member>
    <member name="T:Aspose.Flash.Actionscript.Compiler.Compiler">
      <summary>
            Represents the ActionScript 2.0 compiler.
            Compiles the ActionScript source into AVM (ActionScript Virtual Machine) byte-code
            </summary>
      <example>
            This example shows how to use compiler.
            <code>
            [C#]
            // name of file with source code
            String source = "MyClass.as";
            // create compiler
            Compiler compiler = Compiler CreateDefaultCompiler(source);
            // compile
            compiler.Compile();
            // result of compilation
            FlashContainer container = compiler.Container; 
            </code></example>
      <example>
            This example shows how to compile part of code (for frame insertion).
            Need to compile line "s = new Sound();"
            <code>
            [C#]
            // compiled string
            String source = "s = new Sound();";
            // create source stream
            UTF8Encoding encoder = new UTF8Encoding();
            Stream stringStream = new MemoryStream(encoder.GetBytes(source));
            // create compiler
            Compiler compiler = Compiler.CreateDefaultCompiler(stringStream);
            // compile. Result is list of actions. <see cref="N:Aspose.Flash.Actions" />
            IList result = compiler.CompileLines();
            </code></example>
    </member>
    <member name="M:Aspose.Flash.Actionscript.Compiler.Compiler.CreateDefaultCompiler(System.String)">
      <summary>
            Create default compiler
            </summary>
      <param name="fileName">name of file wich contains ActionScript code</param>
      <returns>
      </returns>
      <example>This example shows you how to use CreateDefaultCompiler(String) method<code>[C#]

// name of file with source code
String source = "MyClass.as";
// create compiler
Compiler compiler = Compiler.CreateDefaultCompiler(source);
// compile
compiler.Compile();
// result of compilation
FlashContainer container = compiler.Container;</code><code>[Visual Basic]

' name of file with source code
Dim source As String = "MyClass.as"
' create compiler
Dim compiler As Compiler = Compiler.CreateDefaultCompiler(source)
' compile
compiler.Compile()
' result of compilation
Dim container As FlashContainer = compiler.Container</code></example>
    </member>
    <member name="M:Aspose.Flash.Actionscript.Compiler.Compiler.CreateDefaultCompiler(System.IO.Stream)">
      <summary>
            Create default compiler
            </summary>
      <param name="source">stream</param>
      <returns>
      </returns>
      <example>This example shows you how to use CreateDefaultCompiler(Stream) method<code>[C#]

//script source
string source = "var s=new Sound(); s.loadSound(\"c:\\sound.mp3\",true);";
//encoding
UTF8Encoding encoder = new UTF8Encoding();
//read to memory stream
MemoryStream ms = new MemoryStream(encoder.GetBytes(source));
//create a compiler
Compiler compiler = Compiler.CreateDefaultCompiler(ms);
//compile lines
IList lst = compiler.CompileLines();
//add to flash object
flash.Add(new DoAction(lst));</code><code>[Visual Basic]

'script source
Dim source As String = "var s=new Sound(); s.loadSound(""c:\sound.mp3"",true);"
'encoding
Dim encoder As New UTF8Encoding()
'read to memory stream
Dim ms As New MemoryStream(encoder.GetBytes(source))
'create a compiler
Dim compiler As Compiler = Compiler.CreateDefaultCompiler(ms)
'compile lines
Dim lst As IList = compiler.CompileLines()
'add to flash object
flash.Add(New DoAction(lst))</code></example>
    </member>
    <member name="M:Aspose.Flash.Actionscript.Compiler.Compiler.GetErrorsCount">
      <summary>
            Return number of errors during compilation.
            If compilation success return 0.
            </summary>
      <returns>number of errors</returns>
    </member>
    <member name="M:Aspose.Flash.Actionscript.Compiler.Compiler.GetErrors">
      <summary>
            Return list of errors during compilation.
            </summary>
      <returns>list of errors</returns>
    </member>
    <member name="M:Aspose.Flash.Actionscript.Compiler.Compiler.CompileLines">
      <summary>
            Compiles lines of ActionScript code
            </summary>
      <returns>list of actions</returns>
      <example>This example shows you how to use CompileLines method<code>[C#]

//script source
string source = "var s=new Sound(); s.loadSound(\"c:\\sound.mp3\",true);";
//encoding
UTF8Encoding encoder = new UTF8Encoding();
//read to memory stream
MemoryStream ms = new MemoryStream(encoder.GetBytes(source));
//create a compiler
Compiler compiler = Compiler.CreateDefaultCompiler(ms);
//compile lines
IList lst = compiler.CompileLines();
//add to flash object
flash.Add(new DoAction(lst));</code><code>[Visual Basic]

'script source
Dim source As String = "var s=new Sound(); s.loadSound(""c:\sound.mp3"",true);"
'encoding
Dim encoder As New UTF8Encoding()
'read to memory stream
Dim ms As New MemoryStream(encoder.GetBytes(source))
'create a compiler
Dim compiler As Compiler = Compiler.CreateDefaultCompiler(ms)
'compile lines
Dim lst As IList = compiler.CompileLines()
'add to flash object
flash.Add(New DoAction(lst))</code></example>
    </member>
    <member name="M:Aspose.Flash.Actionscript.Compiler.Compiler.Compile">
      <summary>
            Start compilaton process
            </summary>
      <example>This example shows you how to use Compile method<code>[C#]

// name of file with source code
String source = "MyClass.as";
// create compiler
Compiler compiler = Compiler.CreateDefaultCompiler(source);
// compile
compiler.Compile();
// result of compilation
FlashContainer container = compiler.Container;</code><code>[Visual Basic]

' name of file with source code
Dim source As String = "MyClass.as"
' create compiler
Dim compiler As Compiler = Compiler.CreateDefaultCompiler(source)
' compile
compiler.Compile()
' result of compilation
Dim container As FlashContainer = compiler.Container</code></example>
    </member>
    <member name="P:Aspose.Flash.Actionscript.Compiler.Compiler.Classpath">
      <summary>
            List of directories in which compiler searches for a class
            </summary>
    </member>
    <member name="P:Aspose.Flash.Actionscript.Compiler.Compiler.Container">
      <summary>
            Result of compilation.
            Result of compilation is instance of FlashContainer wich contains tags with executable code for ActionScript Virtual Machine
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.ActionObject">
      <summary>
            Primary class for all classes which provide different actions in the Flash file.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Actions.ActionObject.Type">
      <summary>
            Returns the type of an ActionObject.
            Read-only <see cref="T:Aspose.Flash.Actions.ActionType" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Actions.ActionObject.Size">
      <summary>
            Returns the size of an action object in bytes.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.ActionRecord">
      <summary>
            The ActionRecord class is used to store sequence of actions.
            </summary>
      <example>This example shows you how to use ActionRecord class<code>[C#]

// define an action sequence
ArrayList pushArray = new ArrayList();
pushArray.Add("s");
pushArray.Add(0);
pushArray.Add("Sound");
Push push = new Push(pushArray);

ArrayList actionArray = new ArrayList();
actionArray.Add(push);
actionArray.Add(new ActionRecord(ActionType.NamedObject));
actionArray.Add(new ActionRecord(ActionType.SetVariable));

DoAction action = new DoAction(actionArray);
flash.Add(action);
flash.Add(new ShowFrame());</code><code>[Visual Basic]

' define an action sequence
Dim pushArray As New ArrayList()
pushArray.Add("s")
pushArray.Add(0)
pushArray.Add("Sound")
Dim push As New Push(pushArray)

Dim actionArray As New ArrayList()
actionArray.Add(push)
actionArray.Add(New ActionRecord(ActionType.NamedObject))
actionArray.Add(New ActionRecord(ActionType.SetVariable))

Dim action As New DoAction(actionArray)
flash.Add(action)
flash.Add(New ShowFrame())</code></example>
    </member>
    <member name="M:Aspose.Flash.Actions.ActionRecord.NextFrame">
      <summary>
            Factory method for generating an Action object representing a NextFrame action.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.ActionRecord.PrevFrame">
      <summary>
            Factory method for generating an ActionRecord object representing a PreviousFrame action. 
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.ActionRecord.Play">
      <summary>
            Factory method for generating an ActionRecord object representing a Play action. 
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.ActionRecord.Stop">
      <summary>
            Factory method for generating an ActionRecord object representing a Stop action.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.ActionRecord.ToggleQuality">
      <summary>
            Factory method for generating an ActionRecord object representing a ToggleQuality action.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.ActionRecord.StopSounds">
      <summary>
            Factory method for generating an ActionRecord object representing a StopSounds action.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.ActionRecord.Subtract">
      <summary>
             Factory method for generating an ActionRecord object representing a Subtract action.
             </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.ActionRecord.Multiply">
      <summary>
             Factory method for generating an ActionRecord object representing a Multiply action.
             </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.ActionRecord.Divide">
      <summary>
            Factory method for generating an ActionRecord object representing a Divide action.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.ActionRecord.And">
      <summary>
            Factory method for generating an ActionRecord object representing a And action.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.ActionRecord.Or">
      <summary>
            Factory method for generating an ActionRecord object representing a Or action.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.ActionRecord.Not">
      <summary>
            Factory method for generating an ActionRecord object representing a Not action.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.ActionRecord.StringEquals">
      <summary>
            Factory method for generating an ActionRecord object representing a StringEquals action.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.ActionRecord.StringLength">
      <summary>
            Factory method for generating an ActionRecord object representing a StringLength action.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.ActionRecord.StringExtract">
      <summary>
            Factory method for generating an ActionRecord object representing a StringExtract action.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.ActionRecord.Pop">
      <summary>
            Factory method for generating an ActionRecord object representing a Pop action.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.ActionRecord.ToInteger">
      <summary>
            Factory method for generating an ActionRecord object representing a ToInteger action.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.ActionRecord.GetVariable">
      <summary>
             Factory method for generating an ActionRecord object representing a GetVariable action.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.ActionRecord.SetVariable">
      <summary>
            Factory method for generating an ActionRecord object representing a SetVariable action.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.ActionRecord.SetTarget2">
      <summary>
            Factory method for generating an ActionRecord object representing a SetTarget2 action.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.ActionRecord.StringAdd">
      <summary>
             Factory method for generating an ActionRecord object representing a StringAdd action.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.ActionRecord.GetProperty">
      <summary>
            Factory method for generating an ActionRecord object representing a GetProperty action.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.ActionRecord.SetProperty">
      <summary>
            Factory method for generating an ActionRecord object representing a SetProperty action.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.ActionRecord.CloneSprite">
      <summary>
             Factory method for generating an ActionRecord object representing a CloneSprite action.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.ActionRecord.RemoveSprite">
      <summary>
             Factory method for generating an ActionRecord object representing a RemoveSprite action.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.ActionRecord.Trace">
      <summary>
             Factory method for generating an ActionRecord object representing a Trace action.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.ActionRecord.StartDrag">
      <summary>
             Factory method for generating an ActionRecord object representing a StartDrag action.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.ActionRecord.EndDrag">
      <summary>
             Factory method for generating an ActionRecord object representing a EndDrag action.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.ActionRecord.StringLess">
      <summary>
             Factory method for generating an ActionRecord object representing a StringLess action.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.ActionRecord.RandomNumber">
      <summary>
             Factory method for generating an ActionRecord object representing a RandomNumber action.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.ActionRecord.MBStringLength">
      <summary>
             Factory method for generating an ActionRecord object representing a MBStringLength action.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.ActionRecord.CharToAscii">
      <summary>
             Factory method for generating an ActionRecord object representing a CharToAscii action.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.ActionRecord.AsciiToChar">
      <summary>
             Factory method for generating an ActionRecord object representing a AsciiToChar action.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.ActionRecord.GetTime">
      <summary>
             Factory method for generating an ActionRecord object representing a GetTime action.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.ActionRecord.MBStringExtract">
      <summary>
             Factory method for generating an ActionRecord object representing a MBStringExtract action.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.ActionRecord.MBCharToAscii">
      <summary>
             Factory method for generating an ActionRecord object representing a MBCharToAscii action.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.ActionRecord.MBAsciiToChar">
      <summary>
             Factory method for generating an ActionRecord object representing a MBAsciiToChar action.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.ActionRecord.DeleteVariable">
      <summary>
             Factory method for generating an ActionRecord object representing a DeleteVariable action.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.ActionRecord.Delete">
      <summary>
             Factory method for generating an ActionRecord object representing a Delete action.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.ActionRecord.InitVariable">
      <summary>
             Factory method for generating an ActionRecord object representing a InitVariable action.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.ActionRecord.ExecuteFunction">
      <summary>
             Factory method for generating an ActionRecord object representing a ExecuteFunction action.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.ActionRecord.Return">
      <summary>
             Factory method for generating an ActionRecord object representing a Return action.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.ActionRecord.Modulo">
      <summary>
             Factory method for generating an ActionRecord object representing a Modulo action.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.ActionRecord.NamedObject">
      <summary>
             Factory method for generating an ActionRecord object representing a NamedObject action.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.ActionRecord.NewVariable">
      <summary>
             Factory method for generating an ActionRecord object representing a NewVariable action.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.ActionRecord.NewArray">
      <summary>
             Factory method for generating an ActionRecord object representing a NewArray action.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.ActionRecord.NewObject">
      <summary>
             Factory method for generating an ActionRecord object representing a NewObject action.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.ActionRecord.GetType">
      <summary>
             Factory method for generating an ActionRecord object representing a GetType action.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.ActionRecord.GetTarget">
      <summary>
             Factory method for generating an ActionRecord object representing a GetTarget action.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.ActionRecord.Enumerate">
      <summary>
             Factory method for generating an ActionRecord object representing a Enumerate action.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.ActionRecord.Add">
      <summary>
             Factory method for generating an ActionRecord object representing a Add action.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.ActionRecord.Less">
      <summary>
             Factory method for generating an ActionRecord object representing a Less action.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.ActionRecord.Equals">
      <summary>
             Factory method for generating an ActionRecord object representing a Equals action.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.ActionRecord.ToNumber">
      <summary>
             Factory method for generating an ActionRecord object representing a ToNumber action.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.ActionRecord.ToString">
      <summary>
             Factory method for generating an ActionRecord object representing a ToString action.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.ActionRecord.Duplicate">
      <summary>
             Factory method for generating an ActionRecord object representing a Duplicate action.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.ActionRecord.Swap">
      <summary>
             Factory method for generating an ActionRecord object representing a Swap action.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.ActionRecord.GetAttribute">
      <summary>
             Factory method for generating an ActionRecord object representing a GetAttribute action.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.ActionRecord.SetAttribute">
      <summary>
             Factory method for generating an ActionRecord object representing a SetAttribute action.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.ActionRecord.Increment">
      <summary>
             Factory method for generating an ActionRecord object representing a Increment action.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.ActionRecord.Decrement">
      <summary>
             Factory method for generating an ActionRecord object representing a Decrement action.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.ActionRecord.ExecuteMethod">
      <summary>
             Factory method for generating an ActionRecord object representing a ExecuteMethod action.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.ActionRecord.NewMethod">
      <summary>
             Factory method for generating an ActionRecord object representing a NewMethod action.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.ActionRecord.BitwiseAnd">
      <summary>
             Factory method for generating an ActionRecord object representing a BitwiseAnd action.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.ActionRecord.BitwiseOr">
      <summary>
             Factory method for generating an ActionRecord object representing a BitwiseOr action.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.ActionRecord.BitwiseXOr">
      <summary>
             Factory method for generating an ActionRecord object representing a BitwiseXOr action.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.ActionRecord.LogicalShiftLeft">
      <summary>
             Factory method for generating an ActionRecord object representing a LogicalShiftLeft action.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.ActionRecord.ArithmeticShiftRight">
      <summary>
             Factory method for generating an ActionRecord object representing a ArithmeticShiftRight action.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.ActionRecord.LogicalShiftRight">
      <summary>
             Factory method for generating an ActionRecord object representing a LogicalShiftRight action.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.ActionRecord.InstanceOf">
      <summary>
             Factory method for generating an ActionRecord object representing a InstanceOf action.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.ActionRecord.EnumerateObject">
      <summary>
             Factory method for generating an ActionRecord object representing a EnumerateObject action.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.ActionRecord.Greater">
      <summary>
             Factory method for generating an ActionRecord object representing a Greater action.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.ActionRecord.StringGreater">
      <summary>
             Factory method for generating an ActionRecord object representing a StringGreater action.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.ActionRecord.StrictEquals">
      <summary>
             Factory method for generating an ActionRecord object representing a StrictEquals action.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.ActionRecord.Cast">
      <summary>
             Factory method for generating an ActionRecord object representing a Cast action.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.ActionRecord.Implements">
      <summary>
             Factory method for generating an ActionRecord object representing a Implements action.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.ActionRecord.Throw">
      <summary>
             Factory method for generating an ActionRecord object representing a Throw action.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.ActionRecord.Extends">
      <summary>
             Factory method for generating an ActionRecord object representing a Extends action.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.ActionRecord.#ctor(Aspose.Flash.Actions.ActionType)">
      <summary>
            Constructs a stack-based action with the specified type.
            </summary>
      <param name="type">the code used to denote the type of action performed.</param>
      <example>This example shows you how to use ActionRecord constructor<code>[C#]

/// define an action sequence
ArrayList pushArray = new ArrayList();
pushArray.Add("s");
pushArray.Add(0);
pushArray.Add("Sound");
Push push = new Push(pushArray);

ArrayList actionArray = new ArrayList();
actionArray.Add(push);
actionArray.Add(new ActionRecord(ActionType.NamedObject));
actionArray.Add(new ActionRecord(ActionType.SetVariable));

DoAction action = new DoAction(actionArray);
flash.Add(action);
flash.Add(new ShowFrame());</code><code>[Visual Basic]

''' define an action sequence
Dim pushArray As New ArrayList()
pushArray.Add("s")
pushArray.Add(0)
pushArray.Add("Sound")
Dim push As New Push(pushArray)

Dim actionArray As New ArrayList()
actionArray.Add(push)
actionArray.Add(New ActionRecord(ActionType.NamedObject))
actionArray.Add(New ActionRecord(ActionType.SetVariable))

Dim action As New DoAction(actionArray)
flash.Add(action)
flash.Add(New ShowFrame())</code></example>
    </member>
    <member name="P:Aspose.Flash.Actions.ActionRecord.Size">
      <summary>
            Returns the size of an action object in bytes.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.ActionType">
      <summary>
            Defines possible action types.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Actions.ActionType.End">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Flash.Actions.ActionType.NextFrame">
      <summary>Type identifying a NextFrame stack-based action.</summary>
    </member>
    <member name="F:Aspose.Flash.Actions.ActionType.PrevFrame">
      <summary>Type identifying a PrevFrame stack-based action.</summary>
    </member>
    <member name="F:Aspose.Flash.Actions.ActionType.Play">
      <summary>Type identifying a Play stack-based action.</summary>
    </member>
    <member name="F:Aspose.Flash.Actions.ActionType.Stop">
      <summary>Type identifying a Stop stack-based action.</summary>
    </member>
    <member name="F:Aspose.Flash.Actions.ActionType.ToggleQuality">
      <summary>Type identifying a ToggleQuality stack-based action.</summary>
    </member>
    <member name="F:Aspose.Flash.Actions.ActionType.StopSounds">
      <summary>Type identifying a StopSounds stack-based action.</summary>
    </member>
    <member name="F:Aspose.Flash.Actions.ActionType.IntegerAdd">
      <summary>Type identifying an IntegerAdd stack-based action.</summary>
    </member>
    <member name="F:Aspose.Flash.Actions.ActionType.Subtract">
      <summary>Type identifying a Subtract stack-based action.</summary>
    </member>
    <member name="F:Aspose.Flash.Actions.ActionType.Multiply">
      <summary>Type identifying a Multiply stack-based action.</summary>
    </member>
    <member name="F:Aspose.Flash.Actions.ActionType.Divide">
      <summary>Type identifying a Divide stack-based action.</summary>
    </member>
    <member name="F:Aspose.Flash.Actions.ActionType.IntegerEquals">
      <summary>Type identifying an IntegerEquals stack-based action.</summary>
    </member>
    <member name="F:Aspose.Flash.Actions.ActionType.IntegerLess">
      <summary>Type identifying an IntegerLess stack-based action.</summary>
    </member>
    <member name="F:Aspose.Flash.Actions.ActionType.And">
      <summary>Type identifying an And stack-based action.</summary>
    </member>
    <member name="F:Aspose.Flash.Actions.ActionType.Or">
      <summary>Type identifying an Or stack-based action.</summary>
    </member>
    <member name="F:Aspose.Flash.Actions.ActionType.Not">
      <summary>Type identifying a Not stack-based action.</summary>
    </member>
    <member name="F:Aspose.Flash.Actions.ActionType.StringEquals">
      <summary>Type identifying a StringEquals stack-based action.</summary>
    </member>
    <member name="F:Aspose.Flash.Actions.ActionType.StringLength">
      <summary>Type identifying a StringLength stack-based action.</summary>
    </member>
    <member name="F:Aspose.Flash.Actions.ActionType.StringExtract">
      <summary>Type identifying a StringExtract stack-based action.</summary>
    </member>
    <member name="F:Aspose.Flash.Actions.ActionType.Pop">
      <summary>Type identifying a Pop stack-based action.</summary>
    </member>
    <member name="F:Aspose.Flash.Actions.ActionType.ToInteger">
      <summary>Type identifying a ToInteger stack-based action.</summary>
    </member>
    <member name="F:Aspose.Flash.Actions.ActionType.GetVariable">
      <summary>Type identifying a GetVariable stack-based action.</summary>
    </member>
    <member name="F:Aspose.Flash.Actions.ActionType.SetVariable">
      <summary>Type identifying a SetVariable stack-based action.</summary>
    </member>
    <member name="F:Aspose.Flash.Actions.ActionType.SetTarget2">
      <summary>Type identifying a SetTarget2 stack-based action.</summary>
    </member>
    <member name="F:Aspose.Flash.Actions.ActionType.StringAdd">
      <summary>Type identifying a StringAdd stack-based action.</summary>
    </member>
    <member name="F:Aspose.Flash.Actions.ActionType.GetProperty">
      <summary>Type identifying a GetProperty stack-based action.</summary>
    </member>
    <member name="F:Aspose.Flash.Actions.ActionType.SetProperty">
      <summary>Type identifying a SetProperty stack-based action.</summary>
    </member>
    <member name="F:Aspose.Flash.Actions.ActionType.CloneSprite">
      <summary>Type identifying a CloneSprite stack-based action.</summary>
    </member>
    <member name="F:Aspose.Flash.Actions.ActionType.RemoveSprite">
      <summary>Type identifying a RemoveSprite stack-based action.</summary>
    </member>
    <member name="F:Aspose.Flash.Actions.ActionType.Trace">
      <summary>Type identifying a Trace stack-based action.</summary>
    </member>
    <member name="F:Aspose.Flash.Actions.ActionType.StartDrag">
      <summary>Type identifying a StartDrag stack-based action.</summary>
    </member>
    <member name="F:Aspose.Flash.Actions.ActionType.EndDrag">
      <summary>Type identifying a EndDrag stack-based action.</summary>
    </member>
    <member name="F:Aspose.Flash.Actions.ActionType.StringLess">
      <summary>Type identifying a StringLess stack-based action.</summary>
    </member>
    <member name="F:Aspose.Flash.Actions.ActionType.RandomNumber">
      <summary>Type identifying a RandomNumber stack-based action.</summary>
    </member>
    <member name="F:Aspose.Flash.Actions.ActionType.MBStringLength">
      <summary>Type identifying a MBStringLength stack-based action.</summary>
    </member>
    <member name="F:Aspose.Flash.Actions.ActionType.CharToAscii">
      <summary>Type identifying a CharToAscii stack-based action.</summary>
    </member>
    <member name="F:Aspose.Flash.Actions.ActionType.AsciiToChar">
      <summary>Type identifying a AsciiToChar stack-based action.</summary>
    </member>
    <member name="F:Aspose.Flash.Actions.ActionType.GetTime">
      <summary>Type identifying a GetTime stack-based action.</summary>
    </member>
    <member name="F:Aspose.Flash.Actions.ActionType.MBStringExtract">
      <summary>Type identifying an MBStringExtract stack-based action.</summary>
    </member>
    <member name="F:Aspose.Flash.Actions.ActionType.MBCharToAscii">
      <summary>Type identifying an MBCharToAscii stack-based action.</summary>
    </member>
    <member name="F:Aspose.Flash.Actions.ActionType.MBAsciiToChar">
      <summary>Type identifying an MBAsciiToChar stack-based action.</summary>
    </member>
    <member name="F:Aspose.Flash.Actions.ActionType.DeleteVariable">
      <summary>Type identifying a DeleteVariable stack-based action.</summary>
    </member>
    <member name="F:Aspose.Flash.Actions.ActionType.Delete">
      <summary>Type identifying a Delete stack-based action.</summary>
    </member>
    <member name="F:Aspose.Flash.Actions.ActionType.InitVariable">
      <summary>Type identifying a InitVariable stack-based action.</summary>
    </member>
    <member name="F:Aspose.Flash.Actions.ActionType.ExecuteFunction">
      <summary>Type identifying a ExecuteFunction stack-based action.</summary>
    </member>
    <member name="F:Aspose.Flash.Actions.ActionType.Return">
      <summary>Type identifying a Return stack-based action.</summary>
    </member>
    <member name="F:Aspose.Flash.Actions.ActionType.Modulo">
      <summary>Type identifying a Modulo stack-based action.</summary>
    </member>
    <member name="F:Aspose.Flash.Actions.ActionType.NamedObject">
      <summary>Type identifying a NamedObject stack-based action.</summary>
    </member>
    <member name="F:Aspose.Flash.Actions.ActionType.NewVariable">
      <summary>Type identifying a NewVariable stack-based action.</summary>
    </member>
    <member name="F:Aspose.Flash.Actions.ActionType.NewArray">
      <summary>Type identifying a NewArray stack-based action.</summary>
    </member>
    <member name="F:Aspose.Flash.Actions.ActionType.NewObject">
      <summary>Type identifying a NewObject stack-based action.</summary>
    </member>
    <member name="F:Aspose.Flash.Actions.ActionType.GetType">
      <summary>Type identifying a GetType stack-based action.</summary>
    </member>
    <member name="F:Aspose.Flash.Actions.ActionType.GetTarget">
      <summary>Type identifying a GetTarget stack-based action.</summary>
    </member>
    <member name="F:Aspose.Flash.Actions.ActionType.Enumerate">
      <summary>Type identifying an Enumerate stack-based action.</summary>
    </member>
    <member name="F:Aspose.Flash.Actions.ActionType.Add">
      <summary>Type identifying an Add stack-based action.</summary>
    </member>
    <member name="F:Aspose.Flash.Actions.ActionType.Less">
      <summary>Type identifying a Less stack-based action.</summary>
    </member>
    <member name="F:Aspose.Flash.Actions.ActionType.Equals">
      <summary>Type identifying an Equals stack-based action.</summary>
    </member>
    <member name="F:Aspose.Flash.Actions.ActionType.ToNumber">
      <summary>Type identifying a ToNumber stack-based action.</summary>
    </member>
    <member name="F:Aspose.Flash.Actions.ActionType.ToString">
      <summary>Type identifying a ToString stack-based action.</summary>
    </member>
    <member name="F:Aspose.Flash.Actions.ActionType.Duplicate">
      <summary>Type identifying a Duplicate stack-based action.</summary>
    </member>
    <member name="F:Aspose.Flash.Actions.ActionType.Swap">
      <summary>Type identifying a Swap stack-based action.</summary>
    </member>
    <member name="F:Aspose.Flash.Actions.ActionType.GetAttribute">
      <summary>Type identifying a GetAttribute stack-based action.</summary>
    </member>
    <member name="F:Aspose.Flash.Actions.ActionType.SetAttribute">
      <summary>Type identifying a SetAttribute stack-based action.</summary>
    </member>
    <member name="F:Aspose.Flash.Actions.ActionType.Increment">
      <summary>Type identifying an Increment stack-based action.</summary>
    </member>
    <member name="F:Aspose.Flash.Actions.ActionType.Decrement">
      <summary>Type identifying a Decrement stack-based action.</summary>
    </member>
    <member name="F:Aspose.Flash.Actions.ActionType.ExecuteMethod">
      <summary>Type identifying an ExecuteMethod stack-based action.</summary>
    </member>
    <member name="F:Aspose.Flash.Actions.ActionType.NewMethod">
      <summary>Type identifying a NewMethod stack-based action.</summary>
    </member>
    <member name="F:Aspose.Flash.Actions.ActionType.BitwiseAnd">
      <summary>Type identifying a BitwiseAnd stack-based action.</summary>
    </member>
    <member name="F:Aspose.Flash.Actions.ActionType.BitwiseOr">
      <summary>Type identifying a BitwiseOr stack-based action.</summary>
    </member>
    <member name="F:Aspose.Flash.Actions.ActionType.BitwiseXOr">
      <summary>Type identifying a BitwiseXOr stack-based action.</summary>
    </member>
    <member name="F:Aspose.Flash.Actions.ActionType.LogicalShiftLeft">
      <summary>Type identifying a LogicalShiftLeft stack-based action.</summary>
    </member>
    <member name="F:Aspose.Flash.Actions.ActionType.ArithmeticShiftRight">
      <summary>Type identifying an ArithmeticShiftRight stack-based action.</summary>
    </member>
    <member name="F:Aspose.Flash.Actions.ActionType.LogicalShiftRight">
      <summary>Type identifying a LogicalShiftRight stack-based action.</summary>
    </member>
    <member name="F:Aspose.Flash.Actions.ActionType.InstanceOf">
      <summary>Type identifying an InstanceOf stack-based action.</summary>
    </member>
    <member name="F:Aspose.Flash.Actions.ActionType.EnumerateObject">
      <summary>Type identifying an EnumerateObject stack-based action.</summary>
    </member>
    <member name="F:Aspose.Flash.Actions.ActionType.StrictEquals">
      <summary>Type identifying a StrictEquals stack-based action.</summary>
    </member>
    <member name="F:Aspose.Flash.Actions.ActionType.Greater">
      <summary>Type identifying a Greater stack-based action.</summary>
    </member>
    <member name="F:Aspose.Flash.Actions.ActionType.StringGreater">
      <summary>Type identifying a StringGreater stack-based action.</summary>
    </member>
    <member name="F:Aspose.Flash.Actions.ActionType.Throw">
      <summary>Type identifying a Throw stack-based action.</summary>
    </member>
    <member name="F:Aspose.Flash.Actions.ActionType.Cast">
      <summary>Type identifying a Cast stack-based action.</summary>
    </member>
    <member name="F:Aspose.Flash.Actions.ActionType.Implements">
      <summary>Type identifying an Implements stack-based action.</summary>
    </member>
    <member name="F:Aspose.Flash.Actions.ActionType.Extends">
      <summary>Type identifying an Extends stack-based action.</summary>
    </member>
    <member name="F:Aspose.Flash.Actions.ActionType.GotoFrame">
      <summary>Type identifying a GotoFrame action.</summary>
    </member>
    <member name="F:Aspose.Flash.Actions.ActionType.GetUrl">
      <summary>Type identifying a GetUrl action.</summary>
    </member>
    <member name="F:Aspose.Flash.Actions.ActionType.WaitForFrame">
      <summary>Type identifying a WaitForFrame action.</summary>
    </member>
    <member name="F:Aspose.Flash.Actions.ActionType.SetTarget">
      <summary>Type identifying a SetTarget action.</summary>
    </member>
    <member name="F:Aspose.Flash.Actions.ActionType.GotoLabel">
      <summary>Type identifying a GotoLabel action.</summary>
    </member>
    <member name="F:Aspose.Flash.Actions.ActionType.WaitForFrame2">
      <summary>Type identifying a WaitForFrame2 action.</summary>
    </member>
    <member name="F:Aspose.Flash.Actions.ActionType.Push">
      <summary>Type identifying a Push action.</summary>
    </member>
    <member name="F:Aspose.Flash.Actions.ActionType.Jump">
      <summary>Type identifying a Jump action.</summary>
    </member>
    <member name="F:Aspose.Flash.Actions.ActionType.GetUrl2">
      <summary>Type identifying a GetUrl2 action.</summary>
    </member>
    <member name="F:Aspose.Flash.Actions.ActionType.If">
      <summary>Type identifying an If action.</summary>
    </member>
    <member name="F:Aspose.Flash.Actions.ActionType.Call">
      <summary>Type identifying a Call action.</summary>
    </member>
    <member name="F:Aspose.Flash.Actions.ActionType.GotoFrame2">
      <summary>Type identifying a GotoFrame2 action.</summary>
    </member>
    <member name="F:Aspose.Flash.Actions.ActionType.RegisterCopy">
      <summary>Type identifying a RegisterCopy action.</summary>
    </member>
    <member name="F:Aspose.Flash.Actions.ActionType.ConstantPool">
      <summary>Type identifying a ConstantPool action.</summary>
    </member>
    <member name="F:Aspose.Flash.Actions.ActionType.With">
      <summary>Type identifying a With action.</summary>
    </member>
    <member name="F:Aspose.Flash.Actions.ActionType.DefineFunction">
      <summary>Type identifying a DefineFunction action.</summary>
    </member>
    <member name="F:Aspose.Flash.Actions.ActionType.DefineFunction2">
      <summary>Type identifying a DefineFunction2 action.</summary>
    </member>
    <member name="F:Aspose.Flash.Actions.ActionType.Try">
      <summary>Type identifying a Try action.</summary>
    </member>
    <member name="T:Aspose.Flash.Actions.Add">
      <summary>
            Represents an Add action object.
            </summary>
      <example>This example shows you how to use Add class<code>[C#]

// define an action sequence
ArrayList pushArray = new ArrayList();
// use ArrayList.Add to push the elements to the list
//pushArray.Add("elements");
//add this array to push object
Push push = new Push(pushArray);

//create an action array
ArrayList actionArray = new ArrayList();
//add push object to action array
actionArray.Add(push);
actionArray.Add(new ActionRecord(ActionType.NamedObject));
//add appropriate action class object to the action array
actionArray.Add(new Add());


//create a DoAction object and add actions list into it
DoAction action = new DoAction(actionArray);
//now add DoAction object into the flash file
flash.Add(action);
//instruct the flash object to show frame
flash.Add(new ShowFrame());</code><code>[Visual Basic]

' define an action sequence
Dim pushArray As New ArrayList()
' use ArrayList.Add to push the elements to the list
'pushArray.Add("elements");
'add this array to push object
Dim push As New Push(pushArray)

'create an action array
Dim actionArray As New ArrayList()
'add push object to action array
actionArray.Add(push)
actionArray.Add(New ActionRecord(ActionType.NamedObject))
'add appropriate action class object to the action array
actionArray.Add(New Add())


'create a DoAction object and add actions list into it
Dim action As New DoAction(actionArray)
'now add DoAction object into the flash file
flash.Add(action)
'instruct the flash object to show frame
flash.Add(New ShowFrame())</code></example>
    </member>
    <member name="M:Aspose.Flash.Actions.Add.#ctor">
      <summary>
            Default constructor.
            </summary>
      <example>This example shows you how to use Add constructor<code>[C#]

// define an action sequence
ArrayList pushArray = new ArrayList();
// use ArrayList.Add to push the elements to the list
//pushArray.Add("elements");
//add this array to push object
Push push = new Push(pushArray);

//create an action array
ArrayList actionArray = new ArrayList();
//add push object to action array
actionArray.Add(push);
actionArray.Add(new ActionRecord(ActionType.NamedObject));
//add appropriate action class object to the action array
actionArray.Add(new Add());


//create a DoAction object and add actions list into it
DoAction action = new DoAction(actionArray);
//now add DoAction object into the flash file
flash.Add(action);
//instruct the flash object to show frame
flash.Add(new ShowFrame());</code><code>[Visual Basic]

' define an action sequence
Dim pushArray As New ArrayList()
' use ArrayList.Add to push the elements to the list
'pushArray.Add("elements");
'add this array to push object
Dim push As New Push(pushArray)

'create an action array
Dim actionArray As New ArrayList()
'add push object to action array
actionArray.Add(push)
actionArray.Add(New ActionRecord(ActionType.NamedObject))
'add appropriate action class object to the action array
actionArray.Add(New Add())


'create a DoAction object and add actions list into it
Dim action As New DoAction(actionArray)
'now add DoAction object into the flash file
flash.Add(action)
'instruct the flash object to show frame
flash.Add(New ShowFrame())</code></example>
    </member>
    <member name="P:Aspose.Flash.Actions.Add.Size">
      <summary>
            Returns the size of an action object in bytes.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.Add2">
      <summary>
            Represents an Add2 action object.
            </summary>
      <example>This example shows you how to use Add2 class<code>[C#]

// define an action sequence
ArrayList pushArray = new ArrayList();
// use ArrayList.Add to push the elements to the list
//pushArray.Add("elements");
//add this array to push object
Push push = new Push(pushArray);

//create an action array
ArrayList actionArray = new ArrayList();
//add push object to action array
actionArray.Add(push);
actionArray.Add(new ActionRecord(ActionType.NamedObject));
//add appropriate action class object to the action array
actionArray.Add(new Add2());


//create a DoAction object and add actions list into it
DoAction action = new DoAction(actionArray);
//now add DoAction object into the flash file
flash.Add(action);
//instruct the flash object to show frame
flash.Add(new ShowFrame());</code><code>[Visual Basic]

' define an action sequence
Dim pushArray As New ArrayList()
' use ArrayList.Add to push the elements to the list
'pushArray.Add("elements");
'add this array to push object
Dim push As New Push(pushArray)

'create an action array
Dim actionArray As New ArrayList()
'add push object to action array
actionArray.Add(push)
actionArray.Add(New ActionRecord(ActionType.NamedObject))
'add appropriate action class object to the action array
actionArray.Add(New Add2())


'create a DoAction object and add actions list into it
Dim action As New DoAction(actionArray)
'now add DoAction object into the flash file
flash.Add(action)
'instruct the flash object to show frame
flash.Add(New ShowFrame())</code></example>
    </member>
    <member name="M:Aspose.Flash.Actions.Add2.#ctor">
      <summary>
            Default Constructor.
            </summary>
      <example>This example shows you how to use Add2 constructor<code>[C#]

// define an action sequence
ArrayList pushArray = new ArrayList();
// use ArrayList.Add to push the elements to the list
//pushArray.Add("elements");
//add this array to push object
Push push = new Push(pushArray);

//create an action array
ArrayList actionArray = new ArrayList();
//add push object to action array
actionArray.Add(push);
actionArray.Add(new ActionRecord(ActionType.NamedObject));
//add appropriate action class object to the action array
actionArray.Add(new Add2());


//create a DoAction object and add actions list into it
DoAction action = new DoAction(actionArray);
//now add DoAction object into the flash file
flash.Add(action);
//instruct the flash object to show frame
flash.Add(new ShowFrame());</code><code>[Visual Basic]

' define an action sequence
Dim pushArray As New ArrayList()
' use ArrayList.Add to push the elements to the list
'pushArray.Add("elements");
'add this array to push object
Dim push As New Push(pushArray)

'create an action array
Dim actionArray As New ArrayList()
'add push object to action array
actionArray.Add(push)
actionArray.Add(New ActionRecord(ActionType.NamedObject))
'add appropriate action class object to the action array
actionArray.Add(New Add2())


'create a DoAction object and add actions list into it
Dim action As New DoAction(actionArray)
'now add DoAction object into the flash file
flash.Add(action)
'instruct the flash object to show frame
flash.Add(New ShowFrame())</code></example>
    </member>
    <member name="P:Aspose.Flash.Actions.Add2.Size">
      <summary>
            Returns the size of an action object in bytes.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.And">
      <summary>
            Represents an And action object.
            </summary>
      <example>This example shows you how to use And class<code>[C#]

// define an action sequence
ArrayList pushArray = new ArrayList();
// use ArrayList.Add to push the elements to the list
//pushArray.Add("elements");
//add this array to push object
Push push = new Push(pushArray);

//create an action array
ArrayList actionArray = new ArrayList();
//add push object to action array
actionArray.Add(push);
actionArray.Add(new ActionRecord(ActionType.NamedObject));
//add appropriate action class object to the action array
actionArray.Add(new And());


//create a DoAction object and add actions list into it
DoAction action = new DoAction(actionArray);
//now add DoAction object into the flash file
flash.Add(action);
//instruct the flash object to show frame
flash.Add(new ShowFrame());</code><code>[Visual Basic]

' define an action sequence
Dim pushArray As New ArrayList()
' use ArrayList.Add to push the elements to the list
'pushArray.Add("elements");
'add this array to push object
Dim push As New Push(pushArray)

'create an action array
Dim actionArray As New ArrayList()
'add push object to action array
actionArray.Add(push)
actionArray.Add(New ActionRecord(ActionType.NamedObject))
'add appropriate action class object to the action array
actionArray.Add(New [And]())


'create a DoAction object and add actions list into it
Dim action As New DoAction(actionArray)
'now add DoAction object into the flash file
flash.Add(action)
'instruct the flash object to show frame
flash.Add(New ShowFrame())</code></example>
    </member>
    <member name="M:Aspose.Flash.Actions.And.#ctor">
      <summary>
            Default constructor.
            </summary>
      <example>This example shows you how to use And constructor<code>[C#]

// define an action sequence
ArrayList pushArray = new ArrayList();
// use ArrayList.Add to push the elements to the list
//pushArray.Add("elements");
//add this array to push object
Push push = new Push(pushArray);

//create an action array
ArrayList actionArray = new ArrayList();
//add push object to action array
actionArray.Add(push);
actionArray.Add(new ActionRecord(ActionType.NamedObject));
//add appropriate action class object to the action array
actionArray.Add(new And());


//create a DoAction object and add actions list into it
DoAction action = new DoAction(actionArray);
//now add DoAction object into the flash file
flash.Add(action);
//instruct the flash object to show frame
flash.Add(new ShowFrame());</code><code>[Visual Basic]

' define an action sequence
Dim pushArray As New ArrayList()
' use ArrayList.Add to push the elements to the list
'pushArray.Add("elements");
'add this array to push object
Dim push As New Push(pushArray)

'create an action array
Dim actionArray As New ArrayList()
'add push object to action array
actionArray.Add(push)
actionArray.Add(New ActionRecord(ActionType.NamedObject))
'add appropriate action class object to the action array
actionArray.Add(New [And]())


'create a DoAction object and add actions list into it
Dim action As New DoAction(actionArray)
'now add DoAction object into the flash file
flash.Add(action)
'instruct the flash object to show frame
flash.Add(New ShowFrame())</code></example>
    </member>
    <member name="P:Aspose.Flash.Actions.And.Size">
      <summary>
            Returns the size of an action object in bytes.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.Array">
      <summary>
            Represents an Array action object.
            </summary>
      <example>This example shows you how to use Array class<code>[C#]

// define an action sequence
ArrayList pushArray = new ArrayList();
// use ArrayList.Add to push the elements to the list
//pushArray.Add("elements");
//add this array to push object
Push push = new Push(pushArray);

//create an action array
ArrayList actionArray = new ArrayList();
//add push object to action array
actionArray.Add(push);
actionArray.Add(new ActionRecord(ActionType.NamedObject));
//add appropriate action class object to the action array
actionArray.Add(new Aspose.Flash.Actions.Array());


//create a DoAction object and add actions list into it
DoAction action = new DoAction(actionArray);
//now add DoAction object into the flash file
flash.Add(action);
//instruct the flash object to show frame
flash.Add(new ShowFrame());</code><code>[Visual Basic]

' define an action sequence
Dim pushArray As New ArrayList()
' use ArrayList.Add to push the elements to the list
'pushArray.Add("elements");
'add this array to push object
Dim push As New Push(pushArray)

'create an action array
Dim actionArray As New ArrayList()
'add push object to action array
actionArray.Add(push)
actionArray.Add(New ActionRecord(ActionType.NamedObject))
'add appropriate action class object to the action array
actionArray.Add(New Aspose.Flash.Actions.Array())


'create a DoAction object and add actions list into it
Dim action As New DoAction(actionArray)
'now add DoAction object into the flash file
flash.Add(action)
'instruct the flash object to show frame
flash.Add(New ShowFrame())</code></example>
    </member>
    <member name="M:Aspose.Flash.Actions.Array.#ctor">
      <summary>
            Default constructor.
            </summary>
      <example>This example shows you how to use Array constructor<code>[C#]

// define an action sequence
ArrayList pushArray = new ArrayList();
// use ArrayList.Add to push the elements to the list
//pushArray.Add("elements");
//add this array to push object
Push push = new Push(pushArray);

//create an action array
ArrayList actionArray = new ArrayList();
//add push object to action array
actionArray.Add(push);
actionArray.Add(new ActionRecord(ActionType.NamedObject));
//add appropriate action class object to the action array
actionArray.Add(new Aspose.Flash.Actions.Array());


//create a DoAction object and add actions list into it
DoAction action = new DoAction(actionArray);
//now add DoAction object into the flash file
flash.Add(action);
//instruct the flash object to show frame
flash.Add(new ShowFrame());</code><code>[Visual Basic]

' define an action sequence
Dim pushArray As New ArrayList()
' use ArrayList.Add to push the elements to the list
'pushArray.Add("elements");
'add this array to push object
Dim push As New Push(pushArray)

'create an action array
Dim actionArray As New ArrayList()
'add push object to action array
actionArray.Add(push)
actionArray.Add(New ActionRecord(ActionType.NamedObject))
'add appropriate action class object to the action array
actionArray.Add(New Aspose.Flash.Actions.Array())


'create a DoAction object and add actions list into it
Dim action As New DoAction(actionArray)
'now add DoAction object into the flash file
flash.Add(action)
'instruct the flash object to show frame
flash.Add(New ShowFrame())</code></example>
    </member>
    <member name="P:Aspose.Flash.Actions.Array.Size">
      <summary>
            Returns the size of an action object in bytes.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.AsciiToChar">
      <summary>
            Represents an AsciiToChar action object.
            </summary>
      <example>This example shows you how to use AsciiToChar class<code>[C#]

// define an action sequence
ArrayList pushArray = new ArrayList();
// use ArrayList.Add to push the elements to the list
//pushArray.Add("elements");
//add this array to push object
Push push = new Push(pushArray);

//create an action array
ArrayList actionArray = new ArrayList();
//add push object to action array
actionArray.Add(push);
actionArray.Add(new ActionRecord(ActionType.NamedObject));
//add appropriate action class object to the action array
actionArray.Add(new AsciiToChar());


//create a DoAction object and add actions list into it
DoAction action = new DoAction(actionArray);
//now add DoAction object into the flash file
flash.Add(action);
//instruct the flash object to show frame
flash.Add(new ShowFrame());</code><code>[Visual Basic]

' define an action sequence
Dim pushArray As New ArrayList()
' use ArrayList.Add to push the elements to the list
'pushArray.Add("elements");
'add this array to push object
Dim push As New Push(pushArray)

'create an action array
Dim actionArray As New ArrayList()
'add push object to action array
actionArray.Add(push)
actionArray.Add(New ActionRecord(ActionType.NamedObject))
'add appropriate action class object to the action array
actionArray.Add(New AsciiToChar())


'create a DoAction object and add actions list into it
Dim action As New DoAction(actionArray)
'now add DoAction object into the flash file
flash.Add(action)
'instruct the flash object to show frame
flash.Add(New ShowFrame())</code></example>
    </member>
    <member name="M:Aspose.Flash.Actions.AsciiToChar.#ctor">
      <summary>
            Default constructor.
            </summary>
      <example>This example shows you how to use AsciiToChar constructor<code>[C#]

// define an action sequence
ArrayList pushArray = new ArrayList();
// use ArrayList.Add to push the elements to the list
//pushArray.Add("elements");
//add this array to push object
Push push = new Push(pushArray);

//create an action array
ArrayList actionArray = new ArrayList();
//add push object to action array
actionArray.Add(push);
actionArray.Add(new ActionRecord(ActionType.NamedObject));
//add appropriate action class object to the action array
actionArray.Add(new AsciiToChar());


//create a DoAction object and add actions list into it
DoAction action = new DoAction(actionArray);
//now add DoAction object into the flash file
flash.Add(action);
//instruct the flash object to show frame
flash.Add(new ShowFrame());</code><code>[Visual Basic]

' define an action sequence
Dim pushArray As New ArrayList()
' use ArrayList.Add to push the elements to the list
'pushArray.Add("elements");
'add this array to push object
Dim push As New Push(pushArray)

'create an action array
Dim actionArray As New ArrayList()
'add push object to action array
actionArray.Add(push)
actionArray.Add(New ActionRecord(ActionType.NamedObject))
'add appropriate action class object to the action array
actionArray.Add(New AsciiToChar())


'create a DoAction object and add actions list into it
Dim action As New DoAction(actionArray)
'now add DoAction object into the flash file
flash.Add(action)
'instruct the flash object to show frame
flash.Add(New ShowFrame())</code></example>
    </member>
    <member name="P:Aspose.Flash.Actions.AsciiToChar.Size">
      <summary>
            Returns the size of an action object in bytes.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.BitAnd">
      <summary>
            Represents a BitAnd action object.
            </summary>
      <example>This example shows you how to use BitAnd class<code>[C#]

// define an action sequence
ArrayList pushArray = new ArrayList();
// use ArrayList.Add to push the elements to the list
//pushArray.Add("elements");
//add this array to push object
Push push = new Push(pushArray);

//create an action array
ArrayList actionArray = new ArrayList();
//add push object to action array
actionArray.Add(push);
actionArray.Add(new ActionRecord(ActionType.NamedObject));
//add appropriate action class object to the action array
actionArray.Add(new BitAnd());


//create a DoAction object and add actions list into it
DoAction action = new DoAction(actionArray);
//now add DoAction object into the flash file
flash.Add(action);
//instruct the flash object to show frame
flash.Add(new ShowFrame());</code><code>[Visual Basic]

' define an action sequence
Dim pushArray As New ArrayList()
' use ArrayList.Add to push the elements to the list
'pushArray.Add("elements");
'add this array to push object
Dim push As New Push(pushArray)

'create an action array
Dim actionArray As New ArrayList()
'add push object to action array
actionArray.Add(push)
actionArray.Add(New ActionRecord(ActionType.NamedObject))
'add appropriate action class object to the action array
actionArray.Add(New BitAnd())


'create a DoAction object and add actions list into it
Dim action As New DoAction(actionArray)
'now add DoAction object into the flash file
flash.Add(action)
'instruct the flash object to show frame
flash.Add(New ShowFrame())</code></example>
    </member>
    <member name="M:Aspose.Flash.Actions.BitAnd.#ctor">
      <summary>
            Default constructor.
            </summary>
      <example>This example shows you how to use BitAnd constructor<code>[C#]

// define an action sequence
ArrayList pushArray = new ArrayList();
// use ArrayList.Add to push the elements to the list
//pushArray.Add("elements");
//add this array to push object
Push push = new Push(pushArray);

//create an action array
ArrayList actionArray = new ArrayList();
//add push object to action array
actionArray.Add(push);
actionArray.Add(new ActionRecord(ActionType.NamedObject));
//add appropriate action class object to the action array
actionArray.Add(new BitAnd());


//create a DoAction object and add actions list into it
DoAction action = new DoAction(actionArray);
//now add DoAction object into the flash file
flash.Add(action);
//instruct the flash object to show frame
flash.Add(new ShowFrame());</code><code>[Visual Basic]

' define an action sequence
Dim pushArray As New ArrayList()
' use ArrayList.Add to push the elements to the list
'pushArray.Add("elements");
'add this array to push object
Dim push As New Push(pushArray)

'create an action array
Dim actionArray As New ArrayList()
'add push object to action array
actionArray.Add(push)
actionArray.Add(New ActionRecord(ActionType.NamedObject))
'add appropriate action class object to the action array
actionArray.Add(New BitAnd())


'create a DoAction object and add actions list into it
Dim action As New DoAction(actionArray)
'now add DoAction object into the flash file
flash.Add(action)
'instruct the flash object to show frame
flash.Add(New ShowFrame())</code></example>
    </member>
    <member name="P:Aspose.Flash.Actions.BitAnd.Size">
      <summary>
            Returns the size of an action object in bytes.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.BitLShift">
      <summary>
            Represents a BitLShift action object.
            </summary>
      <example>This example shows you how to use BitLShift class<code>[C#]

// define an action sequence
ArrayList pushArray = new ArrayList();
// use ArrayList.Add to push the elements to the list
//pushArray.Add("elements");
//add this array to push object
Push push = new Push(pushArray);

//create an action array
ArrayList actionArray = new ArrayList();
//add push object to action array
actionArray.Add(push);
actionArray.Add(new ActionRecord(ActionType.NamedObject));
//add appropriate action class object to the action array
actionArray.Add(new BitLShift());


//create a DoAction object and add actions list into it
DoAction action = new DoAction(actionArray);
//now add DoAction object into the flash file
flash.Add(action);
//instruct the flash object to show frame
flash.Add(new ShowFrame());</code><code>[Visual Basic]

' define an action sequence
Dim pushArray As New ArrayList()
' use ArrayList.Add to push the elements to the list
'pushArray.Add("elements");
'add this array to push object
Dim push As New Push(pushArray)

'create an action array
Dim actionArray As New ArrayList()
'add push object to action array
actionArray.Add(push)
actionArray.Add(New ActionRecord(ActionType.NamedObject))
'add appropriate action class object to the action array
actionArray.Add(New BitLShift())


'create a DoAction object and add actions list into it
Dim action As New DoAction(actionArray)
'now add DoAction object into the flash file
flash.Add(action)
'instruct the flash object to show frame
flash.Add(New ShowFrame())</code></example>
    </member>
    <member name="M:Aspose.Flash.Actions.BitLShift.#ctor">
      <summary>
            Default constructor.
            </summary>
      <example>This example shows you how to use BitLShift constructor<code>[C#]

// define an action sequence
ArrayList pushArray = new ArrayList();
// use ArrayList.Add to push the elements to the list
//pushArray.Add("elements");
//add this array to push object
Push push = new Push(pushArray);

//create an action array
ArrayList actionArray = new ArrayList();
//add push object to action array
actionArray.Add(push);
actionArray.Add(new ActionRecord(ActionType.NamedObject));
//add appropriate action class object to the action array
actionArray.Add(new BitLShift());


//create a DoAction object and add actions list into it
DoAction action = new DoAction(actionArray);
//now add DoAction object into the flash file
flash.Add(action);
//instruct the flash object to show frame
flash.Add(new ShowFrame());</code><code>[Visual Basic]

' define an action sequence
Dim pushArray As New ArrayList()
' use ArrayList.Add to push the elements to the list
'pushArray.Add("elements");
'add this array to push object
Dim push As New Push(pushArray)

'create an action array
Dim actionArray As New ArrayList()
'add push object to action array
actionArray.Add(push)
actionArray.Add(New ActionRecord(ActionType.NamedObject))
'add appropriate action class object to the action array
actionArray.Add(New BitLShift())


'create a DoAction object and add actions list into it
Dim action As New DoAction(actionArray)
'now add DoAction object into the flash file
flash.Add(action)
'instruct the flash object to show frame
flash.Add(New ShowFrame())</code></example>
    </member>
    <member name="P:Aspose.Flash.Actions.BitLShift.Size">
      <summary>
            Returns the size of an action object in bytes.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.BitOr">
      <summary>
            Represents a BitOr action object.
            </summary>
      <example>This example shows you how to use BitOr class<code>[C#]

// define an action sequence
ArrayList pushArray = new ArrayList();
// use ArrayList.Add to push the elements to the list
//pushArray.Add("elements");
//add this array to push object
Push push = new Push(pushArray);

//create an action array
ArrayList actionArray = new ArrayList();
//add push object to action array
actionArray.Add(push);
actionArray.Add(new ActionRecord(ActionType.NamedObject));
//add appropriate action class object to the action array
actionArray.Add(new BitOr());


//create a DoAction object and add actions list into it
DoAction action = new DoAction(actionArray);
//now add DoAction object into the flash file
flash.Add(action);
//instruct the flash object to show frame
flash.Add(new ShowFrame());</code><code>[Visual Basic]

' define an action sequence
Dim pushArray As New ArrayList()
' use ArrayList.Add to push the elements to the list
'pushArray.Add("elements");
'add this array to push object
Dim push As New Push(pushArray)

'create an action array
Dim actionArray As New ArrayList()
'add push object to action array
actionArray.Add(push)
actionArray.Add(New ActionRecord(ActionType.NamedObject))
'add appropriate action class object to the action array
actionArray.Add(New BitOr())


'create a DoAction object and add actions list into it
Dim action As New DoAction(actionArray)
'now add DoAction object into the flash file
flash.Add(action)
'instruct the flash object to show frame
flash.Add(New ShowFrame())</code></example>
    </member>
    <member name="M:Aspose.Flash.Actions.BitOr.#ctor">
      <summary>
            Default constructor.
            </summary>
      <example>This example shows you how to use BitOr constructor<code>[C#]

// define an action sequence
ArrayList pushArray = new ArrayList();
// use ArrayList.Add to push the elements to the list
//pushArray.Add("elements");
//add this array to push object
Push push = new Push(pushArray);

//create an action array
ArrayList actionArray = new ArrayList();
//add push object to action array
actionArray.Add(push);
actionArray.Add(new ActionRecord(ActionType.NamedObject));
//add appropriate action class object to the action array
actionArray.Add(new BitOr());


//create a DoAction object and add actions list into it
DoAction action = new DoAction(actionArray);
//now add DoAction object into the flash file
flash.Add(action);
//instruct the flash object to show frame
flash.Add(new ShowFrame());</code><code>[Visual Basic]

' define an action sequence
Dim pushArray As New ArrayList()
' use ArrayList.Add to push the elements to the list
'pushArray.Add("elements");
'add this array to push object
Dim push As New Push(pushArray)

'create an action array
Dim actionArray As New ArrayList()
'add push object to action array
actionArray.Add(push)
actionArray.Add(New ActionRecord(ActionType.NamedObject))
'add appropriate action class object to the action array
actionArray.Add(New BitOr())


'create a DoAction object and add actions list into it
Dim action As New DoAction(actionArray)
'now add DoAction object into the flash file
flash.Add(action)
'instruct the flash object to show frame
flash.Add(New ShowFrame())</code></example>
    </member>
    <member name="P:Aspose.Flash.Actions.BitOr.Size">
      <summary>
            Returns the size of an action object in bytes.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.BitRShift">
      <summary>
            Represents a BitRShift action object.
            </summary>
      <example>This example shows you how to use BitRShift class<code>[C#]

// define an action sequence
ArrayList pushArray = new ArrayList();
// use ArrayList.Add to push the elements to the list
//pushArray.Add("elements");
//add this array to push object
Push push = new Push(pushArray);

//create an action array
ArrayList actionArray = new ArrayList();
//add push object to action array
actionArray.Add(push);
actionArray.Add(new ActionRecord(ActionType.NamedObject));
//add appropriate action class object to the action array
actionArray.Add(new BiRShift());


//create a DoAction object and add actions list into it
DoAction action = new DoAction(actionArray);
//now add DoAction object into the flash file
flash.Add(action);
//instruct the flash object to show frame
flash.Add(new ShowFrame());</code><code>[Visual Basic]

' define an action sequence
Dim pushArray As New ArrayList()
' use ArrayList.Add to push the elements to the list
'pushArray.Add("elements");
'add this array to push object
Dim push As New Push(pushArray)

'create an action array
Dim actionArray As New ArrayList()
'add push object to action array
actionArray.Add(push)
actionArray.Add(New ActionRecord(ActionType.NamedObject))
'add appropriate action class object to the action array
actionArray.Add(New BiRShift())


'create a DoAction object and add actions list into it
Dim action As New DoAction(actionArray)
'now add DoAction object into the flash file
flash.Add(action)
'instruct the flash object to show frame
flash.Add(New ShowFrame())</code></example>
    </member>
    <member name="M:Aspose.Flash.Actions.BitRShift.#ctor">
      <summary>
            Default constructor.
            </summary>
      <example>This example shows you how to use BitRShift constructor<code>[C#]

// define an action sequence
ArrayList pushArray = new ArrayList();
// use ArrayList.Add to push the elements to the list
//pushArray.Add("elements");
//add this array to push object
Push push = new Push(pushArray);

//create an action array
ArrayList actionArray = new ArrayList();
//add push object to action array
actionArray.Add(push);
actionArray.Add(new ActionRecord(ActionType.NamedObject));
//add appropriate action class object to the action array
actionArray.Add(new BitRShift());


//create a DoAction object and add actions list into it
DoAction action = new DoAction(actionArray);
//now add DoAction object into the flash file
flash.Add(action);
//instruct the flash object to show frame
flash.Add(new ShowFrame());</code><code>[Visual Basic]

' define an action sequence
Dim pushArray As New ArrayList()
' use ArrayList.Add to push the elements to the list
'pushArray.Add("elements");
'add this array to push object
Dim push As New Push(pushArray)

'create an action array
Dim actionArray As New ArrayList()
'add push object to action array
actionArray.Add(push)
actionArray.Add(New ActionRecord(ActionType.NamedObject))
'add appropriate action class object to the action array
actionArray.Add(New BitRShift())


'create a DoAction object and add actions list into it
Dim action As New DoAction(actionArray)
'now add DoAction object into the flash file
flash.Add(action)
'instruct the flash object to show frame
flash.Add(New ShowFrame())</code></example>
    </member>
    <member name="P:Aspose.Flash.Actions.BitRShift.Size">
      <summary>
            Returns the size of an action object in bytes.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.BitURShift">
      <summary>
            Represents a BitURShift action object.
            </summary>
      <example>This example shows you how to use BitURShift class<code>[C#]

// define an action sequence
ArrayList pushArray = new ArrayList();
// use ArrayList.Add to push the elements to the list
//pushArray.Add("elements");
//add this array to push object
Push push = new Push(pushArray);

//create an action array
ArrayList actionArray = new ArrayList();
//add push object to action array
actionArray.Add(push);
actionArray.Add(new ActionRecord(ActionType.NamedObject));
//add appropriate action class object to the action array
actionArray.Add(new BitURShift());


//create a DoAction object and add actions list into it
DoAction action = new DoAction(actionArray);
//now add DoAction object into the flash file
flash.Add(action);
//instruct the flash object to show frame
flash.Add(new ShowFrame());</code><code>[Visual Basic]

' define an action sequence
Dim pushArray As New ArrayList()
' use ArrayList.Add to push the elements to the list
'pushArray.Add("elements");
'add this array to push object
Dim push As New Push(pushArray)

'create an action array
Dim actionArray As New ArrayList()
'add push object to action array
actionArray.Add(push)
actionArray.Add(New ActionRecord(ActionType.NamedObject))
'add appropriate action class object to the action array
actionArray.Add(New BitURShift())


'create a DoAction object and add actions list into it
Dim action As New DoAction(actionArray)
'now add DoAction object into the flash file
flash.Add(action)
'instruct the flash object to show frame
flash.Add(New ShowFrame())</code></example>
    </member>
    <member name="M:Aspose.Flash.Actions.BitURShift.#ctor">
      <summary>
            Default constructor.
            </summary>
      <example>This example shows you how to use BitURShift constructor<code>[C#]

// define an action sequence
ArrayList pushArray = new ArrayList();
// use ArrayList.Add to push the elements to the list
//pushArray.Add("elements");
//add this array to push object
Push push = new Push(pushArray);

//create an action array
ArrayList actionArray = new ArrayList();
//add push object to action array
actionArray.Add(push);
actionArray.Add(new ActionRecord(ActionType.NamedObject));
//add appropriate action class object to the action array
actionArray.Add(new BitURShift());


//create a DoAction object and add actions list into it
DoAction action = new DoAction(actionArray);
//now add DoAction object into the flash file
flash.Add(action);
//instruct the flash object to show frame
flash.Add(new ShowFrame());</code><code>[Visual Basic]

' define an action sequence
Dim pushArray As New ArrayList()
' use ArrayList.Add to push the elements to the list
'pushArray.Add("elements");
'add this array to push object
Dim push As New Push(pushArray)

'create an action array
Dim actionArray As New ArrayList()
'add push object to action array
actionArray.Add(push)
actionArray.Add(New ActionRecord(ActionType.NamedObject))
'add appropriate action class object to the action array
actionArray.Add(New BitURShift())


'create a DoAction object and add actions list into it
Dim action As New DoAction(actionArray)
'now add DoAction object into the flash file
flash.Add(action)
'instruct the flash object to show frame
flash.Add(New ShowFrame())</code></example>
    </member>
    <member name="P:Aspose.Flash.Actions.BitURShift.Size">
      <summary>
            Returns the size of an action object in bytes.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.BitXor">
      <summary>
            Represents a BitXor action object.
            </summary>
      <example>This example shows you how to use BitXor class<code>[C#]

// define an action sequence
ArrayList pushArray = new ArrayList();
// use ArrayList.Add to push the elements to the list
//pushArray.Add("elements");
//add this array to push object
Push push = new Push(pushArray);

//create an action array
ArrayList actionArray = new ArrayList();
//add push object to action array
actionArray.Add(push);
actionArray.Add(new ActionRecord(ActionType.NamedObject));
//add appropriate action class object to the action array
actionArray.Add(new BitXor());


//create a DoAction object and add actions list into it
DoAction action = new DoAction(actionArray);
//now add DoAction object into the flash file
flash.Add(action);
//instruct the flash object to show frame
flash.Add(new ShowFrame());</code><code>[Visual Basic]

' define an action sequence
Dim pushArray As New ArrayList()
' use ArrayList.Add to push the elements to the list
'pushArray.Add("elements");
'add this array to push object
Dim push As New Push(pushArray)

'create an action array
Dim actionArray As New ArrayList()
'add push object to action array
actionArray.Add(push)
actionArray.Add(New ActionRecord(ActionType.NamedObject))
'add appropriate action class object to the action array
actionArray.Add(New BitXor())


'create a DoAction object and add actions list into it
Dim action As New DoAction(actionArray)
'now add DoAction object into the flash file
flash.Add(action)
'instruct the flash object to show frame
flash.Add(New ShowFrame())</code></example>
    </member>
    <member name="M:Aspose.Flash.Actions.BitXor.#ctor">
      <summary>
            Default constructor.
            </summary>
      <example>This example shows you how to use BitXor constructor<code>[C#]

// define an action sequence
ArrayList pushArray = new ArrayList();
// use ArrayList.Add to push the elements to the list
//pushArray.Add("elements");
//add this array to push object
Push push = new Push(pushArray);

//create an action array
ArrayList actionArray = new ArrayList();
//add push object to action array
actionArray.Add(push);
actionArray.Add(new ActionRecord(ActionType.NamedObject));
//add appropriate action class object to the action array
actionArray.Add(new BitXor());


//create a DoAction object and add actions list into it
DoAction action = new DoAction(actionArray);
//now add DoAction object into the flash file
flash.Add(action);
//instruct the flash object to show frame
flash.Add(new ShowFrame());</code><code>[Visual Basic]

' define an action sequence
Dim pushArray As New ArrayList()
' use ArrayList.Add to push the elements to the list
'pushArray.Add("elements");
'add this array to push object
Dim push As New Push(pushArray)

'create an action array
Dim actionArray As New ArrayList()
'add push object to action array
actionArray.Add(push)
actionArray.Add(New ActionRecord(ActionType.NamedObject))
'add appropriate action class object to the action array
actionArray.Add(New BitXor())


'create a DoAction object and add actions list into it
Dim action As New DoAction(actionArray)
'now add DoAction object into the flash file
flash.Add(action)
'instruct the flash object to show frame
flash.Add(New ShowFrame())</code></example>
    </member>
    <member name="P:Aspose.Flash.Actions.BitXor.Size">
      <summary>
            Returns the size of an action object in bytes.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.Call">
      <summary>
            Represents a Call action object.
            </summary>
      <example>This example shows you how to use Call class<code>[C#]

// define an action sequence
ArrayList pushArray = new ArrayList();
// use ArrayList.Add to push the elements to the list
//pushArray.Add("elements");
//add this array to push object
Push push = new Push(pushArray);

//create an action array
ArrayList actionArray = new ArrayList();
//add push object to action array
actionArray.Add(push);
actionArray.Add(new ActionRecord(ActionType.NamedObject));
//add appropriate action class object to the action array
actionArray.Add(new Call());


//create a DoAction object and add actions list into it
DoAction action = new DoAction(actionArray);
//now add DoAction object into the flash file
flash.Add(action);
//instruct the flash object to show frame
flash.Add(new ShowFrame());</code><code>[Visual Basic]

' define an action sequence
Dim pushArray As New ArrayList()
' use ArrayList.Add to push the elements to the list
'pushArray.Add("elements");
'add this array to push object
Dim push As New Push(pushArray)

'create an action array
Dim actionArray As New ArrayList()
'add push object to action array
actionArray.Add(push)
actionArray.Add(New ActionRecord(ActionType.NamedObject))
'add appropriate action class object to the action array
actionArray.Add(New [Call]())


'create a DoAction object and add actions list into it
Dim action As New DoAction(actionArray)
'now add DoAction object into the flash file
flash.Add(action)
'instruct the flash object to show frame
flash.Add(New ShowFrame())</code></example>
    </member>
    <member name="M:Aspose.Flash.Actions.Call.#ctor">
      <summary>
            Default constructor.
            </summary>
      <example>This example shows you how to use Call constructor<code>[C#]

// define an action sequence
ArrayList pushArray = new ArrayList();
// use ArrayList.Add to push the elements to the list
//pushArray.Add("elements");
//add this array to push object
Push push = new Push(pushArray);

//create an action array
ArrayList actionArray = new ArrayList();
//add push object to action array
actionArray.Add(push);
actionArray.Add(new ActionRecord(ActionType.NamedObject));
//add appropriate action class object to the action array
actionArray.Add(new Call());


//create a DoAction object and add actions list into it
DoAction action = new DoAction(actionArray);
//now add DoAction object into the flash file
flash.Add(action);
//instruct the flash object to show frame
flash.Add(new ShowFrame());</code><code>[Visual Basic]

' define an action sequence
Dim pushArray As New ArrayList()
' use ArrayList.Add to push the elements to the list
'pushArray.Add("elements");
'add this array to push object
Dim push As New Push(pushArray)

'create an action array
Dim actionArray As New ArrayList()
'add push object to action array
actionArray.Add(push)
actionArray.Add(New ActionRecord(ActionType.NamedObject))
'add appropriate action class object to the action array
actionArray.Add(New [Call]())


'create a DoAction object and add actions list into it
Dim action As New DoAction(actionArray)
'now add DoAction object into the flash file
flash.Add(action)
'instruct the flash object to show frame
flash.Add(New ShowFrame())</code></example>
    </member>
    <member name="P:Aspose.Flash.Actions.Call.Size">
      <summary>
            Returns the size of an action object in bytes.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.CallFunction">
      <summary>
            Represents a CallFunction action object.
            </summary>
      <example>This example shows you how to use CallFunction class<code>[C#]

// define an action sequence
ArrayList pushArray = new ArrayList();
// use ArrayList.Add to push the elements to the list
//pushArray.Add("elements");
//add this array to push object
Push push = new Push(pushArray);

//create an action array
ArrayList actionArray = new ArrayList();
//add push object to action array
actionArray.Add(push);
actionArray.Add(new ActionRecord(ActionType.NamedObject));
//add appropriate action class object to the action array
actionArray.Add(new CallFunction());


//create a DoAction object and add actions list into it
DoAction action = new DoAction(actionArray);
//now add DoAction object into the flash file
flash.Add(action);
//instruct the flash object to show frame
flash.Add(new ShowFrame());</code><code>[Visual Basic]

' define an action sequence
Dim pushArray As New ArrayList()
' use ArrayList.Add to push the elements to the list
'pushArray.Add("elements");
'add this array to push object
Dim push As New Push(pushArray)

'create an action array
Dim actionArray As New ArrayList()
'add push object to action array
actionArray.Add(push)
actionArray.Add(New ActionRecord(ActionType.NamedObject))
'add appropriate action class object to the action array
actionArray.Add(New CallFunction())


'create a DoAction object and add actions list into it
Dim action As New DoAction(actionArray)
'now add DoAction object into the flash file
flash.Add(action)
'instruct the flash object to show frame
flash.Add(New ShowFrame())</code></example>
    </member>
    <member name="M:Aspose.Flash.Actions.CallFunction.#ctor">
      <summary>
            Default constructor.
            </summary>
      <example>This example shows you how to use CallFunction constructor<code>[C#]

// define an action sequence
ArrayList pushArray = new ArrayList();
// use ArrayList.Add to push the elements to the list
//pushArray.Add("elements");
//add this array to push object
Push push = new Push(pushArray);

//create an action array
ArrayList actionArray = new ArrayList();
//add push object to action array
actionArray.Add(push);
actionArray.Add(new ActionRecord(ActionType.NamedObject));
//add appropriate action class object to the action array
actionArray.Add(new CallFunction());


//create a DoAction object and add actions list into it
DoAction action = new DoAction(actionArray);
//now add DoAction object into the flash file
flash.Add(action);
//instruct the flash object to show frame
flash.Add(new ShowFrame());</code><code>[Visual Basic]

' define an action sequence
Dim pushArray As New ArrayList()
' use ArrayList.Add to push the elements to the list
'pushArray.Add("elements");
'add this array to push object
Dim push As New Push(pushArray)

'create an action array
Dim actionArray As New ArrayList()
'add push object to action array
actionArray.Add(push)
actionArray.Add(New ActionRecord(ActionType.NamedObject))
'add appropriate action class object to the action array
actionArray.Add(New CallFunction())


'create a DoAction object and add actions list into it
Dim action As New DoAction(actionArray)
'now add DoAction object into the flash file
flash.Add(action)
'instruct the flash object to show frame
flash.Add(New ShowFrame())</code></example>
    </member>
    <member name="P:Aspose.Flash.Actions.CallFunction.Size">
      <summary>
            Returns the size of an action object in bytes.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.CallMethod">
      <summary>
            Represents a CallMethod action object.
            </summary>
      <example>This example shows you how to use CallMethod class<code>[C#]

// define an action sequence
ArrayList pushArray = new ArrayList();
// use ArrayList.Add to push the elements to the list
//pushArray.Add("elements");
//add this array to push object
Push push = new Push(pushArray);

//create an action array
ArrayList actionArray = new ArrayList();
//add push object to action array
actionArray.Add(push);
actionArray.Add(new ActionRecord(ActionType.NamedObject));
//add appropriate action class object to the action array
actionArray.Add(new CallMethod());


//create a DoAction object and add actions list into it
DoAction action = new DoAction(actionArray);
//now add DoAction object into the flash file
flash.Add(action);
//instruct the flash object to show frame
flash.Add(new ShowFrame());</code><code>[Visual Basic]

' define an action sequence
Dim pushArray As New ArrayList()
' use ArrayList.Add to push the elements to the list
'pushArray.Add("elements");
'add this array to push object
Dim push As New Push(pushArray)

'create an action array
Dim actionArray As New ArrayList()
'add push object to action array
actionArray.Add(push)
actionArray.Add(New ActionRecord(ActionType.NamedObject))
'add appropriate action class object to the action array
actionArray.Add(New CallMethod())


'create a DoAction object and add actions list into it
Dim action As New DoAction(actionArray)
'now add DoAction object into the flash file
flash.Add(action)
'instruct the flash object to show frame
flash.Add(New ShowFrame())</code></example>
    </member>
    <member name="M:Aspose.Flash.Actions.CallMethod.#ctor">
      <summary>
            Default constructor.
            </summary>
      <example>This example shows you how to use CallMethod constructor<code>[C#]

// define an action sequence
ArrayList pushArray = new ArrayList();
// use ArrayList.Add to push the elements to the list
//pushArray.Add("elements");
//add this array to push object
Push push = new Push(pushArray);

//create an action array
ArrayList actionArray = new ArrayList();
//add push object to action array
actionArray.Add(push);
actionArray.Add(new ActionRecord(ActionType.NamedObject));
//add appropriate action class object to the action array
actionArray.Add(new CallMethod());


//create a DoAction object and add actions list into it
DoAction action = new DoAction(actionArray);
//now add DoAction object into the flash file
flash.Add(action);
//instruct the flash object to show frame
flash.Add(new ShowFrame());</code><code>[Visual Basic]

' define an action sequence
Dim pushArray As New ArrayList()
' use ArrayList.Add to push the elements to the list
'pushArray.Add("elements");
'add this array to push object
Dim push As New Push(pushArray)

'create an action array
Dim actionArray As New ArrayList()
'add push object to action array
actionArray.Add(push)
actionArray.Add(New ActionRecord(ActionType.NamedObject))
'add appropriate action class object to the action array
actionArray.Add(New CallMethod())


'create a DoAction object and add actions list into it
Dim action As New DoAction(actionArray)
'now add DoAction object into the flash file
flash.Add(action)
'instruct the flash object to show frame
flash.Add(New ShowFrame())</code></example>
    </member>
    <member name="P:Aspose.Flash.Actions.CallMethod.Size">
      <summary>
            Returns the size of an action object in bytes.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.CastOp">
      <summary>
            Represents a CastOp action object.
            </summary>
      <example>This example shows you how to use CastOp class<code>[C#]

// define an action sequence
ArrayList pushArray = new ArrayList();
// use ArrayList.Add to push the elements to the list
//pushArray.Add("elements");
//add this array to push object
Push push = new Push(pushArray);

//create an action array
ArrayList actionArray = new ArrayList();
//add push object to action array
actionArray.Add(push);
actionArray.Add(new ActionRecord(ActionType.NamedObject));
//add appropriate action class object to the action array
actionArray.Add(new CastOp());


//create a DoAction object and add actions list into it
DoAction action = new DoAction(actionArray);
//now add DoAction object into the flash file
flash.Add(action);
//instruct the flash object to show frame
flash.Add(new ShowFrame());</code><code>[Visual Basic]

' define an action sequence
Dim pushArray As New ArrayList()
' use ArrayList.Add to push the elements to the list
'pushArray.Add("elements");
'add this array to push object
Dim push As New Push(pushArray)

'create an action array
Dim actionArray As New ArrayList()
'add push object to action array
actionArray.Add(push)
actionArray.Add(New ActionRecord(ActionType.NamedObject))
'add appropriate action class object to the action array
actionArray.Add(New CastOp())


'create a DoAction object and add actions list into it
Dim action As New DoAction(actionArray)
'now add DoAction object into the flash file
flash.Add(action)
'instruct the flash object to show frame
flash.Add(New ShowFrame())</code></example>
    </member>
    <member name="M:Aspose.Flash.Actions.CastOp.#ctor">
      <summary>
            Default constructor.
            </summary>
      <example>This example shows you how to use CastOp constructor<code>[C#]

// define an action sequence
ArrayList pushArray = new ArrayList();
// use ArrayList.Add to push the elements to the list
//pushArray.Add("elements");
//add this array to push object
Push push = new Push(pushArray);

//create an action array
ArrayList actionArray = new ArrayList();
//add push object to action array
actionArray.Add(push);
actionArray.Add(new ActionRecord(ActionType.NamedObject));
//add appropriate action class object to the action array
actionArray.Add(new CastOp());


//create a DoAction object and add actions list into it
DoAction action = new DoAction(actionArray);
//now add DoAction object into the flash file
flash.Add(action);
//instruct the flash object to show frame
flash.Add(new ShowFrame());</code><code>[Visual Basic]

' define an action sequence
Dim pushArray As New ArrayList()
' use ArrayList.Add to push the elements to the list
'pushArray.Add("elements");
'add this array to push object
Dim push As New Push(pushArray)

'create an action array
Dim actionArray As New ArrayList()
'add push object to action array
actionArray.Add(push)
actionArray.Add(New ActionRecord(ActionType.NamedObject))
'add appropriate action class object to the action array
actionArray.Add(New CastOp())


'create a DoAction object and add actions list into it
Dim action As New DoAction(actionArray)
'now add DoAction object into the flash file
flash.Add(action)
'instruct the flash object to show frame
flash.Add(New ShowFrame())</code></example>
    </member>
    <member name="P:Aspose.Flash.Actions.CastOp.Size">
      <summary>
            Returns the size of an action object in bytes.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.CharToAscii">
      <summary>
            Represents a CharToAscii action object.
            </summary>
      <example>This example shows you how to use CharToAscii class<code>[C#]

// define an action sequence
ArrayList pushArray = new ArrayList();
// use ArrayList.Add to push the elements to the list
//pushArray.Add("elements");
//add this array to push object
Push push = new Push(pushArray);

//create an action array
ArrayList actionArray = new ArrayList();
//add push object to action array
actionArray.Add(push);
actionArray.Add(new ActionRecord(ActionType.NamedObject));
//add appropriate action class object to the action array
actionArray.Add(new CharToAscii());


//create a DoAction object and add actions list into it
DoAction action = new DoAction(actionArray);
//now add DoAction object into the flash file
flash.Add(action);
//instruct the flash object to show frame
flash.Add(new ShowFrame());</code><code>[Visual Basic]

' define an action sequence
Dim pushArray As New ArrayList()
' use ArrayList.Add to push the elements to the list
'pushArray.Add("elements");
'add this array to push object
Dim push As New Push(pushArray)

'create an action array
Dim actionArray As New ArrayList()
'add push object to action array
actionArray.Add(push)
actionArray.Add(New ActionRecord(ActionType.NamedObject))
'add appropriate action class object to the action array
actionArray.Add(New CharToAscii())


'create a DoAction object and add actions list into it
Dim action As New DoAction(actionArray)
'now add DoAction object into the flash file
flash.Add(action)
'instruct the flash object to show frame
flash.Add(New ShowFrame())</code></example>
    </member>
    <member name="M:Aspose.Flash.Actions.CharToAscii.#ctor">
      <summary>
            Default constructor.
            </summary>
      <example>This example shows you how to use CharToAscii constructor<code>[C#]

// define an action sequence
ArrayList pushArray = new ArrayList();
// use ArrayList.Add to push the elements to the list
//pushArray.Add("elements");
//add this array to push object
Push push = new Push(pushArray);

//create an action array
ArrayList actionArray = new ArrayList();
//add push object to action array
actionArray.Add(push);
actionArray.Add(new ActionRecord(ActionType.NamedObject));
//add appropriate action class object to the action array
actionArray.Add(new CharToAscii());


//create a DoAction object and add actions list into it
DoAction action = new DoAction(actionArray);
//now add DoAction object into the flash file
flash.Add(action);
//instruct the flash object to show frame
flash.Add(new ShowFrame());</code><code>[Visual Basic]

' define an action sequence
Dim pushArray As New ArrayList()
' use ArrayList.Add to push the elements to the list
'pushArray.Add("elements");
'add this array to push object
Dim push As New Push(pushArray)

'create an action array
Dim actionArray As New ArrayList()
'add push object to action array
actionArray.Add(push)
actionArray.Add(New ActionRecord(ActionType.NamedObject))
'add appropriate action class object to the action array
actionArray.Add(New CharToAscii())


'create a DoAction object and add actions list into it
Dim action As New DoAction(actionArray)
'now add DoAction object into the flash file
flash.Add(action)
'instruct the flash object to show frame
flash.Add(New ShowFrame())</code></example>
    </member>
    <member name="P:Aspose.Flash.Actions.CharToAscii.Size">
      <summary>
            Returns the size of an action object in bytes.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.CloneSprite">
      <summary>
            Represents a CloneSprite action object.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.CloneSprite.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Actions.CloneSprite.Size">
      <summary>
            Returns the size of an action object in bytes.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.ConstantPool">
      <summary>
        <p>ConstantPool class is used to create a new constant pool in the ActionContext.</p>
        <p>It replaces the old constant pool if it already exists in the ActionContext.</p>
      </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.ConstantPool.#ctor">
      <summary>
            Default constructor with empty pool.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.ConstantPool.#ctor(System.Collections.ArrayList)">
      <summary>
            ConstantPool constructor
            </summary>
      <param name="array">array of strins</param>
    </member>
    <member name="M:Aspose.Flash.Actions.ConstantPool.Add(System.String)">
      <summary>
            Adds a String to the pool.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Actions.ConstantPool.StringPool">
      <summary>
            String constants.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Actions.ConstantPool.Size">
      <summary>
            Returns the size of an action object in bytes.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.Decrement">
      <summary>
            Represents a Decrement action object.
            </summary>
      <example>This example shows you how to use Decrement class<code>[C#]

// define an action sequence
ArrayList pushArray = new ArrayList();
// use ArrayList.Add to push the elements to the list
//pushArray.Add("elements");
//add this array to push object
Push push = new Push(pushArray);

//create an action array
ArrayList actionArray = new ArrayList();
//add push object to action array
actionArray.Add(push);
actionArray.Add(new ActionRecord(ActionType.NamedObject));
//add appropriate action class object to the action array
actionArray.Add(new Decrement());


//create a DoAction object and add actions list into it
DoAction action = new DoAction(actionArray);
//now add DoAction object into the flash file
flash.Add(action);
//instruct the flash object to show frame
flash.Add(new ShowFrame());</code><code>[Visual Basic]

' define an action sequence
Dim pushArray As New ArrayList()
' use ArrayList.Add to push the elements to the list
'pushArray.Add("elements");
'add this array to push object
Dim push As New Push(pushArray)

'create an action array
Dim actionArray As New ArrayList()
'add push object to action array
actionArray.Add(push)
actionArray.Add(New ActionRecord(ActionType.NamedObject))
'add appropriate action class object to the action array
actionArray.Add(New Decrement())


'create a DoAction object and add actions list into it
Dim action As New DoAction(actionArray)
'now add DoAction object into the flash file
flash.Add(action)
'instruct the flash object to show frame
flash.Add(New ShowFrame())</code></example>
    </member>
    <member name="M:Aspose.Flash.Actions.Decrement.#ctor">
      <summary>
            Default constructor.
            </summary>
      <example>This example shows you how to use Decrement constructor<code>[C#]

// define an action sequence
ArrayList pushArray = new ArrayList();
// use ArrayList.Add to push the elements to the list
//pushArray.Add("elements");
//add this array to push object
Push push = new Push(pushArray);

//create an action array
ArrayList actionArray = new ArrayList();
//add push object to action array
actionArray.Add(push);
actionArray.Add(new ActionRecord(ActionType.NamedObject));
//add appropriate action class object to the action array
actionArray.Add(new Decrement());


//create a DoAction object and add actions list into it
DoAction action = new DoAction(actionArray);
//now add DoAction object into the flash file
flash.Add(action);
//instruct the flash object to show frame
flash.Add(new ShowFrame());</code><code>[Visual Basic]

' define an action sequence
Dim pushArray As New ArrayList()
' use ArrayList.Add to push the elements to the list
'pushArray.Add("elements");
'add this array to push object
Dim push As New Push(pushArray)

'create an action array
Dim actionArray As New ArrayList()
'add push object to action array
actionArray.Add(push)
actionArray.Add(New ActionRecord(ActionType.NamedObject))
'add appropriate action class object to the action array
actionArray.Add(New Decrement())


'create a DoAction object and add actions list into it
Dim action As New DoAction(actionArray)
'now add DoAction object into the flash file
flash.Add(action)
'instruct the flash object to show frame
flash.Add(New ShowFrame())</code></example>
    </member>
    <member name="P:Aspose.Flash.Actions.Decrement.Size">
      <summary>
            Returns the size of an action object in bytes.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.DefineFunction">
      <summary>
            DefineFunction specifies a user function with a given name and body size.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.DefineFunction.#ctor(System.String,System.Collections.ArrayList,System.Collections.ArrayList)">
      <summary>
            DefineFunction constructor. 
            </summary>
      <param name="name">the name of the function.</param>
      <param name="argumentArray">an array of the argument names.</param>
      <param name="actionArray">the array of actions.</param>
    </member>
    <member name="M:Aspose.Flash.Actions.DefineFunction.#ctor(System.Collections.ArrayList,System.Collections.ArrayList)">
      <summary>
            DefineFunction constructor for anonymous function. 
            </summary>
      <param name="argumentArray">an array of the argument names.</param>
      <param name="actionArray">the array of actions.</param>
    </member>
    <member name="M:Aspose.Flash.Actions.DefineFunction.Add(System.String)">
      <summary>
            Add the name of an argument to the array of argument names.
            </summary>
      <param name="argument">the name of an argument passed to the NewFunction object.</param>
    </member>
    <member name="M:Aspose.Flash.Actions.DefineFunction.Add(Aspose.Flash.Actions.ActionObject)">
      <summary>
            Add the action object to the array of actions.
            </summary>
      <param name="action">an object belonging to a class derived from ActionObject.</param>
    </member>
    <member name="P:Aspose.Flash.Actions.DefineFunction.FunctionName">
      <summary>
             Returns or sets the name of a function. Empty if anonymous.
             Read/write <see cref="T:System.String" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Actions.DefineFunction.Arguments">
      <summary>
            Returns or sets the names of function arguments.
            Read/write <see cref="T:System.Collections.ArrayList" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Actions.DefineFunction.Actions">
      <summary>
            Returns or sets the list of actions.
            Read/write <see cref="T:System.Collections.ArrayList" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Actions.DefineFunction.Size">
      <summary>
            Returns the size of an action object in bytes.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.DefineFunction2">
      <summary>
        <p>DefineFunction2 class is used to create a user-defined function.</p>
        <p>It was added in Flash 7 to improve the performance of function calls by allowing 
            variables to be pre-loaded to a set of up to 256 internal registers and controlling 
            the loading of pre-defined variables such as root, parent, global, super, this and the arguments array 
            containing the arguments passed to the function.</p>
      </summary>
    </member>
    <member name="F:Aspose.Flash.Actions.DefineFunction2.CreateSuper">
      <summary>Create and initialized the predefined variable, <em>super</em>. </summary>
    </member>
    <member name="F:Aspose.Flash.Actions.DefineFunction2.CreateArguments">
      <summary>Create and initialized the predefined variable, <em>_arguments</em>. </summary>
    </member>
    <member name="F:Aspose.Flash.Actions.DefineFunction2.CreateThis">
      <summary>Create and initialized the predefined variable, <em>this</em>. </summary>
    </member>
    <member name="F:Aspose.Flash.Actions.DefineFunction2.LoadThis">
      <summary>Load the predefine variable, <em>this</em>, into register 1. </summary>
    </member>
    <member name="F:Aspose.Flash.Actions.DefineFunction2.LoadArguments">
      <summary>Load the predefine variable, <em>_arguments</em>, into register 2. </summary>
    </member>
    <member name="F:Aspose.Flash.Actions.DefineFunction2.LoadSuper">
      <summary>Load the predefine variable, <em>super</em>, into register 3. </summary>
    </member>
    <member name="F:Aspose.Flash.Actions.DefineFunction2.LoadRoot">
      <summary>Load the predefine variable, <em>_root</em>, into register 4. </summary>
    </member>
    <member name="F:Aspose.Flash.Actions.DefineFunction2.LoadParent">
      <summary>Load the predefine variable, <em>_parent</em>, into register 5. </summary>
    </member>
    <member name="F:Aspose.Flash.Actions.DefineFunction2.LoadGlobal">
      <summary>Load the predefine variable, <em>_global</em>, into register 6. </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.DefineFunction2.#ctor(System.String,System.Collections.ArrayList,System.Collections.ArrayList)">
      <summary>
            DefineFunction2 constructor
            </summary>
      <param name="name">the name of the function.</param>
      <param name="arguments">an array list of the names of the arguments.</param>
      <param name="actions">the array of actions o perform.</param>
    </member>
    <member name="M:Aspose.Flash.Actions.DefineFunction2.#ctor(System.Collections.ArrayList,System.Collections.ArrayList)">
      <summary>
            DefineFunction2 constructor for an anonymous function
            </summary>
      <param name="arguments">an array of argyment names.</param>
      <param name="actions">the array of actions to perform.</param>
    </member>
    <member name="M:Aspose.Flash.Actions.DefineFunction2.Add(Aspose.Flash.Actions.RegisterVariable)">
      <summary>
            Adds the name of an argument to the array of argument names.
            </summary>
      <param name="argument">the name of an argument passed to the NewFunction object.</param>
    </member>
    <member name="M:Aspose.Flash.Actions.DefineFunction2.Add(Aspose.Flash.Actions.ActionObject)">
      <summary>
            Adds the action object to the array of actions.
            </summary>
      <param name="action">an object belonging to a class derived from ActionObject.</param>
    </member>
    <member name="P:Aspose.Flash.Actions.DefineFunction2.FunctionName">
      <summary>
            Returns or sets the name of a function. Empty if anonymous.
            Read/write <see cref="T:System.String" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Actions.DefineFunction2.IsPreloadParent">
      <summary>
            Returns or sets PreloadParent flag.
            Read/write <see cref="T:System.Boolean" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Actions.DefineFunction2.IsPreloadRoot">
      <summary>
            Returns or sets PreloadRoot flag.
            Read/write <see cref="T:System.Boolean" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Actions.DefineFunction2.IsSuppressSuper">
      <summary>
            Returns or sets SuppressSuper flag.
            Read/write <see cref="T:System.Boolean" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Actions.DefineFunction2.IsPreloadSuper">
      <summary>
            Retirns or sets PreloadSuper flag.
            Read/write <see cref="T:System.Boolean" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Actions.DefineFunction2.IsSuppressArguments">
      <summary>
            Returns or sets SuppressArguments flag.
            Read/write <see cref="T:System.Boolean" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Actions.DefineFunction2.IsPreloadArguments">
      <summary>
            Returns or sets PreloadArguments flag.
            Read/write <see cref="T:System.Boolean" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Actions.DefineFunction2.IsSuppressThis">
      <summary>
            Returns or sets SuppressThis flag.
            Read/write <see cref="T:System.Boolean" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Actions.DefineFunction2.IsPreloadThis">
      <summary>
            Returns or sets PreloadThis flag.
            Read/write <see cref="T:System.Boolean" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Actions.DefineFunction2.IsPreloadGlobal">
      <summary>
            Returns or sets PreloadGlobal flag.
            Read/write <see cref="T:System.Boolean" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Actions.DefineFunction2.RegisterCount">
      <summary>
            Returns or sets the number of registers to allocate.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Actions.DefineFunction2.Optimizations">
      <summary>
            Returns or sets the code containing compound flags that control
            the execution environment of a function or method.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Actions.DefineFunction2.Arguments">
      <summary>
            Returns or sets the array of RegisterVariables that define function arguments.
            Read/write <see cref="T:System.Collections.ArrayList" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Actions.DefineFunction2.Actions">
      <summary>
            Returns or sets the ArrayList of actions executed by function.
            Read/write <see cref="T:System.Collections.ArrayList" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Actions.DefineFunction2.Size">
      <summary>
            Returns the size of an action object in bytes.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.DefineLocal">
      <summary>
            Represents a DefineLocal action object.
            </summary>
      <example>This example shows you how to use DefineLocal class<code>[C#]

// define an action sequence
ArrayList pushArray = new ArrayList();
// use ArrayList.Add to push the elements to the list
//pushArray.Add("elements");
//add this array to push object
Push push = new Push(pushArray);

//create an action array
ArrayList actionArray = new ArrayList();
//add push object to action array
actionArray.Add(push);
actionArray.Add(new ActionRecord(ActionType.NamedObject));
//add appropriate action class object to the action array
actionArray.Add(new DefineLocal());


//create a DoAction object and add actions list into it
DoAction action = new DoAction(actionArray);
//now add DoAction object into the flash file
flash.Add(action);
//instruct the flash object to show frame
flash.Add(new ShowFrame());</code><code>[Visual Basic]

' define an action sequence
Dim pushArray As New ArrayList()
' use ArrayList.Add to push the elements to the list
'pushArray.Add("elements");
'add this array to push object
Dim push As New Push(pushArray)

'create an action array
Dim actionArray As New ArrayList()
'add push object to action array
actionArray.Add(push)
actionArray.Add(New ActionRecord(ActionType.NamedObject))
'add appropriate action class object to the action array
actionArray.Add(New DefineLocal())


'create a DoAction object and add actions list into it
Dim action As New DoAction(actionArray)
'now add DoAction object into the flash file
flash.Add(action)
'instruct the flash object to show frame
flash.Add(New ShowFrame())</code></example>
    </member>
    <member name="M:Aspose.Flash.Actions.DefineLocal.#ctor">
      <summary>
            Default constructor.
            </summary>
      <example>This example shows you how to use DefineLocal constructor<code>[C#]

// define an action sequence
ArrayList pushArray = new ArrayList();
// use ArrayList.Add to push the elements to the list
//pushArray.Add("elements");
//add this array to push object
Push push = new Push(pushArray);

//create an action array
ArrayList actionArray = new ArrayList();
//add push object to action array
actionArray.Add(push);
actionArray.Add(new ActionRecord(ActionType.NamedObject));
//add appropriate action class object to the action array
actionArray.Add(new DefineLocal());


//create a DoAction object and add actions list into it
DoAction action = new DoAction(actionArray);
//now add DoAction object into the flash file
flash.Add(action);
//instruct the flash object to show frame
flash.Add(new ShowFrame());</code><code>[Visual Basic]

' define an action sequence
Dim pushArray As New ArrayList()
' use ArrayList.Add to push the elements to the list
'pushArray.Add("elements");
'add this array to push object
Dim push As New Push(pushArray)

'create an action array
Dim actionArray As New ArrayList()
'add push object to action array
actionArray.Add(push)
actionArray.Add(New ActionRecord(ActionType.NamedObject))
'add appropriate action class object to the action array
actionArray.Add(New DefineLocal())


'create a DoAction object and add actions list into it
Dim action As New DoAction(actionArray)
'now add DoAction object into the flash file
flash.Add(action)
'instruct the flash object to show frame
flash.Add(New ShowFrame())</code></example>
    </member>
    <member name="P:Aspose.Flash.Actions.DefineLocal.Size">
      <summary>
            Returns the size of an action object in bytes.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.DefineLocal2">
      <summary>
            Represents a DefineLocal2 action object.
            </summary>
      <example>This example shows you how to use DefineLocal2 class<code>[C#]

// define an action sequence
ArrayList pushArray = new ArrayList();
// use ArrayList.Add to push the elements to the list
//pushArray.Add("elements");
//add this array to push object
Push push = new Push(pushArray);

//create an action array
ArrayList actionArray = new ArrayList();
//add push object to action array
actionArray.Add(push);
actionArray.Add(new ActionRecord(ActionType.NamedObject));
//add appropriate action class object to the action array
actionArray.Add(new DefineLocal2());


//create a DoAction object and add actions list into it
DoAction action = new DoAction(actionArray);
//now add DoAction object into the flash file
flash.Add(action);
//instruct the flash object to show frame
flash.Add(new ShowFrame());</code><code>[Visual Basic]

' define an action sequence
Dim pushArray As New ArrayList()
' use ArrayList.Add to push the elements to the list
'pushArray.Add("elements");
'add this array to push object
Dim push As New Push(pushArray)

'create an action array
Dim actionArray As New ArrayList()
'add push object to action array
actionArray.Add(push)
actionArray.Add(New ActionRecord(ActionType.NamedObject))
'add appropriate action class object to the action array
actionArray.Add(New DefineLocal2())


'create a DoAction object and add actions list into it
Dim action As New DoAction(actionArray)
'now add DoAction object into the flash file
flash.Add(action)
'instruct the flash object to show frame
flash.Add(New ShowFrame())</code></example>
    </member>
    <member name="M:Aspose.Flash.Actions.DefineLocal2.#ctor">
      <summary>
            Default constructor.
            </summary>
      <example>This example shows you how to use DefineLocal2 constructor<code>[C#]

// define an action sequence
ArrayList pushArray = new ArrayList();
// use ArrayList.Add to push the elements to the list
//pushArray.Add("elements");
//add this array to push object
Push push = new Push(pushArray);

//create an action array
ArrayList actionArray = new ArrayList();
//add push object to action array
actionArray.Add(push);
actionArray.Add(new ActionRecord(ActionType.NamedObject));
//add appropriate action class object to the action array
actionArray.Add(new DefineLocal2());


//create a DoAction object and add actions list into it
DoAction action = new DoAction(actionArray);
//now add DoAction object into the flash file
flash.Add(action);
//instruct the flash object to show frame
flash.Add(new ShowFrame());</code><code>[Visual Basic]

' define an action sequence
Dim pushArray As New ArrayList()
' use ArrayList.Add to push the elements to the list
'pushArray.Add("elements");
'add this array to push object
Dim push As New Push(pushArray)

'create an action array
Dim actionArray As New ArrayList()
'add push object to action array
actionArray.Add(push)
actionArray.Add(New ActionRecord(ActionType.NamedObject))
'add appropriate action class object to the action array
actionArray.Add(New DefineLocal2())


'create a DoAction object and add actions list into it
Dim action As New DoAction(actionArray)
'now add DoAction object into the flash file
flash.Add(action)
'instruct the flash object to show frame
flash.Add(New ShowFrame())</code></example>
    </member>
    <member name="P:Aspose.Flash.Actions.DefineLocal2.Size">
      <summary>
            Returns the size of an action object in bytes.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.Delete">
      <summary>
            Represents a Delete action object.
            </summary>
      <example>This example shows you how to use Delete class<code>[C#]

// define an action sequence
ArrayList pushArray = new ArrayList();
// use ArrayList.Add to push the elements to the list
//pushArray.Add("elements");
//add this array to push object
Push push = new Push(pushArray);

//create an action array
ArrayList actionArray = new ArrayList();
//add push object to action array
actionArray.Add(push);
actionArray.Add(new ActionRecord(ActionType.NamedObject));
//add appropriate action class object to the action array
actionArray.Add(new Delete());


//create a DoAction object and add actions list into it
DoAction action = new DoAction(actionArray);
//now add DoAction object into the flash file
flash.Add(action);
//instruct the flash object to show frame
flash.Add(new ShowFrame());</code><code>[Visual Basic]

' define an action sequence
Dim pushArray As New ArrayList()
' use ArrayList.Add to push the elements to the list
'pushArray.Add("elements");
'add this array to push object
Dim push As New Push(pushArray)

'create an action array
Dim actionArray As New ArrayList()
'add push object to action array
actionArray.Add(push)
actionArray.Add(New ActionRecord(ActionType.NamedObject))
'add appropriate action class object to the action array
actionArray.Add(New Delete())


'create a DoAction object and add actions list into it
Dim action As New DoAction(actionArray)
'now add DoAction object into the flash file
flash.Add(action)
'instruct the flash object to show frame
flash.Add(New ShowFrame())</code></example>
    </member>
    <member name="M:Aspose.Flash.Actions.Delete.#ctor">
      <summary>
            Default constructor.
            </summary>
      <example>This example shows you how to use Delete constructor<code>[C#]

// define an action sequence
ArrayList pushArray = new ArrayList();
// use ArrayList.Add to push the elements to the list
//pushArray.Add("elements");
//add this array to push object
Push push = new Push(pushArray);

//create an action array
ArrayList actionArray = new ArrayList();
//add push object to action array
actionArray.Add(push);
actionArray.Add(new ActionRecord(ActionType.NamedObject));
//add appropriate action class object to the action array
actionArray.Add(new Delete());


//create a DoAction object and add actions list into it
DoAction action = new DoAction(actionArray);
//now add DoAction object into the flash file
flash.Add(action);
//instruct the flash object to show frame
flash.Add(new ShowFrame());</code><code>[Visual Basic]

' define an action sequence
Dim pushArray As New ArrayList()
' use ArrayList.Add to push the elements to the list
'pushArray.Add("elements");
'add this array to push object
Dim push As New Push(pushArray)

'create an action array
Dim actionArray As New ArrayList()
'add push object to action array
actionArray.Add(push)
actionArray.Add(New ActionRecord(ActionType.NamedObject))
'add appropriate action class object to the action array
actionArray.Add(New Delete())


'create a DoAction object and add actions list into it
Dim action As New DoAction(actionArray)
'now add DoAction object into the flash file
flash.Add(action)
'instruct the flash object to show frame
flash.Add(New ShowFrame())</code></example>
    </member>
    <member name="P:Aspose.Flash.Actions.Delete.Size">
      <summary>
            Returns the size of an action object in bytes.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.Delete2">
      <summary>
            Represents a Delete2 action object.
            </summary>
      <example>This example shows you how to use Delete2 class<code>[C#]

// define an action sequence
ArrayList pushArray = new ArrayList();
// use ArrayList.Add to push the elements to the list
//pushArray.Add("elements");
//add this array to push object
Push push = new Push(pushArray);

//create an action array
ArrayList actionArray = new ArrayList();
//add push object to action array
actionArray.Add(push);
actionArray.Add(new ActionRecord(ActionType.NamedObject));
//add appropriate action class object to the action array
actionArray.Add(new Delete2());


//create a DoAction object and add actions list into it
DoAction action = new DoAction(actionArray);
//now add DoAction object into the flash file
flash.Add(action);
//instruct the flash object to show frame
flash.Add(new ShowFrame());</code><code>[Visual Basic]

' define an action sequence
Dim pushArray As New ArrayList()
' use ArrayList.Add to push the elements to the list
'pushArray.Add("elements");
'add this array to push object
Dim push As New Push(pushArray)

'create an action array
Dim actionArray As New ArrayList()
'add push object to action array
actionArray.Add(push)
actionArray.Add(New ActionRecord(ActionType.NamedObject))
'add appropriate action class object to the action array
actionArray.Add(New Delete2())


'create a DoAction object and add actions list into it
Dim action As New DoAction(actionArray)
'now add DoAction object into the flash file
flash.Add(action)
'instruct the flash object to show frame
flash.Add(New ShowFrame())</code></example>
    </member>
    <member name="M:Aspose.Flash.Actions.Delete2.#ctor">
      <summary>
            Default constructor.
            </summary>
      <example>This example shows you how to use Delete2 constructor<code>[C#]

// define an action sequence
ArrayList pushArray = new ArrayList();
// use ArrayList.Add to push the elements to the list
//pushArray.Add("elements");
//add this array to push object
Push push = new Push(pushArray);

//create an action array
ArrayList actionArray = new ArrayList();
//add push object to action array
actionArray.Add(push);
actionArray.Add(new ActionRecord(ActionType.NamedObject));
//add appropriate action class object to the action array
actionArray.Add(new Delete2());


//create a DoAction object and add actions list into it
DoAction action = new DoAction(actionArray);
//now add DoAction object into the flash file
flash.Add(action);
//instruct the flash object to show frame
flash.Add(new ShowFrame());</code><code>[Visual Basic]

' define an action sequence
Dim pushArray As New ArrayList()
' use ArrayList.Add to push the elements to the list
'pushArray.Add("elements");
'add this array to push object
Dim push As New Push(pushArray)

'create an action array
Dim actionArray As New ArrayList()
'add push object to action array
actionArray.Add(push)
actionArray.Add(New ActionRecord(ActionType.NamedObject))
'add appropriate action class object to the action array
actionArray.Add(New Delete2())


'create a DoAction object and add actions list into it
Dim action As New DoAction(actionArray)
'now add DoAction object into the flash file
flash.Add(action)
'instruct the flash object to show frame
flash.Add(New ShowFrame())</code></example>
    </member>
    <member name="P:Aspose.Flash.Actions.Delete2.Size">
      <summary>
            Returns the size of an action object in bytes.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.Divide">
      <summary>
            Represents a Divide action object.
            </summary>
      <example>This example shows you how to use Divide class<code>[C#]

// define an action sequence
ArrayList pushArray = new ArrayList();
// use ArrayList.Add to push the elements to the list
//pushArray.Add("elements");
//add this array to push object
Push push = new Push(pushArray);

//create an action array
ArrayList actionArray = new ArrayList();
//add push object to action array
actionArray.Add(push);
actionArray.Add(new ActionRecord(ActionType.NamedObject));
//add appropriate action class object to the action array
actionArray.Add(new Devide());


//create a DoAction object and add actions list into it
DoAction action = new DoAction(actionArray);
//now add DoAction object into the flash file
flash.Add(action);
//instruct the flash object to show frame
flash.Add(new ShowFrame());</code><code>[Visual Basic]

' define an action sequence
Dim pushArray As New ArrayList()
' use ArrayList.Add to push the elements to the list
'pushArray.Add("elements");
'add this array to push object
Dim push As New Push(pushArray)

'create an action array
Dim actionArray As New ArrayList()
'add push object to action array
actionArray.Add(push)
actionArray.Add(New ActionRecord(ActionType.NamedObject))
'add appropriate action class object to the action array
actionArray.Add(New Devide())


'create a DoAction object and add actions list into it
Dim action As New DoAction(actionArray)
'now add DoAction object into the flash file
flash.Add(action)
'instruct the flash object to show frame
flash.Add(New ShowFrame())</code></example>
    </member>
    <member name="M:Aspose.Flash.Actions.Divide.#ctor">
      <summary>
            Default constructor.
            </summary>
      <example>This example shows you how to use Divide constructor<code>[C#]

// define an action sequence
ArrayList pushArray = new ArrayList();
// use ArrayList.Add to push the elements to the list
//pushArray.Add("elements");
//add this array to push object
Push push = new Push(pushArray);

//create an action array
ArrayList actionArray = new ArrayList();
//add push object to action array
actionArray.Add(push);
actionArray.Add(new ActionRecord(ActionType.NamedObject));
//add appropriate action class object to the action array
actionArray.Add(new Devide());


//create a DoAction object and add actions list into it
DoAction action = new DoAction(actionArray);
//now add DoAction object into the flash file
flash.Add(action);
//instruct the flash object to show frame
flash.Add(new ShowFrame());</code><code>[Visual Basic]

' define an action sequence
Dim pushArray As New ArrayList()
' use ArrayList.Add to push the elements to the list
'pushArray.Add("elements");
'add this array to push object
Dim push As New Push(pushArray)

'create an action array
Dim actionArray As New ArrayList()
'add push object to action array
actionArray.Add(push)
actionArray.Add(New ActionRecord(ActionType.NamedObject))
'add appropriate action class object to the action array
actionArray.Add(New Devide())


'create a DoAction object and add actions list into it
Dim action As New DoAction(actionArray)
'now add DoAction object into the flash file
flash.Add(action)
'instruct the flash object to show frame
flash.Add(New ShowFrame())</code></example>
    </member>
    <member name="P:Aspose.Flash.Actions.Divide.Size">
      <summary>
            Returns the size of an action object in bytes.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.DoAction">
      <summary>
            DoAction is used to instruct Flash Player to perform a list of actions
            when the current frame is complete. The actions  are performed when
            the ShowFrame object is encountered, regardless of where in the frame
            the DoAction object appears.
            </summary>
      <example>This example shows you how to use DoAction class<code>[C#]

// define an action sequence
ArrayList pushArray = new ArrayList();
// use ArrayList.Add to push the elements to the list
//pushArray.Add("elements");
//add this array to push object
Push push = new Push(pushArray);

//create an action array
ArrayList actionArray = new ArrayList();
//add push object to action array
actionArray.Add(push);
actionArray.Add(new ActionRecord(ActionType.NamedObject));
//add appropriate action class object to the action array
actionArray.Add(new Delete());


//create a DoAction object and add actions list into it
DoAction action = new DoAction(actionArray);
//now add DoAction object into the flash file
flash.Add(action);
//instruct the flash object to show frame
flash.Add(new ShowFrame());</code><code>[Visual Basic]

' define an action sequence
Dim pushArray As New ArrayList()
' use ArrayList.Add to push the elements to the list
'pushArray.Add("elements");
'add this array to push object
Dim push As New Push(pushArray)

'create an action array
Dim actionArray As New ArrayList()
'add push object to action array
actionArray.Add(push)
actionArray.Add(New ActionRecord(ActionType.NamedObject))
'add appropriate action class object to the action array
actionArray.Add(New Delete())


'create a DoAction object and add actions list into it
Dim action As New DoAction(actionArray)
'now add DoAction object into the flash file
flash.Add(action)
'instruct the flash object to show frame
flash.Add(New ShowFrame())</code></example>
    </member>
    <member name="T:Aspose.Flash.Swf.BaseObject">
      <summary> 
            The BaseObject is the root class for objects that represent each of the 
            tagged data structures that make up the Flash file format specification.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Swf.AbstractObject">
      <summary> 
            Represents the abstract flash tag object.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.BaseObject.Type">
      <summary>
            Returns the type of an object.
            Read-only <see cref="T:Aspose.Flash.Swf.BaseObjectType" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.BaseObject.Version">
      <summary>
            Represents tag's "version", this means in which version of swf file format tag has appeared.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.DoAction.#ctor(System.Collections.IList)">
      <summary>
            DoAction constructor.
            </summary>
      <param name="actions">array of actions.</param>
      <example>This example shows you how to use DoAction constructor<code>[C#]

// define an action sequence
ArrayList pushArray = new ArrayList();
// use ArrayList.Add to push the elements to the list
//pushArray.Add("elements");
//add this array to push object
Push push = new Push(pushArray);

//create an action array
ArrayList actionArray = new ArrayList();
//add push object to action array
actionArray.Add(push);
actionArray.Add(new ActionRecord(ActionType.NamedObject));
//add appropriate action class object to the action array
actionArray.Add(new Delete());


//create a DoAction object and add actions list into it
DoAction action = new DoAction(actionArray);
//now add DoAction object into the flash file
flash.Add(action);
//instruct the flash object to show frame
flash.Add(new ShowFrame());</code><code>[Visual Basic]

' define an action sequence
Dim pushArray As New ArrayList()
' use ArrayList.Add to push the elements to the list
'pushArray.Add("elements");
'add this array to push object
Dim push As New Push(pushArray)

'create an action array
Dim actionArray As New ArrayList()
'add push object to action array
actionArray.Add(push)
actionArray.Add(New ActionRecord(ActionType.NamedObject))
'add appropriate action class object to the action array
actionArray.Add(New Delete())


'create a DoAction object and add actions list into it
Dim action As New DoAction(actionArray)
'now add DoAction object into the flash file
flash.Add(action)
'instruct the flash object to show frame
flash.Add(New ShowFrame())</code></example>
    </member>
    <member name="M:Aspose.Flash.Actions.DoAction.#ctor(System.Byte[])">
      <summary>
            DoAction constructor.
            </summary>
      <param name="bytes">an array of encoded actions.</param>
    </member>
    <member name="M:Aspose.Flash.Actions.DoAction.Add(Aspose.Flash.Actions.ActionObject)">
      <summary>
            Add the action object to the array of actions. 
            </summary>
      <param name="action">an object belonging to a class derived from ActionObject.</param>
    </member>
    <member name="P:Aspose.Flash.Actions.DoAction.Actions">
      <summary>
            List of actions to perform - see below.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Actions.DoAction.EncodedActions">
      <summary> 
            The array of encoded actions 
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.End">
      <summary>
            Summary description for End.
            </summary>
      <example>This example shows you how to use End class<code>[C#]

// define an action sequence
ArrayList pushArray = new ArrayList();
// use ArrayList.Add to push the elements to the list
//pushArray.Add("elements");
//add this array to push object
Push push = new Push(pushArray);

//create an action array
ArrayList actionArray = new ArrayList();
//add push object to action array
actionArray.Add(push);
actionArray.Add(new ActionRecord(ActionType.NamedObject));
//add appropriate action class object to the action array
actionArray.Add(new End());


//create a DoAction object and add actions list into it
DoAction action = new DoAction(actionArray);
//now add DoAction object into the flash file
flash.Add(action);
//instruct the flash object to show frame
flash.Add(new ShowFrame());</code><code>[Visual Basic]

' define an action sequence
Dim pushArray As New ArrayList()
' use ArrayList.Add to push the elements to the list
'pushArray.Add("elements");
'add this array to push object
Dim push As New Push(pushArray)

'create an action array
Dim actionArray As New ArrayList()
'add push object to action array
actionArray.Add(push)
actionArray.Add(New ActionRecord(ActionType.NamedObject))
'add appropriate action class object to the action array
actionArray.Add(New [End]())


'create a DoAction object and add actions list into it
Dim action As New DoAction(actionArray)
'now add DoAction object into the flash file
flash.Add(action)
'instruct the flash object to show frame
flash.Add(New ShowFrame())</code></example>
    </member>
    <member name="M:Aspose.Flash.Actions.End.#ctor">
      <summary>
            Default constructor.
            </summary>
      <example>This example shows you how to use End constructor<code>[C#]

// define an action sequence
ArrayList pushArray = new ArrayList();
// use ArrayList.Add to push the elements to the list
//pushArray.Add("elements");
//add this array to push object
Push push = new Push(pushArray);

//create an action array
ArrayList actionArray = new ArrayList();
//add push object to action array
actionArray.Add(push);
actionArray.Add(new ActionRecord(ActionType.NamedObject));
//add appropriate action class object to the action array
actionArray.Add(new End());


//create a DoAction object and add actions list into it
DoAction action = new DoAction(actionArray);
//now add DoAction object into the flash file
flash.Add(action);
//instruct the flash object to show frame
flash.Add(new ShowFrame());</code><code>[Visual Basic]

' define an action sequence
Dim pushArray As New ArrayList()
' use ArrayList.Add to push the elements to the list
'pushArray.Add("elements");
'add this array to push object
Dim push As New Push(pushArray)

'create an action array
Dim actionArray As New ArrayList()
'add push object to action array
actionArray.Add(push)
actionArray.Add(New ActionRecord(ActionType.NamedObject))
'add appropriate action class object to the action array
actionArray.Add(New [End]())


'create a DoAction object and add actions list into it
Dim action As New DoAction(actionArray)
'now add DoAction object into the flash file
flash.Add(action)
'instruct the flash object to show frame
flash.Add(New ShowFrame())</code></example>
    </member>
    <member name="P:Aspose.Flash.Actions.End.Size">
      <summary>
            Returns the size of an action object in bytes.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.EndDrag">
      <summary>
            Represents an EndDrag action object.
            </summary>
      <example>This example shows you how to use EndDrag class<code>[C#]

// define an action sequence
ArrayList pushArray = new ArrayList();
// use ArrayList.Add to push the elements to the list
//pushArray.Add("elements");
//add this array to push object
Push push = new Push(pushArray);

//create an action array
ArrayList actionArray = new ArrayList();
//add push object to action array
actionArray.Add(push);
actionArray.Add(new ActionRecord(ActionType.NamedObject));
//add appropriate action class object to the action array
actionArray.Add(new EndDrag());


//create a DoAction object and add actions list into it
DoAction action = new DoAction(actionArray);
//now add DoAction object into the flash file
flash.Add(action);
//instruct the flash object to show frame
flash.Add(new ShowFrame());</code><code>[Visual Basic]

' define an action sequence
Dim pushArray As New ArrayList()
' use ArrayList.Add to push the elements to the list
'pushArray.Add("elements");
'add this array to push object
Dim push As New Push(pushArray)

'create an action array
Dim actionArray As New ArrayList()
'add push object to action array
actionArray.Add(push)
actionArray.Add(New ActionRecord(ActionType.NamedObject))
'add appropriate action class object to the action array
actionArray.Add(New EndDrag())


'create a DoAction object and add actions list into it
Dim action As New DoAction(actionArray)
'now add DoAction object into the flash file
flash.Add(action)
'instruct the flash object to show frame
flash.Add(New ShowFrame())</code></example>
    </member>
    <member name="M:Aspose.Flash.Actions.EndDrag.#ctor">
      <summary>
            Default constructor.
            </summary>
      <example>This example shows you how to use EndDrag constructor<code>[C#]

// define an action sequence
ArrayList pushArray = new ArrayList();
// use ArrayList.Add to push the elements to the list
//pushArray.Add("elements");
//add this array to push object
Push push = new Push(pushArray);

//create an action array
ArrayList actionArray = new ArrayList();
//add push object to action array
actionArray.Add(push);
actionArray.Add(new ActionRecord(ActionType.NamedObject));
//add appropriate action class object to the action array
actionArray.Add(new EndDrag());


//create a DoAction object and add actions list into it
DoAction action = new DoAction(actionArray);
//now add DoAction object into the flash file
flash.Add(action);
//instruct the flash object to show frame
flash.Add(new ShowFrame());</code><code>[Visual Basic]

' define an action sequence
Dim pushArray As New ArrayList()
' use ArrayList.Add to push the elements to the list
'pushArray.Add("elements");
'add this array to push object
Dim push As New Push(pushArray)

'create an action array
Dim actionArray As New ArrayList()
'add push object to action array
actionArray.Add(push)
actionArray.Add(New ActionRecord(ActionType.NamedObject))
'add appropriate action class object to the action array
actionArray.Add(New EndDrag())


'create a DoAction object and add actions list into it
Dim action As New DoAction(actionArray)
'now add DoAction object into the flash file
flash.Add(action)
'instruct the flash object to show frame
flash.Add(New ShowFrame())</code></example>
    </member>
    <member name="P:Aspose.Flash.Actions.EndDrag.Size">
      <summary>
            Returns the size of an action object in bytes.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.Enumerate">
      <summary>
            Represents an Enumerate action object.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.Enumerate.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Actions.Enumerate.Size">
      <summary>
            Returns the size of an action object in bytes.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.Enumerate2">
      <summary>
            Represents an Enumerate2 action object.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.Enumerate2.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Actions.Enumerate2.Size">
      <summary>
            Returns the size of an action object in bytes.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.Equals">
      <summary>
            Represents an Equals action object.
            </summary>
      <example>This example shows you how to use Equals class<code>[C#]

// define an action sequence
ArrayList pushArray = new ArrayList();
// use ArrayList.Add to push the elements to the list
//pushArray.Add("elements");
//add this array to push object
Push push = new Push(pushArray);

//create an action array
ArrayList actionArray = new ArrayList();
//add push object to action array
actionArray.Add(push);
actionArray.Add(new ActionRecord(ActionType.NamedObject));
//add appropriate action class object to the action array
actionArray.Add(new Equals());


//create a DoAction object and add actions list into it
DoAction action = new DoAction(actionArray);
//now add DoAction object into the flash file
flash.Add(action);
//instruct the flash object to show frame
flash.Add(new ShowFrame());</code><code>[Visual Basic]

' define an action sequence
Dim pushArray As New ArrayList()
' use ArrayList.Add to push the elements to the list
'pushArray.Add("elements");
'add this array to push object
Dim push As New Push(pushArray)

'create an action array
Dim actionArray As New ArrayList()
'add push object to action array
actionArray.Add(push)
actionArray.Add(New ActionRecord(ActionType.NamedObject))
'add appropriate action class object to the action array
actionArray.Add(New Equals())


'create a DoAction object and add actions list into it
Dim action As New DoAction(actionArray)
'now add DoAction object into the flash file
flash.Add(action)
'instruct the flash object to show frame
flash.Add(New ShowFrame())</code></example>
    </member>
    <member name="M:Aspose.Flash.Actions.Equals.#ctor">
      <summary>
            Default constructor.
            </summary>
      <example>This example shows you how to use Equals constructor<code>[C#]

// define an action sequence
ArrayList pushArray = new ArrayList();
// use ArrayList.Add to push the elements to the list
//pushArray.Add("elements");
//add this array to push object
Push push = new Push(pushArray);

//create an action array
ArrayList actionArray = new ArrayList();
//add push object to action array
actionArray.Add(push);
actionArray.Add(new ActionRecord(ActionType.NamedObject));
//add appropriate action class object to the action array
actionArray.Add(new Equals());


//create a DoAction object and add actions list into it
DoAction action = new DoAction(actionArray);
//now add DoAction object into the flash file
flash.Add(action);
//instruct the flash object to show frame
flash.Add(new ShowFrame());</code><code>[Visual Basic]

' define an action sequence
Dim pushArray As New ArrayList()
' use ArrayList.Add to push the elements to the list
'pushArray.Add("elements");
'add this array to push object
Dim push As New Push(pushArray)

'create an action array
Dim actionArray As New ArrayList()
'add push object to action array
actionArray.Add(push)
actionArray.Add(New ActionRecord(ActionType.NamedObject))
'add appropriate action class object to the action array
actionArray.Add(New Equals())


'create a DoAction object and add actions list into it
Dim action As New DoAction(actionArray)
'now add DoAction object into the flash file
flash.Add(action)
'instruct the flash object to show frame
flash.Add(New ShowFrame())</code></example>
    </member>
    <member name="P:Aspose.Flash.Actions.Equals.Size">
      <summary>
            Returns the size of an action object in bytes.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.Equals2">
      <summary>
            Represents an Equals2 action object.
            </summary>
      <example>This example shows you how to use Equals2 class<code>[C#]

// define an action sequence
ArrayList pushArray = new ArrayList();
// use ArrayList.Add to push the elements to the list
//pushArray.Add("elements");
//add this array to push object
Push push = new Push(pushArray);

//create an action array
ArrayList actionArray = new ArrayList();
//add push object to action array
actionArray.Add(push);
actionArray.Add(new ActionRecord(ActionType.NamedObject));
//add appropriate action class object to the action array
actionArray.Add(new Equals2());


//create a DoAction object and add actions list into it
DoAction action = new DoAction(actionArray);
//now add DoAction object into the flash file
flash.Add(action);
//instruct the flash object to show frame
flash.Add(new ShowFrame());</code><code>[Visual Basic]

' define an action sequence
Dim pushArray As New ArrayList()
' use ArrayList.Add to push the elements to the list
'pushArray.Add("elements");
'add this array to push object
Dim push As New Push(pushArray)

'create an action array
Dim actionArray As New ArrayList()
'add push object to action array
actionArray.Add(push)
actionArray.Add(New ActionRecord(ActionType.NamedObject))
'add appropriate action class object to the action array
actionArray.Add(New Equals2())


'create a DoAction object and add actions list into it
Dim action As New DoAction(actionArray)
'now add DoAction object into the flash file
flash.Add(action)
'instruct the flash object to show frame
flash.Add(New ShowFrame())</code></example>
    </member>
    <member name="M:Aspose.Flash.Actions.Equals2.#ctor">
      <summary>
            Default constructor.
            </summary>
      <example>This example shows you how to use Equals2 constructor<code>[C#]

// define an action sequence
ArrayList pushArray = new ArrayList();
// use ArrayList.Add to push the elements to the list
//pushArray.Add("elements");
//add this array to push object
Push push = new Push(pushArray);

//create an action array
ArrayList actionArray = new ArrayList();
//add push object to action array
actionArray.Add(push);
actionArray.Add(new ActionRecord(ActionType.NamedObject));
//add appropriate action class object to the action array
actionArray.Add(new Equals2());


//create a DoAction object and add actions list into it
DoAction action = new DoAction(actionArray);
//now add DoAction object into the flash file
flash.Add(action);
//instruct the flash object to show frame
flash.Add(new ShowFrame());</code><code>[Visual Basic]

' define an action sequence
Dim pushArray As New ArrayList()
' use ArrayList.Add to push the elements to the list
'pushArray.Add("elements");
'add this array to push object
Dim push As New Push(pushArray)

'create an action array
Dim actionArray As New ArrayList()
'add push object to action array
actionArray.Add(push)
actionArray.Add(New ActionRecord(ActionType.NamedObject))
'add appropriate action class object to the action array
actionArray.Add(New Equals2())


'create a DoAction object and add actions list into it
Dim action As New DoAction(actionArray)
'now add DoAction object into the flash file
flash.Add(action)
'instruct the flash object to show frame
flash.Add(New ShowFrame())</code></example>
    </member>
    <member name="P:Aspose.Flash.Actions.Equals2.Size">
      <summary>
            Returns the size of an action object in bytes.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.Extends">
      <summary>
            Represents an Extends action object.
            </summary>
      <example>This example shows you how to use Extends class<code>[C#]

// define an action sequence
ArrayList pushArray = new ArrayList();
// use ArrayList.Add to push the elements to the list
//pushArray.Add("elements");
//add this array to push object
Push push = new Push(pushArray);

//create an action array
ArrayList actionArray = new ArrayList();
//add push object to action array
actionArray.Add(push);
actionArray.Add(new ActionRecord(ActionType.NamedObject));
//add appropriate action class object to the action array
actionArray.Add(new Extends());


//create a DoAction object and add actions list into it
DoAction action = new DoAction(actionArray);
//now add DoAction object into the flash file
flash.Add(action);
//instruct the flash object to show frame
flash.Add(new ShowFrame());</code><code>[Visual Basic]

' define an action sequence
Dim pushArray As New ArrayList()
' use ArrayList.Add to push the elements to the list
'pushArray.Add("elements");
'add this array to push object
Dim push As New Push(pushArray)

'create an action array
Dim actionArray As New ArrayList()
'add push object to action array
actionArray.Add(push)
actionArray.Add(New ActionRecord(ActionType.NamedObject))
'add appropriate action class object to the action array
actionArray.Add(New Extends())


'create a DoAction object and add actions list into it
Dim action As New DoAction(actionArray)
'now add DoAction object into the flash file
flash.Add(action)
'instruct the flash object to show frame
flash.Add(New ShowFrame())</code></example>
    </member>
    <member name="M:Aspose.Flash.Actions.Extends.#ctor">
      <summary>
            Default constructor.
            </summary>
      <example>This example shows you how to use Extends constructor<code>[C#]

// define an action sequence
ArrayList pushArray = new ArrayList();
// use ArrayList.Add to push the elements to the list
//pushArray.Add("elements");
//add this array to push object
Push push = new Push(pushArray);

//create an action array
ArrayList actionArray = new ArrayList();
//add push object to action array
actionArray.Add(push);
actionArray.Add(new ActionRecord(ActionType.NamedObject));
//add appropriate action class object to the action array
actionArray.Add(new Extends());


//create a DoAction object and add actions list into it
DoAction action = new DoAction(actionArray);
//now add DoAction object into the flash file
flash.Add(action);
//instruct the flash object to show frame
flash.Add(new ShowFrame());</code><code>[Visual Basic]

' define an action sequence
Dim pushArray As New ArrayList()
' use ArrayList.Add to push the elements to the list
'pushArray.Add("elements");
'add this array to push object
Dim push As New Push(pushArray)

'create an action array
Dim actionArray As New ArrayList()
'add push object to action array
actionArray.Add(push)
actionArray.Add(New ActionRecord(ActionType.NamedObject))
'add appropriate action class object to the action array
actionArray.Add(New Extends())


'create a DoAction object and add actions list into it
Dim action As New DoAction(actionArray)
'now add DoAction object into the flash file
flash.Add(action)
'instruct the flash object to show frame
flash.Add(New ShowFrame())</code></example>
    </member>
    <member name="P:Aspose.Flash.Actions.Extends.Size">
      <summary>
            Returns the size of an action object in bytes.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.GetMember">
      <summary>
            Represents a GetMember action object.
            </summary>
      <example>This example shows you how to use GetMember class<code>[C#]

// define an action sequence
ArrayList pushArray = new ArrayList();
// use ArrayList.Add to push the elements to the list
//pushArray.Add("elements");
//add this array to push object
Push push = new Push(pushArray);

//create an action array
ArrayList actionArray = new ArrayList();
//add push object to action array
actionArray.Add(push);
actionArray.Add(new ActionRecord(ActionType.NamedObject));
//add appropriate action class object to the action array
actionArray.Add(new GetMember());


//create a DoAction object and add actions list into it
DoAction action = new DoAction(actionArray);
//now add DoAction object into the flash file
flash.Add(action);
//instruct the flash object to show frame
flash.Add(new ShowFrame());</code><code>[Visual Basic]

' define an action sequence
Dim pushArray As New ArrayList()
' use ArrayList.Add to push the elements to the list
'pushArray.Add("elements");
'add this array to push object
Dim push As New Push(pushArray)

'create an action array
Dim actionArray As New ArrayList()
'add push object to action array
actionArray.Add(push)
actionArray.Add(New ActionRecord(ActionType.NamedObject))
'add appropriate action class object to the action array
actionArray.Add(New GetMember())


'create a DoAction object and add actions list into it
Dim action As New DoAction(actionArray)
'now add DoAction object into the flash file
flash.Add(action)
'instruct the flash object to show frame
flash.Add(New ShowFrame())</code></example>
    </member>
    <member name="M:Aspose.Flash.Actions.GetMember.#ctor">
      <summary>
            Default constructor.
            </summary>
      <example>This example shows you how to use GetMember constructor<code>[C#]

// define an action sequence
ArrayList pushArray = new ArrayList();
// use ArrayList.Add to push the elements to the list
//pushArray.Add("elements");
//add this array to push object
Push push = new Push(pushArray);

//create an action array
ArrayList actionArray = new ArrayList();
//add push object to action array
actionArray.Add(push);
actionArray.Add(new ActionRecord(ActionType.NamedObject));
//add appropriate action class object to the action array
actionArray.Add(new GetMember());


//create a DoAction object and add actions list into it
DoAction action = new DoAction(actionArray);
//now add DoAction object into the flash file
flash.Add(action);
//instruct the flash object to show frame
flash.Add(new ShowFrame());</code><code>[Visual Basic]

' define an action sequence
Dim pushArray As New ArrayList()
' use ArrayList.Add to push the elements to the list
'pushArray.Add("elements");
'add this array to push object
Dim push As New Push(pushArray)

'create an action array
Dim actionArray As New ArrayList()
'add push object to action array
actionArray.Add(push)
actionArray.Add(New ActionRecord(ActionType.NamedObject))
'add appropriate action class object to the action array
actionArray.Add(New GetMember())


'create a DoAction object and add actions list into it
Dim action As New DoAction(actionArray)
'now add DoAction object into the flash file
flash.Add(action)
'instruct the flash object to show frame
flash.Add(New ShowFrame())</code></example>
    </member>
    <member name="P:Aspose.Flash.Actions.GetMember.Size">
      <summary>
            Returns the size of an action object in bytes.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.GetProperty">
      <summary>
            Represents a GetProperty action object.
            </summary>
      <example>This example shows you how to use GetProperty class<code>[C#]

// define an action sequence
ArrayList pushArray = new ArrayList();
// use ArrayList.Add to push the elements to the list
//pushArray.Add("elements");
//add this array to push object
Push push = new Push(pushArray);

//create an action array
ArrayList actionArray = new ArrayList();
//add push object to action array
actionArray.Add(push);
actionArray.Add(new ActionRecord(ActionType.NamedObject));
//add appropriate action class object to the action array
actionArray.Add(new GetProperty());


//create a DoAction object and add actions list into it
DoAction action = new DoAction(actionArray);
//now add DoAction object into the flash file
flash.Add(action);
//instruct the flash object to show frame
flash.Add(new ShowFrame());</code><code>[Visual Basic]

' define an action sequence
Dim pushArray As New ArrayList()
' use ArrayList.Add to push the elements to the list
'pushArray.Add("elements");
'add this array to push object
Dim push As New Push(pushArray)

'create an action array
Dim actionArray As New ArrayList()
'add push object to action array
actionArray.Add(push)
actionArray.Add(New ActionRecord(ActionType.NamedObject))
'add appropriate action class object to the action array
actionArray.Add(New GetProperty())


'create a DoAction object and add actions list into it
Dim action As New DoAction(actionArray)
'now add DoAction object into the flash file
flash.Add(action)
'instruct the flash object to show frame
flash.Add(New ShowFrame())</code></example>
    </member>
    <member name="M:Aspose.Flash.Actions.GetProperty.#ctor">
      <summary>
            Default constructor.
            </summary>
      <example>This example shows you how to use GetProperty constructor<code>[C#]

// define an action sequence
ArrayList pushArray = new ArrayList();
// use ArrayList.Add to push the elements to the list
//pushArray.Add("elements");
//add this array to push object
Push push = new Push(pushArray);

//create an action array
ArrayList actionArray = new ArrayList();
//add push object to action array
actionArray.Add(push);
actionArray.Add(new ActionRecord(ActionType.NamedObject));
//add appropriate action class object to the action array
actionArray.Add(new GetProperty());


//create a DoAction object and add actions list into it
DoAction action = new DoAction(actionArray);
//now add DoAction object into the flash file
flash.Add(action);
//instruct the flash object to show frame
flash.Add(new ShowFrame());</code><code>[Visual Basic]

' define an action sequence
Dim pushArray As New ArrayList()
' use ArrayList.Add to push the elements to the list
'pushArray.Add("elements");
'add this array to push object
Dim push As New Push(pushArray)

'create an action array
Dim actionArray As New ArrayList()
'add push object to action array
actionArray.Add(push)
actionArray.Add(New ActionRecord(ActionType.NamedObject))
'add appropriate action class object to the action array
actionArray.Add(New GetProperty())


'create a DoAction object and add actions list into it
Dim action As New DoAction(actionArray)
'now add DoAction object into the flash file
flash.Add(action)
'instruct the flash object to show frame
flash.Add(New ShowFrame())</code></example>
    </member>
    <member name="P:Aspose.Flash.Actions.GetProperty.Size">
      <summary>
            Returns the size of an action object in bytes.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.GetTime">
      <summary>
            Represents a GetTime action object.
            </summary>
      <example>This example shows you how to use GetTime class<code>[C#]

// define an action sequence
ArrayList pushArray = new ArrayList();
// use ArrayList.Add to push the elements to the list
//pushArray.Add("elements");
//add this array to push object
Push push = new Push(pushArray);

//create an action array
ArrayList actionArray = new ArrayList();
//add push object to action array
actionArray.Add(push);
actionArray.Add(new ActionRecord(ActionType.NamedObject));
//add appropriate action class object to the action array
actionArray.Add(new GetTime());


//create a DoAction object and add actions list into it
DoAction action = new DoAction(actionArray);
//now add DoAction object into the flash file
flash.Add(action);
//instruct the flash object to show frame
flash.Add(new ShowFrame());</code><code>[Visual Basic]

' define an action sequence
Dim pushArray As New ArrayList()
' use ArrayList.Add to push the elements to the list
'pushArray.Add("elements");
'add this array to push object
Dim push As New Push(pushArray)

'create an action array
Dim actionArray As New ArrayList()
'add push object to action array
actionArray.Add(push)
actionArray.Add(New ActionRecord(ActionType.NamedObject))
'add appropriate action class object to the action array
actionArray.Add(New GetTime())


'create a DoAction object and add actions list into it
Dim action As New DoAction(actionArray)
'now add DoAction object into the flash file
flash.Add(action)
'instruct the flash object to show frame
flash.Add(New ShowFrame())</code></example>
    </member>
    <member name="M:Aspose.Flash.Actions.GetTime.#ctor">
      <summary>
            Default constructor.
            </summary>
      <example>This example shows you how to use GetTime constructor<code>[C#]

// define an action sequence
ArrayList pushArray = new ArrayList();
// use ArrayList.Add to push the elements to the list
//pushArray.Add("elements");
//add this array to push object
Push push = new Push(pushArray);

//create an action array
ArrayList actionArray = new ArrayList();
//add push object to action array
actionArray.Add(push);
actionArray.Add(new ActionRecord(ActionType.NamedObject));
//add appropriate action class object to the action array
actionArray.Add(new GetTime());


//create a DoAction object and add actions list into it
DoAction action = new DoAction(actionArray);
//now add DoAction object into the flash file
flash.Add(action);
//instruct the flash object to show frame
flash.Add(new ShowFrame());</code><code>[Visual Basic]

' define an action sequence
Dim pushArray As New ArrayList()
' use ArrayList.Add to push the elements to the list
'pushArray.Add("elements");
'add this array to push object
Dim push As New Push(pushArray)

'create an action array
Dim actionArray As New ArrayList()
'add push object to action array
actionArray.Add(push)
actionArray.Add(New ActionRecord(ActionType.NamedObject))
'add appropriate action class object to the action array
actionArray.Add(New GetTime())


'create a DoAction object and add actions list into it
Dim action As New DoAction(actionArray)
'now add DoAction object into the flash file
flash.Add(action)
'instruct the flash object to show frame
flash.Add(New ShowFrame())</code></example>
    </member>
    <member name="P:Aspose.Flash.Actions.GetTime.Size">
      <summary>
            Returns the size of an action object in bytes.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.GetUrl">
      <summary>
        <p>GetUrl is used to instruct a player to get the URL specified by UrlString.</p>
        <p>The URL can be of any type, including an HTML file, an image or another SWF movie.
            If the movie is playing in a browser, the URL will be displayed in the frame
            specified by TargetString.</p>
      </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.GetUrl.#ctor(System.String,System.String)">
      <summary>
            GetUrl constructor
            </summary>
      <param name="urlString">target url string</param>
      <param name="targetString">target string</param>
    </member>
    <member name="M:Aspose.Flash.Actions.GetUrl.#ctor(System.String)">
      <summary>
            GetUrl constructor
            </summary>
      <param name="urlString">target url string</param>
    </member>
    <member name="P:Aspose.Flash.Actions.GetUrl.UrlString">
      <summary>
            Returns or sets the target URL string.
            Read/write <see cref="T:System.String" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Actions.GetUrl.TargetString">
      <summary>
            Returns or sets the target string.
            Read/write <see cref="T:System.String" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Actions.GetUrl.Size">
      <summary>
            Returns the size of an action object in bytes.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.GetUrl2">
      <summary>
            GetUrl2 class provides loading a web page or movie clip or load or submit 
            variable values to/from a server.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Actions.GetUrl2.MovieToLevel">
      <summary>
            Load a movie without submitting the movie variables.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Actions.GetUrl2.MovieToLevelWithGet">
      <summary>
            Load a movie submitting the movie variables using HTTP GET.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Actions.GetUrl2.MovieToLevelWithPost">
      <summary>
            Load a movie submitting the movie variables using HTTP POST.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Actions.GetUrl2.MovieToTarget">
      <summary>
            Load a movie or web page without submitting the movie variables.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Actions.GetUrl2.MovieToTargetWithGet">
      <summary>
            Load a movie or web page submitting the movie variables using HTTP GET.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Actions.GetUrl2.MovieToTargetWithPost">
      <summary>
            Load a movie or web page submitting the movie variables using HTTP POST.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Actions.GetUrl2.VariablesToLevel">
      <summary>
            Load variables without submitting the movie variables.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Actions.GetUrl2.VariablesToLevelWithGet">
      <summary>
            Load variables submitting the movie variables using HTTP GET.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Actions.GetUrl2.VariablesToLevelWithPost">
      <summary>
            Load variables submitting the movie variables using HTTP POST. 
            </summary>
    </member>
    <member name="F:Aspose.Flash.Actions.GetUrl2.VariablesToTarget">
      <summary>
            Load variables without submitting the movie variables.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Actions.GetUrl2.VariablesToTargetWithGet">
      <summary>
            Load variables submitting the movie variables using HTTP GET.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Actions.GetUrl2.VariablesToTargetWithPost">
      <summary>
            Load variables submitting the movie variables using HTTP POST.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.GetUrl2.#ctor(System.Int32)">
      <summary>
            GetUrl2 constructor
            </summary>
      <param name="type">type of request</param>
    </member>
    <member name="P:Aspose.Flash.Actions.GetUrl2.SendVarsMethod">
      <summary>
            Returns or sets the request type.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Actions.GetUrl2.Size">
      <summary>
            Returns the size of an action object in bytes.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.GetVariable">
      <summary>
            Represents a GetVariable action object.
            </summary>
      <example>This example shows you how to use GetVariable class<code>[C#]

// define an action sequence
ArrayList pushArray = new ArrayList();
// use ArrayList.Add to push the elements to the list
//pushArray.Add("elements");
//add this array to push object
Push push = new Push(pushArray);

//create an action array
ArrayList actionArray = new ArrayList();
//add push object to action array
actionArray.Add(push);
actionArray.Add(new ActionRecord(ActionType.NamedObject));
//add appropriate action class object to the action array
actionArray.Add(new GetVariable());


//create a DoAction object and add actions list into it
DoAction action = new DoAction(actionArray);
//now add DoAction object into the flash file
flash.Add(action);
//instruct the flash object to show frame
flash.Add(new ShowFrame());</code><code>[Visual Basic]

' define an action sequence
Dim pushArray As New ArrayList()
' use ArrayList.Add to push the elements to the list
'pushArray.Add("elements");
'add this array to push object
Dim push As New Push(pushArray)

'create an action array
Dim actionArray As New ArrayList()
'add push object to action array
actionArray.Add(push)
actionArray.Add(New ActionRecord(ActionType.NamedObject))
'add appropriate action class object to the action array
actionArray.Add(New GetVariable())


'create a DoAction object and add actions list into it
Dim action As New DoAction(actionArray)
'now add DoAction object into the flash file
flash.Add(action)
'instruct the flash object to show frame
flash.Add(New ShowFrame())</code></example>
    </member>
    <member name="M:Aspose.Flash.Actions.GetVariable.#ctor">
      <summary>
            Default constructor.
            </summary>
      <example>This example shows you how to use GetVariable constructor<code>[C#]

// define an action sequence
ArrayList pushArray = new ArrayList();
// use ArrayList.Add to push the elements to the list
//pushArray.Add("elements");
//add this array to push object
Push push = new Push(pushArray);

//create an action array
ArrayList actionArray = new ArrayList();
//add push object to action array
actionArray.Add(push);
actionArray.Add(new ActionRecord(ActionType.NamedObject));
//add appropriate action class object to the action array
actionArray.Add(new GetVariable());


//create a DoAction object and add actions list into it
DoAction action = new DoAction(actionArray);
//now add DoAction object into the flash file
flash.Add(action);
//instruct the flash object to show frame
flash.Add(new ShowFrame());</code><code>[Visual Basic]

' define an action sequence
Dim pushArray As New ArrayList()
' use ArrayList.Add to push the elements to the list
'pushArray.Add("elements");
'add this array to push object
Dim push As New Push(pushArray)

'create an action array
Dim actionArray As New ArrayList()
'add push object to action array
actionArray.Add(push)
actionArray.Add(New ActionRecord(ActionType.NamedObject))
'add appropriate action class object to the action array
actionArray.Add(New GetVariable())


'create a DoAction object and add actions list into it
Dim action As New DoAction(actionArray)
'now add DoAction object into the flash file
flash.Add(action)
'instruct the flash object to show frame
flash.Add(New ShowFrame())</code></example>
    </member>
    <member name="P:Aspose.Flash.Actions.GetVariable.Size">
      <summary>
            Returns the size of an action object in bytes.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.GotoFrame">
      <summary>
            The GotoFrame action instructs the player to go to the specified frame in the current movie.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.GotoFrame.#ctor(System.Int32)">
      <summary>
            GotoFrame constructor.
            </summary>
      <param name="number">frame index</param>
    </member>
    <member name="P:Aspose.Flash.Actions.GotoFrame.Frame">
      <summary>
            Returns or sets the frame index.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Actions.GotoFrame.Size">
      <summary>
            Returns the size of an action object in bytes.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.GotoFrame2">
      <summary>
        <p>GotoFrame2 class  is used to instruct the player to go to the named or
            numbered frame in the current movie's main time-line.</p>
        <p>It extends the functionality provided by the GotoFrame action by allowing 
            the name of a frame, previously assigned using the FrameLabel object, to be specified.</p>
      </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.GotoFrame2.#ctor(System.Boolean)">
      <summary>
            GotoFrame2 constructor
            </summary>
      <param name="isPlayFrame">true if the player should being playing the movie at
            the specified frame. false if the player should stop playing the movie.</param>
    </member>
    <member name="M:Aspose.Flash.Actions.GotoFrame2.#ctor(System.Int32,System.Boolean)">
      <summary>
            GotoFrame2 constructor
            </summary>
      <param name="offset">number to be added to frame </param>
      <param name="isPlayFrame">true if the player should being playing the movie at the specified frame. 
            false if the player should stop playing the movie.</param>
    </member>
    <member name="P:Aspose.Flash.Actions.GotoFrame2.SceneBias">
      <summary>
            Returns or sets the number to be added to frame determined by stack argument.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Actions.GotoFrame2.PlayFlag">
      <summary>
            Determines whether the play should continue play (or stop) after Goto.
            Read/write <see cref="T:System.Boolean" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Actions.GotoFrame2.Size">
      <summary>
            Returns the size of an action object in bytes.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.GotoLabel">
      <summary>
            The GotoLabel class instructs the player to go to frame associated with the specified label.
            A label can be attached to a frame with the FrameLabel class.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.GotoLabel.#ctor(System.String)">
      <summary>
            GotoLabel constructor
            </summary>
      <param name="label">frame label</param>
    </member>
    <member name="P:Aspose.Flash.Actions.GotoLabel.Label">
      <summary>
            Returns or sets the frame label.
            Read/write <see cref="T:System.String" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Actions.GotoLabel.Size">
      <summary>
            Returns the size of an action object in bytes.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.Greater">
      <summary>
            Represents a Greater action object.
            </summary>
      <example>This example shows you how to use Greater class<code>[C#]

// define an action sequence
ArrayList pushArray = new ArrayList();
// use ArrayList.Add to push the elements to the list
//pushArray.Add("elements");
//add this array to push object
Push push = new Push(pushArray);

//create an action array
ArrayList actionArray = new ArrayList();
//add push object to action array
actionArray.Add(push);
actionArray.Add(new ActionRecord(ActionType.NamedObject));
//add appropriate action class object to the action array
actionArray.Add(new Greater());


//create a DoAction object and add actions list into it
DoAction action = new DoAction(actionArray);
//now add DoAction object into the flash file
flash.Add(action);
//instruct the flash object to show frame
flash.Add(new ShowFrame());</code><code>[Visual Basic]

' define an action sequence
Dim pushArray As New ArrayList()
' use ArrayList.Add to push the elements to the list
'pushArray.Add("elements");
'add this array to push object
Dim push As New Push(pushArray)

'create an action array
Dim actionArray As New ArrayList()
'add push object to action array
actionArray.Add(push)
actionArray.Add(New ActionRecord(ActionType.NamedObject))
'add appropriate action class object to the action array
actionArray.Add(New Greater())


'create a DoAction object and add actions list into it
Dim action As New DoAction(actionArray)
'now add DoAction object into the flash file
flash.Add(action)
'instruct the flash object to show frame
flash.Add(New ShowFrame())</code></example>
    </member>
    <member name="M:Aspose.Flash.Actions.Greater.#ctor">
      <summary>
            Default constructor.
            </summary>
      <example>This example shows you how to use Greater constructor<code>[C#]

// define an action sequence
ArrayList pushArray = new ArrayList();
// use ArrayList.Add to push the elements to the list
//pushArray.Add("elements");
//add this array to push object
Push push = new Push(pushArray);

//create an action array
ArrayList actionArray = new ArrayList();
//add push object to action array
actionArray.Add(push);
actionArray.Add(new ActionRecord(ActionType.NamedObject));
//add appropriate action class object to the action array
actionArray.Add(new Greater());


//create a DoAction object and add actions list into it
DoAction action = new DoAction(actionArray);
//now add DoAction object into the flash file
flash.Add(action);
//instruct the flash object to show frame
flash.Add(new ShowFrame());</code><code>[Visual Basic]

' define an action sequence
Dim pushArray As New ArrayList()
' use ArrayList.Add to push the elements to the list
'pushArray.Add("elements");
'add this array to push object
Dim push As New Push(pushArray)

'create an action array
Dim actionArray As New ArrayList()
'add push object to action array
actionArray.Add(push)
actionArray.Add(New ActionRecord(ActionType.NamedObject))
'add appropriate action class object to the action array
actionArray.Add(New Greater())


'create a DoAction object and add actions list into it
Dim action As New DoAction(actionArray)
'now add DoAction object into the flash file
flash.Add(action)
'instruct the flash object to show frame
flash.Add(New ShowFrame())</code></example>
    </member>
    <member name="P:Aspose.Flash.Actions.Greater.Size">
      <summary>
            Returns the size of an action object in bytes.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.If">
      <summary>
            If class is used to perform a conditional branch to control
            the actions executed by the Flash Player.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.If.#ctor(System.Int32)">
      <summary>
            If constructor
            </summary>
      <param name="offset">the number of bytes to add to the instruction pointer
            if the value popped off the stack evaluates to true.</param>
    </member>
    <member name="P:Aspose.Flash.Actions.If.BranchOffset">
      <summary>
            Returns or sets the offset that will be added to the instruction pointer
            if the value at the top of the stack evaluates to true (non-zero).
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Actions.If.Size">
      <summary>
            Returns the size of an action object in bytes.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.ImplemetsOp">
      <summary>
            Represents an ImplementsOp action object.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.ImplemetsOp.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Actions.ImplemetsOp.Size">
      <summary>
            Returns the size of an action object in bytes.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.Increment">
      <summary>
            Represents an Increment action object.
            </summary>
      <example>This example shows you how to use Increment class<code>[C#]

// define an action sequence
ArrayList pushArray = new ArrayList();
// use ArrayList.Add to push the elements to the list
//pushArray.Add("elements");
//add this array to push object
Push push = new Push(pushArray);

//create an action array
ArrayList actionArray = new ArrayList();
//add push object to action array
actionArray.Add(push);
actionArray.Add(new ActionRecord(ActionType.NamedObject));
//add appropriate action class object to the action array
actionArray.Add(new Increment());


//create a DoAction object and add actions list into it
DoAction action = new DoAction(actionArray);
//now add DoAction object into the flash file
flash.Add(action);
//instruct the flash object to show frame
flash.Add(new ShowFrame());</code><code>[Visual Basic]

' define an action sequence
Dim pushArray As New ArrayList()
' use ArrayList.Add to push the elements to the list
'pushArray.Add("elements");
'add this array to push object
Dim push As New Push(pushArray)

'create an action array
Dim actionArray As New ArrayList()
'add push object to action array
actionArray.Add(push)
actionArray.Add(New ActionRecord(ActionType.NamedObject))
'add appropriate action class object to the action array
actionArray.Add(New Increment())


'create a DoAction object and add actions list into it
Dim action As New DoAction(actionArray)
'now add DoAction object into the flash file
flash.Add(action)
'instruct the flash object to show frame
flash.Add(New ShowFrame())</code></example>
    </member>
    <member name="M:Aspose.Flash.Actions.Increment.#ctor">
      <summary>
            Default constructor.
            </summary>
      <example>This example shows you how to use Increment constructor<code>[C#]

// define an action sequence
ArrayList pushArray = new ArrayList();
// use ArrayList.Add to push the elements to the list
//pushArray.Add("elements");
//add this array to push object
Push push = new Push(pushArray);

//create an action array
ArrayList actionArray = new ArrayList();
//add push object to action array
actionArray.Add(push);
actionArray.Add(new ActionRecord(ActionType.NamedObject));
//add appropriate action class object to the action array
actionArray.Add(new Increment());


//create a DoAction object and add actions list into it
DoAction action = new DoAction(actionArray);
//now add DoAction object into the flash file
flash.Add(action);
//instruct the flash object to show frame
flash.Add(new ShowFrame());</code><code>[Visual Basic]

' define an action sequence
Dim pushArray As New ArrayList()
' use ArrayList.Add to push the elements to the list
'pushArray.Add("elements");
'add this array to push object
Dim push As New Push(pushArray)

'create an action array
Dim actionArray As New ArrayList()
'add push object to action array
actionArray.Add(push)
actionArray.Add(New ActionRecord(ActionType.NamedObject))
'add appropriate action class object to the action array
actionArray.Add(New Increment())


'create a DoAction object and add actions list into it
Dim action As New DoAction(actionArray)
'now add DoAction object into the flash file
flash.Add(action)
'instruct the flash object to show frame
flash.Add(New ShowFrame())</code></example>
    </member>
    <member name="P:Aspose.Flash.Actions.Increment.Size">
      <summary>
            Returns the size of an action object in bytes.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.Initialize">
      <summary>
            Initialize class specifies a sequence of actions that are executed
            to initialise a movie clip before it is displayed.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.Initialize.#ctor(System.Int32,System.Collections.ArrayList)">
      <summary>
            Initialize constructor.
            </summary>
      <param name="id">identifier of the movie clip to initialize</param>
      <param name="array">the array of action objects.</param>
    </member>
    <member name="M:Aspose.Flash.Actions.Initialize.#ctor(System.Int32)">
      <summary>
            Initialize constructor.
            </summary>
      <param name="id">Movie clip Id.</param>
    </member>
    <member name="M:Aspose.Flash.Actions.Initialize.Add(Aspose.Flash.Actions.ActionObject)">
      <summary>
            Add the action object to the array of actions.
            </summary>
      <param name="action">an object belonging to a class derived from ActionObject.</param>
    </member>
    <member name="P:Aspose.Flash.Actions.Initialize.Identifier">
      <summary>
            Returns or sets the identifier of a movie clip that will be initialized.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Actions.Initialize.Actions">
      <summary>
            Returns or sets the array of actions that are used to initialize the movie clip.
            Read/write <see cref="T:System.Collections.ArrayList" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.InitObject">
      <summary>
            Represents an InitObject action object.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.InitObject.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Actions.InitObject.Size">
      <summary>
            Returns the size of an action object in bytes.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.InstanceOf">
      <summary>
            Represents an InstanceOf action object.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.InstanceOf.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Actions.InstanceOf.Size">
      <summary>
            Returns the size of an action object in bytes.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.Jump">
      <summary>
            Jump class performs an unconditional branch
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.Jump.#ctor(System.Int32)">
      <summary>
            Jump constructor with the specified offset. The offset must be in the range -32768..32767.
            </summary>
      <param name="offset">the number of bytes to add to the instruction pointer.</param>
    </member>
    <member name="P:Aspose.Flash.Actions.Jump.BranchOffset">
      <summary>
            Returns or sets the offset that will be added to the instruction pointer.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Actions.Jump.Size">
      <summary>
            Returns the size of an action object in bytes.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.Less">
      <summary>
            Represents a Less action object.
            </summary>
      <example>This example shows you how to use Less class<code>[C#]

// define an action sequence
ArrayList pushArray = new ArrayList();
// use ArrayList.Add to push the elements to the list
//pushArray.Add("elements");
//add this array to push object
Push push = new Push(pushArray);

//create an action array
ArrayList actionArray = new ArrayList();
//add push object to action array
actionArray.Add(push);
actionArray.Add(new ActionRecord(ActionType.NamedObject));
//add appropriate action class object to the action array
actionArray.Add(new Less());


//create a DoAction object and add actions list into it
DoAction action = new DoAction(actionArray);
//now add DoAction object into the flash file
flash.Add(action);
//instruct the flash object to show frame
flash.Add(new ShowFrame());</code><code>[Visual Basic]

' define an action sequence
Dim pushArray As New ArrayList()
' use ArrayList.Add to push the elements to the list
'pushArray.Add("elements");
'add this array to push object
Dim push As New Push(pushArray)

'create an action array
Dim actionArray As New ArrayList()
'add push object to action array
actionArray.Add(push)
actionArray.Add(New ActionRecord(ActionType.NamedObject))
'add appropriate action class object to the action array
actionArray.Add(New Less())


'create a DoAction object and add actions list into it
Dim action As New DoAction(actionArray)
'now add DoAction object into the flash file
flash.Add(action)
'instruct the flash object to show frame
flash.Add(New ShowFrame())</code></example>
    </member>
    <member name="M:Aspose.Flash.Actions.Less.#ctor">
      <summary>
            Default constructor.
            </summary>
      <example>This example shows you how to use Less constructor<code>[Visual Basic]

' define an action sequence
Dim pushArray As New ArrayList()
' use ArrayList.Add to push the elements to the list
'pushArray.Add("elements");
'add this array to push object
Dim push As New Push(pushArray)

'create an action array
Dim actionArray As New ArrayList()
'add push object to action array
actionArray.Add(push)
actionArray.Add(New ActionRecord(ActionType.NamedObject))
'add appropriate action class object to the action array
actionArray.Add(New Less())


'create a DoAction object and add actions list into it
Dim action As New DoAction(actionArray)
'now add DoAction object into the flash file
flash.Add(action)
'instruct the flash object to show frame
flash.Add(New ShowFrame())</code></example>
      <example>This example shows you how to use Less() constructor<code>[C#]

// define an action sequence
ArrayList pushArray = new ArrayList();
// use ArrayList.Add to push the elements to the list
//pushArray.Add("elements");
//add this array to push object
Push push = new Push(pushArray);

//create an action array
ArrayList actionArray = new ArrayList();
//add push object to action array
actionArray.Add(push);
actionArray.Add(new ActionRecord(ActionType.NamedObject));
//add appropriate action class object to the action array
actionArray.Add(new Less());


//create a DoAction object and add actions list into it
DoAction action = new DoAction(actionArray);
//now add DoAction object into the flash file
flash.Add(action);
//instruct the flash object to show frame
flash.Add(new ShowFrame());</code></example>
    </member>
    <member name="P:Aspose.Flash.Actions.Less.Size">
      <summary>
            Returns the size of an action object in bytes.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.Less2">
      <summary>
            Represents a Less2 action object.
            </summary>
      <example>This example shows you how to use Less2 class<code>[C#]

// define an action sequence
ArrayList pushArray = new ArrayList();
// use ArrayList.Add to push the elements to the list
//pushArray.Add("elements");
//add this array to push object
Push push = new Push(pushArray);

//create an action array
ArrayList actionArray = new ArrayList();
//add push object to action array
actionArray.Add(push);
actionArray.Add(new ActionRecord(ActionType.NamedObject));
//add appropriate action class object to the action array
actionArray.Add(new Less2());


//create a DoAction object and add actions list into it
DoAction action = new DoAction(actionArray);
//now add DoAction object into the flash file
flash.Add(action);
//instruct the flash object to show frame
flash.Add(new ShowFrame());</code><code>[Visual Basic]

' define an action sequence
Dim pushArray As New ArrayList()
' use ArrayList.Add to push the elements to the list
'pushArray.Add("elements");
'add this array to push object
Dim push As New Push(pushArray)

'create an action array
Dim actionArray As New ArrayList()
'add push object to action array
actionArray.Add(push)
actionArray.Add(New ActionRecord(ActionType.NamedObject))
'add appropriate action class object to the action array
actionArray.Add(New Less2())


'create a DoAction object and add actions list into it
Dim action As New DoAction(actionArray)
'now add DoAction object into the flash file
flash.Add(action)
'instruct the flash object to show frame
flash.Add(New ShowFrame())</code></example>
    </member>
    <member name="M:Aspose.Flash.Actions.Less2.#ctor">
      <summary>
            Default constructor.
            </summary>
      <example>This example shows you how to use Less2 constructor<code>[Visual Basic]

' define an action sequence
Dim pushArray As New ArrayList()
' use ArrayList.Add to push the elements to the list
'pushArray.Add("elements");
'add this array to push object
Dim push As New Push(pushArray)

'create an action array
Dim actionArray As New ArrayList()
'add push object to action array
actionArray.Add(push)
actionArray.Add(New ActionRecord(ActionType.NamedObject))
'add appropriate action class object to the action array
actionArray.Add(New Less2())


'create a DoAction object and add actions list into it
Dim action As New DoAction(actionArray)
'now add DoAction object into the flash file
flash.Add(action)
'instruct the flash object to show frame
flash.Add(New ShowFrame())</code></example>
      <example>This example shows you how to use Less2() constructor<code>[C#]

// define an action sequence
ArrayList pushArray = new ArrayList();
// use ArrayList.Add to push the elements to the list
//pushArray.Add("elements");
//add this array to push object
Push push = new Push(pushArray);

//create an action array
ArrayList actionArray = new ArrayList();
//add push object to action array
actionArray.Add(push);
actionArray.Add(new ActionRecord(ActionType.NamedObject));
//add appropriate action class object to the action array
actionArray.Add(new Less2());


//create a DoAction object and add actions list into it
DoAction action = new DoAction(actionArray);
//now add DoAction object into the flash file
flash.Add(action);
//instruct the flash object to show frame
flash.Add(new ShowFrame());</code></example>
    </member>
    <member name="P:Aspose.Flash.Actions.Less2.Size">
      <summary>
            Returns the size of an action object in bytes.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.MBAsciiToChar">
      <summary>
            Represents an MBAsciiToChar action object.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.MBAsciiToChar.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Actions.MBAsciiToChar.Size">
      <summary>
            Returns the size of an action object in bytes.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.MBCharToAscii">
      <summary>
            Represents an MBCharToAscii action object.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.MBCharToAscii.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Actions.MBCharToAscii.Size">
      <summary>
            Returns the size of an action object in bytes.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.MBStringExtract">
      <summary>
            Represents an MBStringExtract action object.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.MBStringExtract.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Actions.MBStringExtract.Size">
      <summary>
            Returns the size of an action object in bytes.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.MBStringLength">
      <summary>
            Represents an MBStringLength action object.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.MBStringLength.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Actions.MBStringLength.Size">
      <summary>
            Returns the size of an action object in bytes.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.Modulo">
      <summary>
            Represents a Modulo action object.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.Modulo.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Actions.Modulo.Size">
      <summary>
            Returns the size of an action object in bytes.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.Multiply">
      <summary>
            Represents a Multiply action object.
            </summary>
      <example>This example shows you how to use Multiply class<code>[C#]

// define an action sequence
ArrayList pushArray = new ArrayList();
// use ArrayList.Add to push the elements to the list
//pushArray.Add("elements");
//add this array to push object
Push push = new Push(pushArray);

//create an action array
ArrayList actionArray = new ArrayList();
//add push object to action array
actionArray.Add(push);
actionArray.Add(new ActionRecord(ActionType.NamedObject));
//add appropriate action class object to the action array
actionArray.Add(new Multiply());


//create a DoAction object and add actions list into it
DoAction action = new DoAction(actionArray);
//now add DoAction object into the flash file
flash.Add(action);
//instruct the flash object to show frame
flash.Add(new ShowFrame());</code><code>[Visual Basic]

' define an action sequence
Dim pushArray As New ArrayList()
' use ArrayList.Add to push the elements to the list
'pushArray.Add("elements");
'add this array to push object
Dim push As New Push(pushArray)

'create an action array
Dim actionArray As New ArrayList()
'add push object to action array
actionArray.Add(push)
actionArray.Add(New ActionRecord(ActionType.NamedObject))
'add appropriate action class object to the action array
actionArray.Add(New Multiply())


'create a DoAction object and add actions list into it
Dim action As New DoAction(actionArray)
'now add DoAction object into the flash file
flash.Add(action)
'instruct the flash object to show frame
flash.Add(New ShowFrame())</code></example>
    </member>
    <member name="M:Aspose.Flash.Actions.Multiply.#ctor">
      <summary>
            Default constructor.
            </summary>
      <example>This example shows you how to use Multiply constructor<code>[C#]

// define an action sequence
ArrayList pushArray = new ArrayList();
// use ArrayList.Add to push the elements to the list
//pushArray.Add("elements");
//add this array to push object
Push push = new Push(pushArray);

//create an action array
ArrayList actionArray = new ArrayList();
//add push object to action array
actionArray.Add(push);
actionArray.Add(new ActionRecord(ActionType.NamedObject));
//add appropriate action class object to the action array
actionArray.Add(new Multiply());


//create a DoAction object and add actions list into it
DoAction action = new DoAction(actionArray);
//now add DoAction object into the flash file
flash.Add(action);
//instruct the flash object to show frame
flash.Add(new ShowFrame());</code><code>[Visual Basic]

' define an action sequence
Dim pushArray As New ArrayList()
' use ArrayList.Add to push the elements to the list
'pushArray.Add("elements");
'add this array to push object
Dim push As New Push(pushArray)

'create an action array
Dim actionArray As New ArrayList()
'add push object to action array
actionArray.Add(push)
actionArray.Add(New ActionRecord(ActionType.NamedObject))
'add appropriate action class object to the action array
actionArray.Add(New Multiply())


'create a DoAction object and add actions list into it
Dim action As New DoAction(actionArray)
'now add DoAction object into the flash file
flash.Add(action)
'instruct the flash object to show frame
flash.Add(New ShowFrame())</code></example>
    </member>
    <member name="P:Aspose.Flash.Actions.Multiply.Size">
      <summary>
            Returns the size of an action object in bytes.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.NewMethod">
      <summary>
            Represents a NewMethod action object.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.NewMethod.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Actions.NewMethod.Size">
      <summary>
            Returns the size of an action object in bytes.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.NewObject">
      <summary>
            Represents a NewObject action object.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.NewObject.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Actions.NewObject.Size">
      <summary>
            Returns the size of an action object in bytes.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.NextFrame">
      <summary>
            Represents a NextFrame action object.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.NextFrame.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Actions.NextFrame.Size">
      <summary>
            Returns the size of an action object in bytes.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.Not">
      <summary>
            Represents a Not action object.
            </summary>
      <example>This example shows you how to use Not class<code>[C#]

// define an action sequence
ArrayList pushArray = new ArrayList();
// use ArrayList.Add to push the elements to the list
//pushArray.Add("elements");
//add this array to push object
Push push = new Push(pushArray);

//create an action array
ArrayList actionArray = new ArrayList();
//add push object to action array
actionArray.Add(push);
actionArray.Add(new ActionRecord(ActionType.NamedObject));
//add appropriate action class object to the action array
actionArray.Add(new Not());


//create a DoAction object and add actions list into it
DoAction action = new DoAction(actionArray);
//now add DoAction object into the flash file
flash.Add(action);
//instruct the flash object to show frame
flash.Add(new ShowFrame());</code><code>[Visual Basic]

' define an action sequence
Dim pushArray As New ArrayList()
' use ArrayList.Add to push the elements to the list
'pushArray.Add("elements");
'add this array to push object
Dim push As New Push(pushArray)

'create an action array
Dim actionArray As New ArrayList()
'add push object to action array
actionArray.Add(push)
actionArray.Add(New ActionRecord(ActionType.NamedObject))
'add appropriate action class object to the action array
actionArray.Add(New [Not]())


'create a DoAction object and add actions list into it
Dim action As New DoAction(actionArray)
'now add DoAction object into the flash file
flash.Add(action)
'instruct the flash object to show frame
flash.Add(New ShowFrame())</code></example>
    </member>
    <member name="M:Aspose.Flash.Actions.Not.#ctor">
      <summary>
            Default constructor.
            </summary>
      <example>This example shows you how to use Not constructor<code>[C#]

// define an action sequence
ArrayList pushArray = new ArrayList();
// use ArrayList.Add to push the elements to the list
//pushArray.Add("elements");
//add this array to push object
Push push = new Push(pushArray);

//create an action array
ArrayList actionArray = new ArrayList();
//add push object to action array
actionArray.Add(push);
actionArray.Add(new ActionRecord(ActionType.NamedObject));
//add appropriate action class object to the action array
actionArray.Add(new Not());


//create a DoAction object and add actions list into it
DoAction action = new DoAction(actionArray);
//now add DoAction object into the flash file
flash.Add(action);
//instruct the flash object to show frame
flash.Add(new ShowFrame());</code><code>[Visual Basic]

' define an action sequence
Dim pushArray As New ArrayList()
' use ArrayList.Add to push the elements to the list
'pushArray.Add("elements");
'add this array to push object
Dim push As New Push(pushArray)

'create an action array
Dim actionArray As New ArrayList()
'add push object to action array
actionArray.Add(push)
actionArray.Add(New ActionRecord(ActionType.NamedObject))
'add appropriate action class object to the action array
actionArray.Add(New [Not]())


'create a DoAction object and add actions list into it
Dim action As New DoAction(actionArray)
'now add DoAction object into the flash file
flash.Add(action)
'instruct the flash object to show frame
flash.Add(New ShowFrame())</code></example>
    </member>
    <member name="P:Aspose.Flash.Actions.Not.Size">
      <summary>
            Returns the size of an action object in bytes.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.NullObject">
      <summary>
            NullObject class is a lightweight object that is used solely to allow null values
            to be pushed onto the Flash Player stack by the Push class.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.NullObject.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.Or">
      <summary>
            Represents an Or action object.
            </summary>
      <example>This example shows you how to use Or class<code>[C#]

// define an action sequence
ArrayList pushArray = new ArrayList();
// use ArrayList.Add to push the elements to the list
//pushArray.Add("elements");
//add this array to push object
Push push = new Push(pushArray);

//create an action array
ArrayList actionArray = new ArrayList();
//add push object to action array
actionArray.Add(push);
actionArray.Add(new ActionRecord(ActionType.NamedObject));
//add appropriate action class object to the action array
actionArray.Add(new Or());


//create a DoAction object and add actions list into it
DoAction action = new DoAction(actionArray);
//now add DoAction object into the flash file
flash.Add(action);
//instruct the flash object to show frame
flash.Add(new ShowFrame());</code><code>[Visual Basic]

' define an action sequence
Dim pushArray As New ArrayList()
' use ArrayList.Add to push the elements to the list
'pushArray.Add("elements");
'add this array to push object
Dim push As New Push(pushArray)

'create an action array
Dim actionArray As New ArrayList()
'add push object to action array
actionArray.Add(push)
actionArray.Add(New ActionRecord(ActionType.NamedObject))
'add appropriate action class object to the action array
actionArray.Add(New [Or]())


'create a DoAction object and add actions list into it
Dim action As New DoAction(actionArray)
'now add DoAction object into the flash file
flash.Add(action)
'instruct the flash object to show frame
flash.Add(New ShowFrame())</code></example>
    </member>
    <member name="M:Aspose.Flash.Actions.Or.#ctor">
      <summary>
            Default constructor.
            </summary>
      <example>This example shows you how to use Or constructor<code>[C#]

// define an action sequence
ArrayList pushArray = new ArrayList();
// use ArrayList.Add to push the elements to the list
//pushArray.Add("elements");
//add this array to push object
Push push = new Push(pushArray);

//create an action array
ArrayList actionArray = new ArrayList();
//add push object to action array
actionArray.Add(push);
actionArray.Add(new ActionRecord(ActionType.NamedObject));
//add appropriate action class object to the action array
actionArray.Add(new Or());


//create a DoAction object and add actions list into it
DoAction action = new DoAction(actionArray);
//now add DoAction object into the flash file
flash.Add(action);
//instruct the flash object to show frame
flash.Add(new ShowFrame());</code><code>[Visual Basic]

' define an action sequence
Dim pushArray As New ArrayList()
' use ArrayList.Add to push the elements to the list
'pushArray.Add("elements");
'add this array to push object
Dim push As New Push(pushArray)

'create an action array
Dim actionArray As New ArrayList()
'add push object to action array
actionArray.Add(push)
actionArray.Add(New ActionRecord(ActionType.NamedObject))
'add appropriate action class object to the action array
actionArray.Add(New [Or]())


'create a DoAction object and add actions list into it
Dim action As New DoAction(actionArray)
'now add DoAction object into the flash file
flash.Add(action)
'instruct the flash object to show frame
flash.Add(New ShowFrame())</code></example>
    </member>
    <member name="P:Aspose.Flash.Actions.Or.Size">
      <summary>
            Returns the size of an action object in bytes.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.Play">
      <summary>
            Represents a Play action object.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.Play.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Actions.Play.Size">
      <summary>
            Returns the size of an action object in bytes.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.Pop">
      <summary>
            Represents a Pop action object.
            </summary>
      <example>This example shows you how to use Pop class<code>[C#]

// define an action sequence
ArrayList pushArray = new ArrayList();
// use ArrayList.Add to push the elements to the list
//pushArray.Add("elements");
//add this array to push object
Push push = new Push(pushArray);

//create an action array
ArrayList actionArray = new ArrayList();
//add push object to action array
actionArray.Add(push);
actionArray.Add(new ActionRecord(ActionType.NamedObject));
//add appropriate action class object to the action array
actionArray.Add(new Pop());


//create a DoAction object and add actions list into it
DoAction action = new DoAction(actionArray);
//now add DoAction object into the flash file
flash.Add(action);
//instruct the flash object to show frame
flash.Add(new ShowFrame());</code><code>[Visual Basic]

' define an action sequence
Dim pushArray As New ArrayList()
' use ArrayList.Add to push the elements to the list
'pushArray.Add("elements");
'add this array to push object
Dim push As New Push(pushArray)

'create an action array
Dim actionArray As New ArrayList()
'add push object to action array
actionArray.Add(push)
actionArray.Add(New ActionRecord(ActionType.NamedObject))
'add appropriate action class object to the action array
actionArray.Add(New Pop())


'create a DoAction object and add actions list into it
Dim action As New DoAction(actionArray)
'now add DoAction object into the flash file
flash.Add(action)
'instruct the flash object to show frame
flash.Add(New ShowFrame())</code></example>
    </member>
    <member name="M:Aspose.Flash.Actions.Pop.#ctor">
      <summary>
            Default constructor.
            </summary>
      <example>This example shows you how to use Pop constructor<code>[C#]

// define an action sequence
ArrayList pushArray = new ArrayList();
// use ArrayList.Add to push the elements to the list
//pushArray.Add("elements");
//add this array to push object
Push push = new Push(pushArray);

//create an action array
ArrayList actionArray = new ArrayList();
//add push object to action array
actionArray.Add(push);
actionArray.Add(new ActionRecord(ActionType.NamedObject));
//add appropriate action class object to the action array
actionArray.Add(new Pop());


//create a DoAction object and add actions list into it
DoAction action = new DoAction(actionArray);
//now add DoAction object into the flash file
flash.Add(action);
//instruct the flash object to show frame
flash.Add(new ShowFrame());</code><code>[Visual Basic]

' define an action sequence
Dim pushArray As New ArrayList()
' use ArrayList.Add to push the elements to the list
'pushArray.Add("elements");
'add this array to push object
Dim push As New Push(pushArray)

'create an action array
Dim actionArray As New ArrayList()
'add push object to action array
actionArray.Add(push)
actionArray.Add(New ActionRecord(ActionType.NamedObject))
'add appropriate action class object to the action array
actionArray.Add(New Pop())


'create a DoAction object and add actions list into it
Dim action As New DoAction(actionArray)
'now add DoAction object into the flash file
flash.Add(action)
'instruct the flash object to show frame
flash.Add(New ShowFrame())</code></example>
    </member>
    <member name="P:Aspose.Flash.Actions.Pop.Size">
      <summary>
            Returns the size of an action object in bytes.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.PreviousFrame">
      <summary>
            Represents a PreviousFrame action object.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.PreviousFrame.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Actions.PreviousFrame.Size">
      <summary>
            Returns the size of an action object in bytes.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.Push">
      <summary>
            Push is used to push a value to the stack
            </summary>
    </member>
    <member name="F:Aspose.Flash.Actions.Push._quality">
      <summary>
            Identifies the level of rendering quality being performed by the Player.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Actions.Push._xmouse">
      <summary>
            The current x-coordinate of the mouse pointer on the Player screen.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Actions.Push._ymouse">
      <summary>
            The current y-coordinate of the mouse pointer on the Player screen.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Actions.Push._x">
      <summary>
            The x-origin of the movie clip relative to the parent clip.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Actions.Push._y">
      <summary>
            The y-origin of the movie clip relative to the parent clip.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Actions.Push._xscale">
      <summary>
            The scaling factor of the movie clip in the x direction.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Actions.Push._yscale">
      <summary>
            The scaling factor of the movie clip in the x direction.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Actions.Push._currentframe">
      <summary>
            The number of the current frame playing in the movie clip.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Actions.Push._totalframes">
      <summary>
            The total number of frames in the movie clip.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Actions.Push._alpha">
      <summary>
            The transparency of the movie clip.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Actions.Push._visible">
      <summary>
            Whether the movie clip is visible.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Actions.Push._width">
      <summary>
            The width of the movie clip in pixels.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Actions.Push._height">
      <summary>
            The height of the movie clip in pixels.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Actions.Push._rotation">
      <summary>
            The angle of rotation of the movie clip in degrees.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Actions.Push._target">
      <summary>
            The path of the movie clip relative to the root movie in the Player.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Actions.Push._framesloaded">
      <summary>
            The number of frames form the movie clip loaded.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Actions.Push._name">
      <summary>
            The name of movie clip.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Actions.Push._droptarget">
      <summary>
            The name of the movie clip currently being dragged 
            </summary>
    </member>
    <member name="F:Aspose.Flash.Actions.Push._url">
      <summary>
            The URL from which the movie clip was loaded.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Actions.Push._highquality">
      <summary>
            Identifies the level of aliasing being performed by the Player.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Actions.Push._focusrect">
      <summary>
            Identifies whether a yellow rectangle is drawn around a button or test field that has the current  focus.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Actions.Push._soundbuftime">
      <summary>
            The amount of time streaming sound is buffered by the Player before playing.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.Push.PropertyWithName(System.String)">
      <summary>
            Translates the name of a property into the integer value used
            to identify the property by the Flash Player.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.Push.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.Push.#ctor(System.Object)">
      <summary>
            Push constructor that will place the specified object value on the stack.
            </summary>
      <param name="val">object value to push onto the stack.</param>
    </member>
    <member name="M:Aspose.Flash.Actions.Push.#ctor(System.Boolean)">
      <summary>
            Push constructor that will place the specified boolean value on the stack.
            </summary>
      <param name="val">boolean value to push onto the stack.</param>
    </member>
    <member name="M:Aspose.Flash.Actions.Push.#ctor(System.Int32)">
      <summary>
            Push constructor that will place the specified integer on the stack.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.Push.#ctor(System.Double)">
      <summary>
            Push constructor that will place the specified double value on the stack.
            </summary>
      <param name="val">double-precision floating-point value to push onto the stack.</param>
    </member>
    <member name="M:Aspose.Flash.Actions.Push.#ctor(Aspose.Flash.Actions.NullObject)">
      <summary>
            Push constructor that will place a null value on the stack.
            </summary>
      <param name="nullValue">an instance of the simple Null class.</param>
    </member>
    <member name="M:Aspose.Flash.Actions.Push.#ctor(Aspose.Flash.Actions.Void)">
      <summary>
            Push constructor that will place a void value on the stack.
            </summary>
      <param name="voidValue">an instance of the simple Void class.</param>
    </member>
    <member name="M:Aspose.Flash.Actions.Push.#ctor(System.String)">
      <summary>
            Push constructor that will place the specified value on the stack.
            </summary>
      <param name="val">string literal value to push onto the stack.</param>
    </member>
    <member name="M:Aspose.Flash.Actions.Push.#ctor(Aspose.Flash.Actions.SetTableIndex)">
      <summary>
            Push constructor that will place reference a variable in a table on the stack.
            </summary>
      <param name="index">an index into a literal table to push onto the stack.</param>
    </member>
    <member name="M:Aspose.Flash.Actions.Push.#ctor(Aspose.Flash.Actions.RegisterIndex)">
      <summary>
            Push constructor that references one of the players internal registers.
            </summary>
      <param name="index">a reference to one of the Flash Player's internal registers
            to push onto the stack.</param>
    </member>
    <member name="M:Aspose.Flash.Actions.Push.#ctor(System.Collections.ArrayList)">
      <summary>
            Push constructor that will push the objects in the array onto the stack.
            </summary>
      <param name="array">an array of objects to be pushed onto the stack.
            The objects in the array must be one of the following classes: 
            Boolean, Integer, Double, String, RegisterIndex or TableIndex.</param>
    </member>
    <member name="M:Aspose.Flash.Actions.Push.Add(System.Boolean)">
      <summary>
            Adds a boolean value to the array of objects that will be pushed onto the stack.
            </summary>
      <param name="val">a boolean value.</param>
    </member>
    <member name="M:Aspose.Flash.Actions.Push.Add(System.Int32)">
      <summary>
            Adds an integer value to the array of objects that will be pushed onto the stack.
            </summary>
      <param name="val">an integer (int) value.</param>
    </member>
    <member name="M:Aspose.Flash.Actions.Push.Add(System.Double)">
      <summary>
            Adds a double value to the array of objects that will be pushed onto the stack.
            </summary>
      <param name="val">a double-precision floating-point value.</param>
    </member>
    <member name="M:Aspose.Flash.Actions.Push.Add(Aspose.Flash.Actions.NullObject)">
      <summary>
            Adds a null value to the array of objects that will be pushed onto the stack.
            </summary>
      <param name="nullValue">a lightweight Null object.</param>
    </member>
    <member name="M:Aspose.Flash.Actions.Push.Add(Aspose.Flash.Actions.Void)">
      <summary>
            Adds a void value to the array of objects that will be pushed onto the stack.
            </summary>
      <param name="voidValue">a lightweight Void object.</param>
    </member>
    <member name="M:Aspose.Flash.Actions.Push.Add(System.String)">
      <summary>
            Adds a String to the array of objects that will be pushed onto the stack.
            </summary>
      <param name="val">String</param>
    </member>
    <member name="M:Aspose.Flash.Actions.Push.Add(Aspose.Flash.Actions.SetTableIndex)">
      <summary>
            Adds an TableIndex to the array of objects that will be pushed onto the stack.
            </summary>
      <param name="index">a TableIndex referencing an entry in a table of literals.</param>
    </member>
    <member name="M:Aspose.Flash.Actions.Push.Add(Aspose.Flash.Actions.RegisterIndex)">
      <summary>
            Adds an RegisterIndex to the array of objects that will be pushed onto the stack.
            </summary>
      <param name="index">a RegisterIndex referencing one of the Flash Player's internal registers.</param>
    </member>
    <member name="M:Aspose.Flash.Actions.Push.Add(System.Object)">
      <summary>
            Adds value of int, bool, double, NullObject, Void, string to the array of objects
            that will be pushed onto the stack.
            </summary>
      <param name="val">
      </param>
    </member>
    <member name="P:Aspose.Flash.Actions.Push.Objects">
      <summary>
            Returns or sets the array of objects in the stack.
            Read/write <see cref="T:System.Collections.ArrayList" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Actions.Push.Size">
      <summary>
            Returns the size of an action object in bytes.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.PushDuplicate">
      <summary>
            Represents a PushDuplicate action object.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.PushDuplicate.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Actions.PushDuplicate.Size">
      <summary>
            Returns the size of an action object in bytes.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.RandomNumber">
      <summary>
            Represents a RandomNumber action object.
            </summary>
      <example>This example shows you how to use RandomNumber class<code>[C#]

// define an action sequence
ArrayList pushArray = new ArrayList();
// use ArrayList.Add to push the elements to the list
//pushArray.Add("elements");
//add this array to push object
Push push = new Push(pushArray);

//create an action array
ArrayList actionArray = new ArrayList();
//add push object to action array
actionArray.Add(push);
actionArray.Add(new ActionRecord(ActionType.NamedObject));
//add appropriate action class object to the action array
actionArray.Add(new RandomNumber());


//create a DoAction object and add actions list into it
DoAction action = new DoAction(actionArray);
//now add DoAction object into the flash file
flash.Add(action);
//instruct the flash object to show frame
flash.Add(new ShowFrame());</code><code>[Visual Basic]

' define an action sequence
Dim pushArray As New ArrayList()
' use ArrayList.Add to push the elements to the list
'pushArray.Add("elements");
'add this array to push object
Dim push As New Push(pushArray)

'create an action array
Dim actionArray As New ArrayList()
'add push object to action array
actionArray.Add(push)
actionArray.Add(New ActionRecord(ActionType.NamedObject))
'add appropriate action class object to the action array
actionArray.Add(New RandomNumber())


'create a DoAction object and add actions list into it
Dim action As New DoAction(actionArray)
'now add DoAction object into the flash file
flash.Add(action)
'instruct the flash object to show frame
flash.Add(New ShowFrame())</code></example>
    </member>
    <member name="M:Aspose.Flash.Actions.RandomNumber.#ctor">
      <summary>
            Default constructor.
            </summary>
      <example>This example shows you how to use RandomNumber constructor<code>[C#]

// define an action sequence
ArrayList pushArray = new ArrayList();
// use ArrayList.Add to push the elements to the list
//pushArray.Add("elements");
//add this array to push object
Push push = new Push(pushArray);

//create an action array
ArrayList actionArray = new ArrayList();
//add push object to action array
actionArray.Add(push);
actionArray.Add(new ActionRecord(ActionType.NamedObject));
//add appropriate action class object to the action array
actionArray.Add(new RandomNumber());


//create a DoAction object and add actions list into it
DoAction action = new DoAction(actionArray);
//now add DoAction object into the flash file
flash.Add(action);
//instruct the flash object to show frame
flash.Add(new ShowFrame());</code><code>[Visual Basic]

' define an action sequence
Dim pushArray As New ArrayList()
' use ArrayList.Add to push the elements to the list
'pushArray.Add("elements");
'add this array to push object
Dim push As New Push(pushArray)

'create an action array
Dim actionArray As New ArrayList()
'add push object to action array
actionArray.Add(push)
actionArray.Add(New ActionRecord(ActionType.NamedObject))
'add appropriate action class object to the action array
actionArray.Add(New RandomNumber())


'create a DoAction object and add actions list into it
Dim action As New DoAction(actionArray)
'now add DoAction object into the flash file
flash.Add(action)
'instruct the flash object to show frame
flash.Add(New ShowFrame())</code></example>
    </member>
    <member name="P:Aspose.Flash.Actions.RandomNumber.Size">
      <summary>
            Returns the size of an action object in bytes.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.RegisterCopy">
      <summary>
            RegisterCopy class is used to copy the item at the top of the stack
            to one of the Flash Player's internal registers. 
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.RegisterCopy.#ctor(System.Int32)">
      <summary>
            RegisterCopy constructor.
            </summary>
      <param name="index">the number of one internal registers.</param>
    </member>
    <member name="P:Aspose.Flash.Actions.RegisterCopy.RegisterNumber">
      <summary>
            Returns or sets the number of the Player register
            that the value on the stack will be copied to.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Actions.RegisterCopy.Size">
      <summary>
            Returns the size of an action object in bytes.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.RegisterIndex">
      <summary>
            RegisterIndex is used with an InternalStack class to refer to one of
            internal registers that contains a value to be used in a calculation.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.RegisterIndex.#ctor(System.Int32)">
      <summary>
            RegisterIndex constructor.
            </summary>
      <param name="index">the register number.</param>
    </member>
    <member name="P:Aspose.Flash.Actions.RegisterIndex.Index">
      <summary>
            Returns or sets the index of the Flash Player's internal register.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.RegisterVariable">
      <summary>
            RegisterVariable class is used to identify the register that an argument 
            defined in the DefineFunction2 class is mapped into when executing the function.
            <p>Register numbers up to 255 may be specified. If the number is zero then the 
            argument is defined as a local variable.</p></summary>
    </member>
    <member name="M:Aspose.Flash.Actions.RegisterVariable.#ctor(System.Int32,System.String)">
      <summary>
            RegisterVariable constructor 
            </summary>
      <param name="index">the number of the register, 1..255</param>
      <param name="name">the name of the argument.</param>
    </member>
    <member name="P:Aspose.Flash.Actions.RegisterVariable.Index">
      <summary>
            Returns or sets the number of the register that will contain the function argument.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Actions.RegisterVariable.Name">
      <summary> 
            Returns or sets the name of the function argument.
            Read/write <see cref="T:System.String" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.RemoveSprite">
      <summary>
            Represents a RemoveSprite action object.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.RemoveSprite.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Actions.RemoveSprite.Size">
      <summary>
            Returns the size of an action object in bytes.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.Return">
      <summary>
            Represents a Return action object.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.Return.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Actions.Return.Size">
      <summary>
            Returns the size of an action object in bytes.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.SetMember">
      <summary>
            Represents a SetMember action object.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.SetMember.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Actions.SetMember.Size">
      <summary>
            Returns the size of an action object in bytes.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.SetProperty">
      <summary>
            Represents a SetProperty action object.
            </summary>
      <example>This example shows you how to use SetProperty class<code>[C#]

// define an action sequence
ArrayList pushArray = new ArrayList();
// use ArrayList.Add to push the elements to the list
//pushArray.Add("elements");
//add this array to push object
Push push = new Push(pushArray);

//create an action array
ArrayList actionArray = new ArrayList();
//add push object to action array
actionArray.Add(push);
actionArray.Add(new ActionRecord(ActionType.NamedObject));
//add appropriate action class object to the action array
actionArray.Add(new SetProperty());


//create a DoAction object and add actions list into it
DoAction action = new DoAction(actionArray);
//now add DoAction object into the flash file
flash.Add(action);
//instruct the flash object to show frame
flash.Add(new ShowFrame());</code><code>[Visual Basic]

' define an action sequence
Dim pushArray As New ArrayList()
' use ArrayList.Add to push the elements to the list
'pushArray.Add("elements");
'add this array to push object
Dim push As New Push(pushArray)

'create an action array
Dim actionArray As New ArrayList()
'add push object to action array
actionArray.Add(push)
actionArray.Add(New ActionRecord(ActionType.NamedObject))
'add appropriate action class object to the action array
actionArray.Add(New SetProperty())


'create a DoAction object and add actions list into it
Dim action As New DoAction(actionArray)
'now add DoAction object into the flash file
flash.Add(action)
'instruct the flash object to show frame
flash.Add(New ShowFrame())</code></example>
    </member>
    <member name="M:Aspose.Flash.Actions.SetProperty.#ctor">
      <summary>
            Default constructor.
            </summary>
      <example>This example shows you how to use SetProperty constructor<code>[C#]

// define an action sequence
ArrayList pushArray = new ArrayList();
// use ArrayList.Add to push the elements to the list
//pushArray.Add("elements");
//add this array to push object
Push push = new Push(pushArray);

//create an action array
ArrayList actionArray = new ArrayList();
//add push object to action array
actionArray.Add(push);
actionArray.Add(new ActionRecord(ActionType.NamedObject));
//add appropriate action class object to the action array
actionArray.Add(new SetProperty());


//create a DoAction object and add actions list into it
DoAction action = new DoAction(actionArray);
//now add DoAction object into the flash file
flash.Add(action);
//instruct the flash object to show frame
flash.Add(new ShowFrame());</code><code>[Visual Basic]

' define an action sequence
Dim pushArray As New ArrayList()
' use ArrayList.Add to push the elements to the list
'pushArray.Add("elements");
'add this array to push object
Dim push As New Push(pushArray)

'create an action array
Dim actionArray As New ArrayList()
'add push object to action array
actionArray.Add(push)
actionArray.Add(New ActionRecord(ActionType.NamedObject))
'add appropriate action class object to the action array
actionArray.Add(New SetProperty())


'create a DoAction object and add actions list into it
Dim action As New DoAction(actionArray)
'now add DoAction object into the flash file
flash.Add(action)
'instruct the flash object to show frame
flash.Add(New ShowFrame())</code></example>
    </member>
    <member name="P:Aspose.Flash.Actions.SetProperty.Size">
      <summary>
            Returns the size of an action object in bytes.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.SetTableIndex">
      <summary>
            SetTableIndex class is used with the Push class to push a reference
            to an entry in a table of literals onto the stack.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.SetTableIndex.#ctor(System.Int32)">
      <summary>
            SetTableIndex constructor.
            </summary>
      <param name="index">the index into the literal table.</param>
    </member>
    <member name="P:Aspose.Flash.Actions.SetTableIndex.Index">
      <summary>
            Returns or sets the index in the table of string literals.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.SetTarget">
      <summary>
            SetTarget is used to instruct Flash Player to change the context
            of subsequent actions, so they apply to a named object (TargetName)
            rather than the current movie.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.SetTarget.#ctor(System.String)">
      <summary>
            SetTarget constructor.
            </summary>
      <param name="target">Target of action target.</param>
    </member>
    <member name="P:Aspose.Flash.Actions.SetTarget.TargetName">
      <summary>
            Returns or sets the target of an action target.
            Read/write <see cref="T:System.String" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Actions.SetTarget.Size">
      <summary>
            Returns the size of an action object in bytes.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.SetTarget2">
      <summary>
            Represents a SetTarget2 action object.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.SetTarget2.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Actions.SetTarget2.Size">
      <summary>
            Returns the size of an action object in bytes.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.SetVariable">
      <summary>
            Represents a SetVariable action object.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.SetVariable.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Actions.SetVariable.Size">
      <summary>
            Returns the size of an action object in bytes.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.StackSwap">
      <summary>
            Represents a StackSwap action object.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.StackSwap.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Actions.StackSwap.Size">
      <summary>
            Returns the size of an action object in bytes.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.StartDrag">
      <summary>
            Represents a StartDrag action object.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.StartDrag.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Actions.StartDrag.Size">
      <summary>
            Returns the size of an action object in bytes.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.Stop">
      <summary>
            Represents a Stop action object.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.Stop.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Actions.Stop.Size">
      <summary>
            Returns the size of an action object in bytes.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.StopSounds">
      <summary>
            Represents a StopSound action object.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.StopSounds.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Actions.StopSounds.Size">
      <summary>
            Returns the size of an action object in bytes.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.StrictEquals">
      <summary>
            Represents a StrictEquals action object.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.StrictEquals.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Actions.StrictEquals.Size">
      <summary>
            Returns the size of an action object in bytes.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.StringAdd">
      <summary>
            Represents a StringAdd action object.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.StringAdd.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Actions.StringAdd.Size">
      <summary>
            Returns the size of an action object in bytes.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.StringEquals">
      <summary>
            Represents a StringEquals action object.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.StringEquals.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Actions.StringEquals.Size">
      <summary>
            Returns the size of an action object in bytes.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.StringExtract">
      <summary>
            Represents a StringExtract action object.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.StringExtract.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Actions.StringExtract.Size">
      <summary>
            Returns the size of an action object in bytes.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.StringGreater">
      <summary>
            Represents a StringGreater action object.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.StringGreater.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Actions.StringGreater.Size">
      <summary>
            Returns the size of an action object in bytes.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.StringLength">
      <summary>
            Represents a StringLength action object.
            </summary>
      <example>This example shows you how to use StringLength class<code>[C#]

// define an action sequence
ArrayList pushArray = new ArrayList();
// use ArrayList.Add to push the elements to the list
//pushArray.Add("elements");
//add this array to push object
Push push = new Push(pushArray);

//create an action array
ArrayList actionArray = new ArrayList();
//add push object to action array
actionArray.Add(push);
actionArray.Add(new ActionRecord(ActionType.NamedObject));
//add appropriate action class object to the action array
actionArray.Add(new StringLength());


//create a DoAction object and add actions list into it
DoAction action = new DoAction(actionArray);
//now add DoAction object into the flash file
flash.Add(action);
//instruct the flash object to show frame
flash.Add(new ShowFrame());</code><code>[Visual Basic]

' define an action sequence
Dim pushArray As New ArrayList()
' use ArrayList.Add to push the elements to the list
'pushArray.Add("elements");
'add this array to push object
Dim push As New Push(pushArray)

'create an action array
Dim actionArray As New ArrayList()
'add push object to action array
actionArray.Add(push)
actionArray.Add(New ActionRecord(ActionType.NamedObject))
'add appropriate action class object to the action array
actionArray.Add(New StringLength())


'create a DoAction object and add actions list into it
Dim action As New DoAction(actionArray)
'now add DoAction object into the flash file
flash.Add(action)
'instruct the flash object to show frame
flash.Add(New ShowFrame())</code></example>
    </member>
    <member name="M:Aspose.Flash.Actions.StringLength.#ctor">
      <summary>
            Default constructor.
            </summary>
      <example>This example shows you how to use StringLength constructor<code>[C#]

// define an action sequence
ArrayList pushArray = new ArrayList();
// use ArrayList.Add to push the elements to the list
//pushArray.Add("elements");
//add this array to push object
Push push = new Push(pushArray);

//create an action array
ArrayList actionArray = new ArrayList();
//add push object to action array
actionArray.Add(push);
actionArray.Add(new ActionRecord(ActionType.NamedObject));
//add appropriate action class object to the action array
actionArray.Add(new StringLength());


//create a DoAction object and add actions list into it
DoAction action = new DoAction(actionArray);
//now add DoAction object into the flash file
flash.Add(action);
//instruct the flash object to show frame
flash.Add(new ShowFrame());</code><code>[Visual Basic]

' define an action sequence
Dim pushArray As New ArrayList()
' use ArrayList.Add to push the elements to the list
'pushArray.Add("elements");
'add this array to push object
Dim push As New Push(pushArray)

'create an action array
Dim actionArray As New ArrayList()
'add push object to action array
actionArray.Add(push)
actionArray.Add(New ActionRecord(ActionType.NamedObject))
'add appropriate action class object to the action array
actionArray.Add(New StringLength())


'create a DoAction object and add actions list into it
Dim action As New DoAction(actionArray)
'now add DoAction object into the flash file
flash.Add(action)
'instruct the flash object to show frame
flash.Add(New ShowFrame())</code></example>
    </member>
    <member name="P:Aspose.Flash.Actions.StringLength.Size">
      <summary>
            Returns the size of an action object in bytes.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.StringLess">
      <summary>
            Represents a StringLess action object.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.StringLess.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Actions.StringLess.Size">
      <summary>
            Returns the size of an action object in bytes.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.Subtract">
      <summary>
            Represents a Subtract action object.
            </summary>
      <example>This example shows you how to use Subtract class<code>[C#]

// define an action sequence
ArrayList pushArray = new ArrayList();
// use ArrayList.Add to push the elements to the list
//pushArray.Add("elements");
//add this array to push object
Push push = new Push(pushArray);

//create an action array
ArrayList actionArray = new ArrayList();
//add push object to action array
actionArray.Add(push);
actionArray.Add(new ActionRecord(ActionType.NamedObject));
//add appropriate action class object to the action array
actionArray.Add(new Subtract());


//create a DoAction object and add actions list into it
DoAction action = new DoAction(actionArray);
//now add DoAction object into the flash file
flash.Add(action);
//instruct the flash object to show frame
flash.Add(new ShowFrame());</code><code>[Visual Basic]

' define an action sequence
Dim pushArray As New ArrayList()
' use ArrayList.Add to push the elements to the list
'pushArray.Add("elements");
'add this array to push object
Dim push As New Push(pushArray)

'create an action array
Dim actionArray As New ArrayList()
'add push object to action array
actionArray.Add(push)
actionArray.Add(New ActionRecord(ActionType.NamedObject))
'add appropriate action class object to the action array
actionArray.Add(New Subtract())


'create a DoAction object and add actions list into it
Dim action As New DoAction(actionArray)
'now add DoAction object into the flash file
flash.Add(action)
'instruct the flash object to show frame
flash.Add(New ShowFrame())</code></example>
    </member>
    <member name="M:Aspose.Flash.Actions.Subtract.#ctor">
      <summary>
            Default constructor.
            </summary>
      <example>This example shows you how to use Subtract constructor<code>[C#]

// define an action sequence
ArrayList pushArray = new ArrayList();
// use ArrayList.Add to push the elements to the list
//pushArray.Add("elements");
//add this array to push object
Push push = new Push(pushArray);

//create an action array
ArrayList actionArray = new ArrayList();
//add push object to action array
actionArray.Add(push);
actionArray.Add(new ActionRecord(ActionType.NamedObject));
//add appropriate action class object to the action array
actionArray.Add(new Subtract());


//create a DoAction object and add actions list into it
DoAction action = new DoAction(actionArray);
//now add DoAction object into the flash file
flash.Add(action);
//instruct the flash object to show frame
flash.Add(new ShowFrame());</code><code>[Visual Basic]

' define an action sequence
Dim pushArray As New ArrayList()
' use ArrayList.Add to push the elements to the list
'pushArray.Add("elements");
'add this array to push object
Dim push As New Push(pushArray)

'create an action array
Dim actionArray As New ArrayList()
'add push object to action array
actionArray.Add(push)
actionArray.Add(New ActionRecord(ActionType.NamedObject))
'add appropriate action class object to the action array
actionArray.Add(New Subtract())


'create a DoAction object and add actions list into it
Dim action As New DoAction(actionArray)
'now add DoAction object into the flash file
flash.Add(action)
'instruct the flash object to show frame
flash.Add(New ShowFrame())</code></example>
    </member>
    <member name="P:Aspose.Flash.Actions.Subtract.Size">
      <summary>
            Returns the size of an action object in bytes.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.TargetPath">
      <summary>
            Represents a TargetPath action object.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.TargetPath.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Actions.TargetPath.Size">
      <summary>
            Returns the size of an action object in bytes.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.Throw">
      <summary>
            Represents a Throw action object.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.Throw.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Actions.Throw.Size">
      <summary>
            Returns the size of an action object in bytes.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.ToggleQuality">
      <summary>
            Represents a ToggleQuality action object.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.ToggleQuality.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Actions.ToggleQuality.Size">
      <summary>
            Returns the size of an action object in bytes.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.ToInteger">
      <summary>
            Represents a ToInteger action object.
            </summary>
      <example>This example shows you how to use ToInteger class<code>[C#]

// define an action sequence
ArrayList pushArray = new ArrayList();
// use ArrayList.Add to push the elements to the list
//pushArray.Add("elements");
//add this array to push object
Push push = new Push(pushArray);

//create an action array
ArrayList actionArray = new ArrayList();
//add push object to action array
actionArray.Add(push);
actionArray.Add(new ActionRecord(ActionType.NamedObject));
//add appropriate action class object to the action array
actionArray.Add(new ToInteger());


//create a DoAction object and add actions list into it
DoAction action = new DoAction(actionArray);
//now add DoAction object into the flash file
flash.Add(action);
//instruct the flash object to show frame
flash.Add(new ShowFrame());</code><code>[Visual Basic]

' define an action sequence
Dim pushArray As New ArrayList()
' use ArrayList.Add to push the elements to the list
'pushArray.Add("elements");
'add this array to push object
Dim push As New Push(pushArray)

'create an action array
Dim actionArray As New ArrayList()
'add push object to action array
actionArray.Add(push)
actionArray.Add(New ActionRecord(ActionType.NamedObject))
'add appropriate action class object to the action array
actionArray.Add(New ToInteger())


'create a DoAction object and add actions list into it
Dim action As New DoAction(actionArray)
'now add DoAction object into the flash file
flash.Add(action)
'instruct the flash object to show frame
flash.Add(New ShowFrame())</code></example>
    </member>
    <member name="M:Aspose.Flash.Actions.ToInteger.#ctor">
      <summary>
            Default constructor.
            </summary>
      <example>This example shows you how to use ToInteger constructor<code>[C#]

// define an action sequence
ArrayList pushArray = new ArrayList();
// use ArrayList.Add to push the elements to the list
//pushArray.Add("elements");
//add this array to push object
Push push = new Push(pushArray);

//create an action array
ArrayList actionArray = new ArrayList();
//add push object to action array
actionArray.Add(push);
actionArray.Add(new ActionRecord(ActionType.NamedObject));
//add appropriate action class object to the action array
actionArray.Add(new ToInteger());


//create a DoAction object and add actions list into it
DoAction action = new DoAction(actionArray);
//now add DoAction object into the flash file
flash.Add(action);
//instruct the flash object to show frame
flash.Add(new ShowFrame());</code><code>[Visual Basic]

' define an action sequence
Dim pushArray As New ArrayList()
' use ArrayList.Add to push the elements to the list
'pushArray.Add("elements");
'add this array to push object
Dim push As New Push(pushArray)

'create an action array
Dim actionArray As New ArrayList()
'add push object to action array
actionArray.Add(push)
actionArray.Add(New ActionRecord(ActionType.NamedObject))
'add appropriate action class object to the action array
actionArray.Add(New ToInteger())


'create a DoAction object and add actions list into it
Dim action As New DoAction(actionArray)
'now add DoAction object into the flash file
flash.Add(action)
'instruct the flash object to show frame
flash.Add(New ShowFrame())</code></example>
    </member>
    <member name="P:Aspose.Flash.Actions.ToInteger.Size">
      <summary>
            Returns the size of an action object in bytes.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.ToNumber">
      <summary>
            Represents a ToNumber action object.
            </summary>
      <example>This example shows you how to use ToNumber class<code>[C#]

// define an action sequence
ArrayList pushArray = new ArrayList();
// use ArrayList.Add to push the elements to the list
//pushArray.Add("elements");
//add this array to push object
Push push = new Push(pushArray);

//create an action array
ArrayList actionArray = new ArrayList();
//add push object to action array
actionArray.Add(push);
actionArray.Add(new ActionRecord(ActionType.NamedObject));
//add appropriate action class object to the action array
actionArray.Add(new ToNumber());


//create a DoAction object and add actions list into it
DoAction action = new DoAction(actionArray);
//now add DoAction object into the flash file
flash.Add(action);
//instruct the flash object to show frame
flash.Add(new ShowFrame());</code><code>[Visual Basic]

' define an action sequence
Dim pushArray As New ArrayList()
' use ArrayList.Add to push the elements to the list
'pushArray.Add("elements");
'add this array to push object
Dim push As New Push(pushArray)

'create an action array
Dim actionArray As New ArrayList()
'add push object to action array
actionArray.Add(push)
actionArray.Add(New ActionRecord(ActionType.NamedObject))
'add appropriate action class object to the action array
actionArray.Add(New ToNumber())


'create a DoAction object and add actions list into it
Dim action As New DoAction(actionArray)
'now add DoAction object into the flash file
flash.Add(action)
'instruct the flash object to show frame
flash.Add(New ShowFrame())</code></example>
    </member>
    <member name="M:Aspose.Flash.Actions.ToNumber.#ctor">
      <summary>
            Default constructor.
            </summary>
      <example>This example shows you how to use ToNumber constructor<code>[C#]

// define an action sequence
ArrayList pushArray = new ArrayList();
// use ArrayList.Add to push the elements to the list
//pushArray.Add("elements");
//add this array to push object
Push push = new Push(pushArray);

//create an action array
ArrayList actionArray = new ArrayList();
//add push object to action array
actionArray.Add(push);
actionArray.Add(new ActionRecord(ActionType.NamedObject));
//add appropriate action class object to the action array
actionArray.Add(new ToNumber());


//create a DoAction object and add actions list into it
DoAction action = new DoAction(actionArray);
//now add DoAction object into the flash file
flash.Add(action);
//instruct the flash object to show frame
flash.Add(new ShowFrame());</code><code>[Visual Basic]

' define an action sequence
Dim pushArray As New ArrayList()
' use ArrayList.Add to push the elements to the list
'pushArray.Add("elements");
'add this array to push object
Dim push As New Push(pushArray)

'create an action array
Dim actionArray As New ArrayList()
'add push object to action array
actionArray.Add(push)
actionArray.Add(New ActionRecord(ActionType.NamedObject))
'add appropriate action class object to the action array
actionArray.Add(New ToNumber())


'create a DoAction object and add actions list into it
Dim action As New DoAction(actionArray)
'now add DoAction object into the flash file
flash.Add(action)
'instruct the flash object to show frame
flash.Add(New ShowFrame())</code></example>
    </member>
    <member name="P:Aspose.Flash.Actions.ToNumber.Size">
      <summary>
            Returns the size of an action object in bytes.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.ToString">
      <summary>
            Represents a ToString action object.
            </summary>
      <example>This example shows you how to use ToString class<code>[C#]

// define an action sequence
ArrayList pushArray = new ArrayList();
// use ArrayList.Add to push the elements to the list
//pushArray.Add("elements");
//add this array to push object
Push push = new Push(pushArray);

//create an action array
ArrayList actionArray = new ArrayList();
//add push object to action array
actionArray.Add(push);
actionArray.Add(new ActionRecord(ActionType.NamedObject));
//add appropriate action class object to the action array
actionArray.Add(new ToString());


//create a DoAction object and add actions list into it
DoAction action = new DoAction(actionArray);
//now add DoAction object into the flash file
flash.Add(action);
//instruct the flash object to show frame
flash.Add(new ShowFrame());</code><code>[Visual Basic]

' define an action sequence
Dim pushArray As New ArrayList()
' use ArrayList.Add to push the elements to the list
'pushArray.Add("elements");
'add this array to push object
Dim push As New Push(pushArray)

'create an action array
Dim actionArray As New ArrayList()
'add push object to action array
actionArray.Add(push)
actionArray.Add(New ActionRecord(ActionType.NamedObject))
'add appropriate action class object to the action array
actionArray.Add(New ToString())


'create a DoAction object and add actions list into it
Dim action As New DoAction(actionArray)
'now add DoAction object into the flash file
flash.Add(action)
'instruct the flash object to show frame
flash.Add(New ShowFrame())</code></example>
    </member>
    <member name="M:Aspose.Flash.Actions.ToString.#ctor">
      <summary>
            Default constructor.
            </summary>
      <example>This example shows you how to use ToString constructor<code>[C#]

// define an action sequence
ArrayList pushArray = new ArrayList();
// use ArrayList.Add to push the elements to the list
//pushArray.Add("elements");
//add this array to push object
Push push = new Push(pushArray);

//create an action array
ArrayList actionArray = new ArrayList();
//add push object to action array
actionArray.Add(push);
actionArray.Add(new ActionRecord(ActionType.NamedObject));
//add appropriate action class object to the action array
actionArray.Add(new ToString());


//create a DoAction object and add actions list into it
DoAction action = new DoAction(actionArray);
//now add DoAction object into the flash file
flash.Add(action);
//instruct the flash object to show frame
flash.Add(new ShowFrame());</code><code>[Visual Basic]

' define an action sequence
Dim pushArray As New ArrayList()
' use ArrayList.Add to push the elements to the list
'pushArray.Add("elements");
'add this array to push object
Dim push As New Push(pushArray)

'create an action array
Dim actionArray As New ArrayList()
'add push object to action array
actionArray.Add(push)
actionArray.Add(New ActionRecord(ActionType.NamedObject))
'add appropriate action class object to the action array
actionArray.Add(New ToString())


'create a DoAction object and add actions list into it
Dim action As New DoAction(actionArray)
'now add DoAction object into the flash file
flash.Add(action)
'instruct the flash object to show frame
flash.Add(New ShowFrame())</code></example>
    </member>
    <member name="P:Aspose.Flash.Actions.ToString.Size">
      <summary>
            Returns the size of an action object in bytes.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.Trace">
      <summary>
            Represents a Trace action object.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.Trace.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Actions.Trace.Size">
      <summary>
            Returns the size of an action object in bytes.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.Try">
      <summary>
            Try class defines handlers for exceptional conditions, implementing
            the ActionScript try, catch, and finally keywords.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.Try.#ctor(System.String,System.Collections.ArrayList,System.Collections.ArrayList,System.Collections.ArrayList)">
      <summary>
            Try constructor
            </summary>
      <param name="name">the name of the variable that the thrown object will be assigned to.</param>
      <param name="tryArray">actions that will be executed in the try block of the exception.</param>
      <param name="catchArray">actions that will be executed in the catch block of the exception,
            if one is defined. This may be null is no catch block is required - the exception
            will be handled by another catche block higher in the exception tree.</param>
      <param name="finallyArray">actions that will be executed in the finally block of the exception,
            if one is defined. This may be null is no finally block is required.</param>
    </member>
    <member name="M:Aspose.Flash.Actions.Try.#ctor(System.Int32,System.Collections.ArrayList,System.Collections.ArrayList,System.Collections.ArrayList)">
      <summary>
            Try constructor a new exception handler with the thrown object assigned
            to Flash Player's internal registers.
            </summary>
      <param name="index">the number of the register that the thrown object will be assigned to.</param>
      <param name="tryArray">actions that will be executed in the try block of the exception.</param>
      <param name="catchArray">actions that will be executed in the catch block of the exception,
            if one is defined. This may be null is no catch block is required - the exception
            will be handled by another catche block higher in the exception tree.</param>
      <param name="finallyArray">actions that will be executed in the finally block of the exception,
            if one is defined. This may be null is no finally block is required.</param>
    </member>
    <member name="M:Aspose.Flash.Actions.Try.AddToTry(Aspose.Flash.Actions.ActionObject)">
      <summary>
            Add the action object to the array of actions for the try block.
            </summary>
      <param name="action">an action.</param>
    </member>
    <member name="M:Aspose.Flash.Actions.Try.AddToCatch(Aspose.Flash.Actions.ActionObject)">
      <summary>
            Add the action object to the array of actions for the catch block.
            </summary>
      <param name="action">an action</param>
    </member>
    <member name="M:Aspose.Flash.Actions.Try.AddToFinally(Aspose.Flash.Actions.ActionObject)">
      <summary>
            Add the action object to the array of actions for the finally block.
            </summary>
      <param name="action">an action</param>
    </member>
    <member name="P:Aspose.Flash.Actions.Try.CatchName">
      <summary>
            Returns or sets the name of the catch variable.
            Read/write <see cref="T:System.String" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Actions.Try.CatchRegister">
      <summary> 
            Returns or sets the register to catch into.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Actions.Try.TryBody">
      <summary>
            Returns or sets the body of the try block.
            Read/write <see cref="T:System.Collections.ArrayList" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Actions.Try.CatchBody">
      <summary>
            Returns or sets the body of the catch block.
            Read/write <see cref="T:System.Collections.ArrayList" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Actions.Try.FinallyBody">
      <summary>
            Returns or sets the body of the finally block.
            Read/write <see cref="T:System.Collections.ArrayList" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Actions.Try.Size">
      <summary>
            Returns the size of an action object in bytes.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.TypeOf">
      <summary>
            Represents a TypeOf action object.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.TypeOf.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Actions.TypeOf.Size">
      <summary>
            Returns the size of an action object in bytes.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.UnknownAction">
      <summary>
            UnknownAction class is used to represent any action decoded from a Flash file that 
            is currently not supported by the framework. 
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.UnknownAction.#ctor(Aspose.Flash.Actions.ActionType,System.Byte[])">
      <summary>
            UnknownAction constructor
            </summary>
      <param name="type">action type</param>
      <param name="bytes">encoded action</param>
    </member>
    <member name="P:Aspose.Flash.Actions.UnknownAction.Data">
      <summary>
            Returns or sets the encoded data for the action.
            Read/write <see cref="T:System.Byte" />[].
            </summary>
    </member>
    <member name="P:Aspose.Flash.Actions.UnknownAction.Size">
      <summary>
            Returns the size of an action object in bytes.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.Void">
      <summary>
            Void class is used  to allow void values to be pushed 
            onto the Flash Player stack by the Push class.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.Void.#ctor">
      <summary>
            Constructs an Void object.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.WaitForFrame">
      <summary>
            WaitForFrame class instructs Flash Player to wait until the specified frame;
            otherwise skips the specified number of actions.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.WaitForFrame.#ctor(System.Int32,System.Int32)">
      <summary>
            WaitForFrame constructor.
            </summary>
      <param name="frameNumber">the number of the frame to wait for.</param>
      <param name="skipCount">the number of skipped actions.</param>
    </member>
    <member name="P:Aspose.Flash.Actions.WaitForFrame.Frame">
      <summary>
            Returns or sets the frame to wait for.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Actions.WaitForFrame.SkipCount">
      <summary>
            Returns or sets the number of actions to skip if frame is not loaded.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Actions.WaitForFrame.Size">
      <summary>
            Returns the size of an action object in bytes.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.WaitForFrame2">
      <summary>
            WaitForFrame2 class instructs the player waits for a frame to be loaded
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.WaitForFrame2.#ctor(System.Int32)">
      <summary>
            WaitForFrame2 constructor
            </summary>
      <param name="skipCount">number of rames to skip</param>
    </member>
    <member name="P:Aspose.Flash.Actions.WaitForFrame2.SkipCount">
      <summary>
            Returns or sets the number of frame to skip.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Actions.WaitForFrame2.Size">
      <summary>
            Returns the size of an action object in bytes.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.With">
      <summary>
            Represents a With block of scripts.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.With.#ctor(System.Collections.ArrayList)">
      <summary>
            With contructor with an array of actions.
            </summary>
      <param name="array">the array of action objects.</param>
    </member>
    <member name="M:Aspose.Flash.Actions.With.Add(Aspose.Flash.Actions.ActionObject)">
      <summary>
            Adds the action object to the array of actions.
            </summary>
      <param name="action">an object belonging to a class derived from ActionObject.</param>
    </member>
    <member name="P:Aspose.Flash.Actions.With.Actions">
      <summary>
            Returns or sets the array of actions that are executed for the movie clip target.
            Read/write <see cref="T:System.Collections.ArrayList" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Actions.With.Size">
      <summary>
            Returns the size of an action object in bytes.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.BuildVersionInfo">
      <summary>
            Contains several constants describing the assembly.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Basic.ColorTransform">
      <summary>
        <p>The ColorTransform class defines color transformation that applies to the graphic object.</p>
            There are two types of transform possible:
            <ol><li>Multiplication Transforms</li><li>Addition Transforms</li></ol>
            Multiplication transforms multiply the red, green, blue and alpha components by an 8.8 fixedpoint
            value. The fixed-point representation of 1.0 is 0x100 or 256 decimal. Therefore, the result of
            a multiplication operation should be divided by 256. For any color (R,G,B,A) the transformed
            color (R1, G1, B1, A1) is calculated as follows:
            <code>
               R1 = (R * RedMultTerm) / 256
               G1 = (G * GreenMultTerm) / 256
               B1 = (B * BlueMultTerm) / 256
               A1 = (A * AlphaMultTerm) / 256
            </code>
            The ColorTransform class is most commonly used to display objects as partially transparent.
            This is achieved by multiplying the alpha channel by some value between zero and 256.
            Addition transforms simply add a fixed value (positive or negative) to the red, green,
            blue and alpha components of the object being displayed. If the result is greater than 255,
            the result is clamped to 255. If the result is less than zero, the result is clamped to zero.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Basic.ColorTransform.#ctor">
      <summary>
            Default constructor.
            </summary>
      <example>This example shows you how to use ColorTransform constructor<code>[C#]

//create color transform object
ColorTransform ct = new ColorTransform();
ct.AlphaAddTerm = 1;
ct.AlphaMultiTerm = 0;
ct.BlueAddTerm = 1;
ct.BlueMultTerm = 0;
ct.GreenAddTerm = 1;
ct.RedMultTerm = 0;
//add to button record object
ButtonRecord button1 = new ButtonRecord(
buttonState, defineShape.Id, 1, new MatrixTransform(),
ct);
ArrayList buttons = new ArrayList();
buttons.Add(button1);</code><code>[Visual Basic]

'create color transform object
Dim ct As New ColorTransform()
ct.AlphaAddTerm = 1
ct.AlphaMultiTerm = 0
ct.BlueAddTerm = 1
ct.BlueMultTerm = 0
ct.GreenAddTerm = 1
ct.RedMultTerm = 0
'add to button record object
Dim button1 As New ButtonRecord(buttonState, defineShape.Id, 1, New MatrixTransform(), ct)
Dim buttons As New ArrayList()
buttons.Add(button1)</code></example>
    </member>
    <member name="M:Aspose.Flash.Basic.ColorTransform.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>
            Constructor of ColorTransform class with the specified color terms.
            </summary>
      <param name="red">value to add to the red colour channel.</param>
      <param name="green">value to add to the green colour channel.</param>
      <param name="blue">value to add to the blue colour channel.</param>
      <example>This example shows you how to use ColorTransform(Int32,Int32,Int32) constructor<code>[C#]

//create color transform object
ColorTransform ct = new ColorTransform(0,0,0);
//add to button record object
ButtonRecord button1 = new ButtonRecord(
buttonState, defineShape.Id, 1, new MatrixTransform(),
ct);
ArrayList buttons = new ArrayList();
buttons.Add(button1);</code><code>[Visual Basic]

'create color transform object
Dim ct As New ColorTransform(0,0,0)
'add to button record object
Dim button1 As New ButtonRecord(buttonState, defineShape.Id, 1, New MatrixTransform(), ct)
Dim buttons As New ArrayList()
buttons.Add(button1)</code></example>
    </member>
    <member name="M:Aspose.Flash.Basic.ColorTransform.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Constructor ColorTransform with the specified add terms.
            </summary>
      <param name="red">value to add to the red colour channel.</param>
      <param name="green">value to add to the green colour channel.</param>
      <param name="blue">value to add to the blue colour channel.</param>
      <param name="alpha">value to add to the alpha colour channel.</param>
      <example>This example shows you how to use ColorTransform(Int32,Int32,Int32, Int32) constructor<code>[C#]

//create color transform object
ColorTransform ct = new ColorTransform(0,0,0,1);
//add to button record object
ButtonRecord button1 = new ButtonRecord(
buttonState, defineShape.Id, 1, new MatrixTransform(),
ct);
ArrayList buttons = new ArrayList();
buttons.Add(button1);</code><code>[Visual Basic]

'create color transform object
Dim ct As New ColorTransform(0,0,0,1)
'add to button record object
Dim button1 As New ButtonRecord(buttonState, defineShape.Id, 1, New MatrixTransform(), ct)
Dim buttons As New ArrayList()
buttons.Add(button1)</code></example>
    </member>
    <member name="M:Aspose.Flash.Basic.ColorTransform.#ctor(System.Single,System.Single,System.Single)">
      <summary>
            Constructor of ColorTransform class which is initialised with the specified multiply colros terms.
            </summary>
      <param name="red">value to multiply the red colour channel by.</param>
      <param name="green">value to multiply the green colour channel by.</param>
      <param name="blue">value to multiply the blue colour channel by.</param>
      <example>This example shows you how to use ColorTransform(Single, Single, Single) constructor<code>[C#]

//create color transform object
ColorTransform ct = new ColorTransform(1,1,1);
//add to button record object
ButtonRecord button1 = new ButtonRecord(
buttonState, defineShape.Id, 1, new MatrixTransform(),
ct);
ArrayList buttons = new ArrayList();
buttons.Add(button1);</code><code>[Visual Basic]

'create color transform object
Dim ct As New ColorTransform(1,1,1)
'add to button record object
Dim button1 As New ButtonRecord(buttonState, defineShape.Id, 1, New MatrixTransform(), ct)
Dim buttons As New ArrayList()
buttons.Add(button1)</code></example>
    </member>
    <member name="M:Aspose.Flash.Basic.ColorTransform.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Constructor ColorTransform with the specified miltiply terms.
            </summary>
      <param name="red">value to multiply the red colour channel by.</param>
      <param name="green">value to multiply the green colour channel by.</param>
      <param name="blue">value to multiply the blue colour channel by.</param>
      <param name="alpha">value to multiply the alpha colour channel by.</param>
      <example>This example shows you how to use ColorTransform(Single, Single, Single, Single) constructor<code>[C#]

//create color transform object
ColorTransform ct = new ColorTransform(1,1,1,1);
//add to button record object
ButtonRecord button1 = new ButtonRecord(
buttonState, defineShape.Id, 1, new MatrixTransform(),
ct);
ArrayList buttons = new ArrayList();
buttons.Add(button1);</code><code>[Visual Basic]

'create color transform object
Dim ct As New ColorTransform(1,1,1,1)
'add to button record object
Dim button1 As New ButtonRecord(buttonState, defineShape.Id, 1, New MatrixTransform(), ct)
Dim buttons As New ArrayList()
buttons.Add(button1)</code></example>
    </member>
    <member name="M:Aspose.Flash.Basic.ColorTransform.#ctor(System.Single,System.Single,System.Single,System.Int32,System.Int32,System.Int32)">
      <summary>
            Constructor of ColorTransform class is initialised with
            the specified addition and multiplication color terms. 
            </summary>
      <param name="addRed">value to add to the red colour channel.</param>
      <param name="addGreen">value to add to the green colour channel.</param>
      <param name="addBlue">value to add to the blue colour channel.</param>
      <param name="multRed">value to multiply the red colour channel by.</param>
      <param name="multGreen">value to multiply the green colour channel by.</param>
      <param name="multBlue">value to multiply the blue colour channel by.</param>
      <example>This example shows you how to use ColorTransform(Single, Single, Single, Int32, Int32, Int32) constructor<code>[C#]

//create color transform object
ColorTransform ct = new ColorTransform(1,1,1,0,0,0);
//add to button record object
ButtonRecord button1 = new ButtonRecord(
buttonState, defineShape.Id, 1, new MatrixTransform(),
ct);
ArrayList buttons = new ArrayList();
buttons.Add(button1);</code><code>[Visual Basic]

'create color transform object
Dim ct As New ColorTransform(1,1,1,0,0,0)
'add to button record object
Dim button1 As New ButtonRecord(buttonState, defineShape.Id, 1, New MatrixTransform(), ct)
Dim buttons As New ArrayList()
buttons.Add(button1)</code></example>
    </member>
    <member name="M:Aspose.Flash.Basic.ColorTransform.#ctor(System.Single,System.Single,System.Single,System.Single,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Constructor ColorTransform with the specified add and miltiply terms. 
            </summary>
      <param name="multRed">value to multiply the red colour channel by.</param>
      <param name="multGreen">value to multiply the green colour channel by.</param>
      <param name="multBlue">value to multiply the blue colour channel by.</param>
      <param name="multAlpha">value to multiply the alpha colour channel by.</param>
      <param name="addRed">value to add to the red colour channel.</param>
      <param name="addGreen">value to add to the green colour channel.</param>
      <param name="addBlue">value to add to the blue colour channel.</param>
      <param name="addAlpha">value to add to the alpha colour channel.</param>
      <example>This example shows you how to use ColorTransform(Single, Single, Single, Single, Int32, Int32, Int32, Int32) constructor<code>[C#]

//create color transform object
ColorTransform ct = new ColorTransform(1,1,1,1,0,0,0,0);
//add to button record object
ButtonRecord button1 = new ButtonRecord(
buttonState, defineShape.Id, 1, new MatrixTransform(),
ct);
ArrayList buttons = new ArrayList();
buttons.Add(button1);</code><code>[Visual Basic]

'create color transform object
Dim ct As New ColorTransform(1,1,1,1,0,0,0,0)
'add to button record object
Dim button1 As New ButtonRecord(buttonState, defineShape.Id, 1, New MatrixTransform(), ct)
Dim buttons As New ArrayList()
buttons.Add(button1)</code></example>
    </member>
    <member name="M:Aspose.Flash.Basic.ColorTransform.IsEqual(Aspose.Flash.Basic.ColorTransform)">
      <summary>
            Determines whether the specified color transform is equal to another.
            </summary>
      <param name="colorTransform">The color transform.</param>
      <returns>
        <c>true</c> if the specified color transform is equal; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="P:Aspose.Flash.Basic.ColorTransform.RedMultTerm">
      <summary>
            Returns or sets a multiply term for the red channel.
            Read/write <see cref="T:System.Single" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Basic.ColorTransform.GreenMultTerm">
      <summary>
            Returns or sets a multiply term for the green channel.
            Read/write <see cref="T:System.Single" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Basic.ColorTransform.BlueMultTerm">
      <summary>
            Returns or sets a multiply term for the blue channel.
            Read/write <see cref="T:System.Single" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Basic.ColorTransform.AlphaMultiTerm">
      <summary>
            Returns or sets a multiply term for the alpha channel.
            Read/write <see cref="T:System.Single" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Basic.ColorTransform.RedAddTerm">
      <summary>
            Returns or sets an add term for the red channel. 
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Basic.ColorTransform.GreenAddTerm">
      <summary>
            Returns or sets an add term for the green channel. 
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Basic.ColorTransform.BlueAddTerm">
      <summary>
            Returns or sets an add term for the blue channel.
            Read/write <see cref="T:System.Int32" />.
             </summary>
    </member>
    <member name="P:Aspose.Flash.Basic.ColorTransform.AlphaAddTerm">
      <summary>
            Returns or sets an add term for the alpha channel.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Basic.MatrixTransform">
      <summary>
            MatrixTransform is used to specify two-dimensional coordinate transforms,
            allowing an object to be scaled, rotated or moved without changing
            the original definition of how the object is drawn.
            </summary>
      <example>This example shows you how to use MatrixTransform class<code>[C#]

//create shape manager object
ShapeManager shapeManager = new ShapeManager();
//generate new identifier
identifier = flash.NewIdentifier();
//add new line style
shapeManager.Add(new SolidLine(0, Color.White));
//create new MatrixTransform
MatrixTransform m = new MatrixTransform();
//scale using matrix transform object
m.Scale(20, 20);
//add matrix transform to the shape manager object
shapeManager.Add(new BitmapFill(FillStyleType.ClippedBitmapFill, defineImage.Id, m));</code><code>[Visual Basic]

'create shape manager object
Dim shapeManager As New ShapeManager()
'generate new identifier
identifier = flash.NewIdentifier()
'add new line style
shapeManager.Add(New SolidLine(0, Color.White))
'create new MatrixTransform
Dim m As New MatrixTransform()
'scale using matrix transform object
m.Scale(20, 20)
'add matrix transform to the shape manager object
shapeManager.Add(New BitmapFill(FillStyleType.ClippedBitmapFill, defineImage.Id, m))</code></example>
    </member>
    <member name="M:Aspose.Flash.Basic.MatrixTransform.#ctor">
      <summary>
            Default constructor.
            </summary>
      <example>This example shows you how to use MatrixTransform() constructor<code>[Visual Basic]

'create shape manager object
Dim shapeManager As New ShapeManager()
'generate new identifier
identifier = flash.NewIdentifier()
'add new line style
shapeManager.Add(New SolidLine(0, Color.White))
'create new MatrixTransform
Dim m As New MatrixTransform()
'scale using matrix transform object
m.Scale(20, 20)
'add matrix transform to the shape manager object
shapeManager.Add(New BitmapFill(FillStyleType.ClippedBitmapFill, defineImage.Id, m))</code></example>
      <example>This example shows you how to use MatrixTransform constructor<code>[C#]

//create shape manager object
ShapeManager shapeManager = new ShapeManager();
//generate new identifier
identifier = flash.NewIdentifier();
//add new line style
shapeManager.Add(new SolidLine(0, Color.White));
//create new MatrixTransform
MatrixTransform m = new MatrixTransform();
//scale using matrix transform object
m.Scale(20, 20);
//add matrix transform to the shape manager object
shapeManager.Add(new BitmapFill(FillStyleType.ClippedBitmapFill, defineImage.Id, m));</code></example>
    </member>
    <member name="M:Aspose.Flash.Basic.MatrixTransform.#ctor(System.Int32,System.Int32)">
      <summary>
            Constructor of the MatrixTransform class with the specified translate values.
            </summary>
      <param name="x">The x value by which to translate this MatrixTransform.</param>
      <param name="y">The y value by which to translate this MatrixTransform.</param>
      <example>This example shows you how to use MatrixTransform(Int32, Int32) constructor<code>[C#]

//create shape manager object
ShapeManager shapeManager = new ShapeManager();
//generate new identifier
identifier = flash.NewIdentifier();
//add new line style
shapeManager.Add(new SolidLine(0, Color.White));
//create new MatrixTransform
MatrixTransform m = new MatrixTransform(200,200);
//add matrix transform to the shape manager object
shapeManager.Add(new BitmapFill(FillStyleType.ClippedBitmapFill, defineImage.Id, m));</code><code>[Visual Basic]

'create shape manager object
Dim shapeManager As New ShapeManager()
'generate new identifier
identifier = flash.NewIdentifier()
'add new line style
shapeManager.Add(New SolidLine(0, Color.White))
'create new MatrixTransform
Dim m As New MatrixTransform(200,200)
'add matrix transform to the shape manager object
shapeManager.Add(New BitmapFill(FillStyleType.ClippedBitmapFill, defineImage.Id, m))</code></example>
      <example>This example shows you how to use Translate method<code>[Visual Basic]

'create shape manager object
Dim shapeManager As New ShapeManager()
'generate new identifier
identifier = flash.NewIdentifier()
'add new line style
shapeManager.Add(New SolidLine(0, Color.White))
'create new MatrixTransform
Dim m As New MatrixTransform()
'Translate using matrix transform object
m.Translate(400,400)
'add matrix transform to the shape manager object
shapeManager.Add(New BitmapFill(FillStyleType.ClippedBitmapFill, defineImage.Id, m))</code></example>
    </member>
    <member name="M:Aspose.Flash.Basic.MatrixTransform.#ctor(System.Int32,System.Int32,System.Double,System.Double)">
      <summary>
            Constructor of the MatrixTransform class with the specified translate and scale values.
            </summary>
      <param name="x">The x value by which to translate this MatrixTransform.</param>
      <param name="y">The y value by which to translate this MatrixTransform.</param>
      <param name="scaleX">The value by which to scale this MatrixTransform in the x-axis direction.</param>
      <param name="scaleY">The value by which to scale this MatrixTransform in the y-axis direction.</param>
      <example>This example shows you how to use MatrixTransform(Int32, Int32, Double, Double) constructor<code>[C#]

//create shape manager object
ShapeManager shapeManager = new ShapeManager();
//generate new identifier
identifier = flash.NewIdentifier();
//add new line style
shapeManager.Add(new SolidLine(0, Color.White));
//create new MatrixTransform
MatrixTransform m = new MatrixTransform(200,200,400,400);
//add matrix transform to the shape manager object
shapeManager.Add(new BitmapFill(FillStyleType.ClippedBitmapFill, defineImage.Id, m));</code><code>[Visual Basic]

'create shape manager object
Dim shapeManager As New ShapeManager()
'generate new identifier
identifier = flash.NewIdentifier()
'add new line style
shapeManager.Add(New SolidLine(0, Color.White))
'create new MatrixTransform
Dim m As New MatrixTransform(200,200,400,400)
'add matrix transform to the shape manager object
shapeManager.Add(New BitmapFill(FillStyleType.ClippedBitmapFill, defineImage.Id, m))</code></example>
    </member>
    <member name="M:Aspose.Flash.Basic.MatrixTransform.#ctor(System.Single[][])">
      <summary>
            Constructor of the MatrixTransform class with the specified 3x3 array of matrix transformations.
            </summary>
      <param name="aMatrix">3x3 array of matrix transformations.</param>
    </member>
    <member name="M:Aspose.Flash.Basic.MatrixTransform.#ctor(System.Drawing.Drawing2D.Matrix)">
      <summary>
            Constructor of the MatrixTransform class from the specified <see cref="T:System.Drawing.Drawing2D.Matrix" /> object.
            </summary>
      <param name="matrix">
        <see cref="T:System.Drawing.Drawing2D.Matrix" /> object.</param>
    </member>
    <member name="M:Aspose.Flash.Basic.MatrixTransform.Reflection(System.Int32,System.Int32)">
      <summary>
            Applies the specified translation vector to this MatrixTransform object.
            </summary>
      <param name="x">The x value by which to translate this MatrixTransform.</param>
      <param name="y">The y value by which to translate this MatrixTransform.</param>
    </member>
    <member name="M:Aspose.Flash.Basic.MatrixTransform.Translate(System.Int32,System.Int32)">
      <summary>
            Applies the specified translation vector to this MatrixTransform object.
            </summary>
      <param name="x">The x value by which to translate this MatrixTransform.</param>
      <param name="y">The y value by which to translate this MatrixTransform.</param>
      <example>This example shows you how to use Translate method<code>[C#]

//create shape manager object
ShapeManager shapeManager = new ShapeManager();
//generate new identifier
identifier = flash.NewIdentifier();
//add new line style
shapeManager.Add(new SolidLine(0, Color.White));
//create new MatrixTransform
MatrixTransform m = new MatrixTransform();
//Translate using matrix transform object
m.Translate(400,400);
//add matrix transform to the shape manager object
shapeManager.Add(new BitmapFill(FillStyleType.ClippedBitmapFill, defineImage.Id, m));</code></example>
    </member>
    <member name="M:Aspose.Flash.Basic.MatrixTransform.Scale(System.Single,System.Single)">
      <summary>
            Applies the specified scale vector to this MatrixTransform object.
            </summary>
      <param name="x">The value by which to scale this MatrixTransform in the x-axis direction.</param>
      <param name="y">The value by which to scale this MatrixTransform in the y-axis direction.</param>
      <example>This example shows you how to use scale method<code>[C#]

//create shape manager object
ShapeManager shapeManager = new ShapeManager();
//generate new identifier
identifier = flash.NewIdentifier();
//add new line style
shapeManager.Add(new SolidLine(0, Color.White));
//create new MatrixTransform
MatrixTransform m = new MatrixTransform();
//scale using matrix transform object
m.Scale(100,100);
//add matrix transform to the shape manager object
shapeManager.Add(new BitmapFill(FillStyleType.ClippedBitmapFill, defineImage.Id, m));</code><code>[Visual Basic]

'create shape manager object
Dim shapeManager As New ShapeManager()
'generate new identifier
identifier = flash.NewIdentifier()
'add new line style
shapeManager.Add(New SolidLine(0, Color.White))
'create new MatrixTransform
Dim m As New MatrixTransform()
'scale using matrix transform object
m.Scale(100,100)
'add matrix transform to the shape manager object
shapeManager.Add(New BitmapFill(FillStyleType.ClippedBitmapFill, defineImage.Id, m))</code></example>
    </member>
    <member name="M:Aspose.Flash.Basic.MatrixTransform.Rotate(System.Double)">
      <summary>
            Applies a clockwise rotation of the specified angle
            about the origin to this MatrixTransform object.
            </summary>
      <param name="angle">The angle of the rotation.</param>
      <example>This example shows you how to use Rotate method<code>[C#]

//create shape manager object
ShapeManager shapeManager = new ShapeManager();
//generate new identifier
identifier = flash.NewIdentifier();
//add new line style
shapeManager.Add(new SolidLine(0, Color.White));
//create new MatrixTransform
MatrixTransform m = new MatrixTransform();
//scale using matrix transform object
m.Rotate(90);
//add matrix transform to the shape manager object
shapeManager.Add(new BitmapFill(FillStyleType.ClippedBitmapFill, defineImage.Id, m));</code><code>[Visual Basic]

'create shape manager object
Dim shapeManager As New ShapeManager()
'generate new identifier
identifier = flash.NewIdentifier()
'add new line style
shapeManager.Add(New SolidLine(0, Color.White))
'create new MatrixTransform
Dim m As New MatrixTransform()
'scale using matrix transform object
m.Rotate(90)
'add matrix transform to the shape manager object
shapeManager.Add(New BitmapFill(FillStyleType.ClippedBitmapFill, defineImage.Id, m))</code></example>
      <example>This example shows you how to use Rotate(Double) method<code>[C#]

//create shape manager object
ShapeManager shapeManager = new ShapeManager();
//generate new identifier
identifier = flash.NewIdentifier();
//add new line style
shapeManager.Add(new SolidLine(0, Color.White));
//create new MatrixTransform
MatrixTransform m = new MatrixTransform();
//rotate using matrix transform object
m.Rotate(90);
//add matrix transform to the shape manager object
shapeManager.Add(new BitmapFill(FillStyleType.ClippedBitmapFill, defineImage.Id, m));</code><code>[Visual Basic]

'create shape manager object
Dim shapeManager As New ShapeManager()
'generate new identifier
identifier = flash.NewIdentifier()
'add new line style
shapeManager.Add(New SolidLine(0, Color.White))
'create new MatrixTransform
Dim m As New MatrixTransform()
'rotate using matrix transform object
m.Rotate(90)
'add matrix transform to the shape manager object
shapeManager.Add(New BitmapFill(FillStyleType.ClippedBitmapFill, defineImage.Id, m))</code></example>
    </member>
    <member name="M:Aspose.Flash.Basic.MatrixTransform.Shear(System.Single,System.Single)">
      <summary>
            Applies the specified shear vector to this MatrixTransform.
            </summary>
      <param name="x">The horizontal shear factor.</param>
      <param name="y">The vertical shear factor.</param>
      <example>This example shows you how to use Shear method<code>[C#]

//create shape manager object
ShapeManager shapeManager = new ShapeManager();
//generate new identifier
identifier = flash.NewIdentifier();
//add new line style
shapeManager.Add(new SolidLine(0, Color.White));
//create new MatrixTransform
MatrixTransform m = new MatrixTransform();
//Shear using matrix transform object
m.Shear(200,200);
//add matrix transform to the shape manager object
shapeManager.Add(new BitmapFill(FillStyleType.ClippedBitmapFill, defineImage.Id, m));</code><code>[Visual Basic]

'create shape manager object
Dim shapeManager As New ShapeManager()
'generate new identifier
identifier = flash.NewIdentifier()
'add new line style
shapeManager.Add(New SolidLine(0, Color.White))
'create new MatrixTransform
Dim m As New MatrixTransform()
'Shear using matrix transform object
m.Shear(200,200)
'add matrix transform to the shape manager object
shapeManager.Add(New BitmapFill(FillStyleType.ClippedBitmapFill, defineImage.Id, m))</code></example>
    </member>
    <member name="M:Aspose.Flash.Basic.MatrixTransform.TransformPoint(System.Int32,System.Int32)">
      <summary> 
            Applies the geometric transform this MatrixTransform object represents to a point.
            </summary>
      <param name="x">The x-coordinate of a point.</param>
      <param name="y">The y-coordinate of a point.</param>
      <returns>The array containing the coordinates of a transformed point.</returns>
    </member>
    <member name="M:Aspose.Flash.Basic.MatrixTransform.TransformPoint(System.Drawing.Point)">
      <summary> 
            Applies the geometric transform this MatrixTransform object represents to a point.
            </summary>
      <param name="p">The source point.</param>
      <returns>The transformed point.</returns>
    </member>
    <member name="M:Aspose.Flash.Basic.MatrixTransform.Composite(Aspose.Flash.Basic.MatrixTransform)">
      <summary>
            Composite (multiply) MatrixTransform with another MatrixTransform object.
            This method is used to create multiple transformation effects that can be applied
            to an object in a single step. Using the instance method fixes the order in which
            the transforms are composited. Since matrix multiplication is not commutative
            this limits the number of complex transforms that can be generated when compared
            to the class method.
            </summary>
      <param name="transform">The MatrixTransform object to composite with this instance.</param>
    </member>
    <member name="M:Aspose.Flash.Basic.MatrixTransform.IsEqual(Aspose.Flash.Basic.MatrixTransform)">
      <summary>
            Determines whether the specified matrix is equal to another.
            </summary>
      <param name="matrix">The matrix.</param>
      <returns>
        <c>true</c> if the specified matrix is equal; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="P:Aspose.Flash.Basic.MatrixTransform.Elements">
      <summary>
            Returns or sets the 3x3 array that is used to store the transformation values.
            Read/write <see cref="T:System.Single" />[][].
            </summary>
    </member>
    <member name="P:Aspose.Flash.Basic.MatrixTransform.UnityTransform">
      <summary>
            Returns true if the values in the transformation matrix represents a unity transform.
            The transform which will not change the physical appearance or location of a shape.
            Read-only <see cref="T:System.Boolean" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Basic.Rect">
      <summary>
            Represents rectangular region described by the top left corner and
            the bottom right corner coordinates.
            </summary>
      <example>This example shows you how to use Rect class<code>[C#]

//create an array list
ArrayList defineButton = new ArrayList();
// define shape for button
ArrayList listShape = new ArrayList();
//create new RGB object
RGB rgb = new RGB(204, 204, 204, 255);
//add rgb to solid fill object
listShape.Add(new SolidFill(rgb));
ArrayList listLine = new ArrayList();
RGB rgb2 = new RGB(0, 0, 0, 255);
//add rdb to solid line object
listLine.Add(new SolidLine(20, rgb2));
Shape shape = new Shape();
//create new style change record
StyleChangeRecord scr = new StyleChangeRecord(1600, 450);
//select overlap fill style
scr.OverlapFillStyle = 1;
//select line style
scr.LineStyle = 1;
//add style change record to shape object
shape.Add(scr);
//add four straight edge records to shape object
shape.Add(new StraightEdgeRecord(-1600, 0));
shape.Add(new StraightEdgeRecord(0, -450));
shape.Add(new StraightEdgeRecord(1600, 0));
shape.Add(new StraightEdgeRecord(0, 450));
//create a Rect object
Rect rect = new Rect(-10, -10, 1610, 460);
//define shape and add rect object ot it
DefineShape defineShape =
new DefineShape(shapeId, rect, listShape, listLine, shape);
//add define shape object to define button object
defineButton.Add(defineShape);</code><code>[Visual Basic]

'create an array list
Dim defineButton As New ArrayList()
' define shape for button
Dim listShape As New ArrayList()
'create new RGB object
Dim rgb As New RGB(204, 204, 204, 255)
'add rgb to solid fill object
listShape.Add(New SolidFill(rgb))
Dim listLine As New ArrayList()
Dim rgb2 As New RGB(0, 0, 0, 255)
'add rdb to solid line object
listLine.Add(New SolidLine(20, rgb2))
Dim shape As New Shape()
'create new style change record
Dim scr As New StyleChangeRecord(1600, 450)
'select overlap fill style
scr.OverlapFillStyle = 1
'select line style
scr.LineStyle = 1
'add style change record to shape object
shape.Add(scr)
'add four straight edge records to shape object
shape.Add(New StraightEdgeRecord(-1600, 0))
shape.Add(New StraightEdgeRecord(0, -450))
shape.Add(New StraightEdgeRecord(1600, 0))
shape.Add(New StraightEdgeRecord(0, 450))
'create a Rect object
Dim rect As New Rect(-10, -10, 1610, 460)
'define shape and add rect object ot it
Dim defineShape As New DefineShape(shapeId, rect, listShape, listLine, shape)
'add define shape object to define button object
defineButton.Add(defineShape)</code></example>
    </member>
    <member name="M:Aspose.Flash.Basic.Rect.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Creates a Rect object with the top left corner at (x1,y1)
            and the bottom right corner at (x2, y2).
            </summary>
      <param name="x1">x-coordinate of the top left corner.</param>
      <param name="y1">y-coordinate of the top left corner.</param>
      <param name="x2">x-coordinate of bottom right corner.</param>
      <param name="y2">y-coordinate of bottom right corner.</param>
      <example>This example shows you how to use Rect constructor<code>[C#]

//create an array list
ArrayList defineButton = new ArrayList();
// define shape for button
ArrayList listShape = new ArrayList();
//create new RGB object
RGB rgb = new RGB(204, 204, 204, 255);
//add rgb to solid fill object
listShape.Add(new SolidFill(rgb));
ArrayList listLine = new ArrayList();
RGB rgb2 = new RGB(0, 0, 0, 255);
//add rdb to solid line object
listLine.Add(new SolidLine(20, rgb2));
Shape shape = new Shape();
//create new style change record
StyleChangeRecord scr = new StyleChangeRecord(1600, 450);
//select overlap fill style
scr.OverlapFillStyle = 1;
//select line style
scr.LineStyle = 1;
//add style change record to shape object
shape.Add(scr);
//add four straight edge records to shape object
shape.Add(new StraightEdgeRecord(-1600, 0));
shape.Add(new StraightEdgeRecord(0, -450));
shape.Add(new StraightEdgeRecord(1600, 0));
shape.Add(new StraightEdgeRecord(0, 450));
//create a Rect object
Rect rect = new Rect(-10, -10, 1610, 460);
//define shape and add rect object ot it
DefineShape defineShape =
new DefineShape(shapeId, rect, listShape, listLine, shape);
//add define shape object to define button object
defineButton.Add(defineShape);</code><code>[Visual Basic]

'create an array list
Dim defineButton As New ArrayList()
' define shape for button
Dim listShape As New ArrayList()
'create new RGB object
Dim rgb As New RGB(204, 204, 204, 255)
'add rgb to solid fill object
listShape.Add(New SolidFill(rgb))
Dim listLine As New ArrayList()
Dim rgb2 As New RGB(0, 0, 0, 255)
'add rdb to solid line object
listLine.Add(New SolidLine(20, rgb2))
Dim shape As New Shape()
'create new style change record
Dim scr As New StyleChangeRecord(1600, 450)
'select overlap fill style
scr.OverlapFillStyle = 1
'select line style
scr.LineStyle = 1
'add style change record to shape object
shape.Add(scr)
'add four straight edge records to shape object
shape.Add(New StraightEdgeRecord(-1600, 0))
shape.Add(New StraightEdgeRecord(0, -450))
shape.Add(New StraightEdgeRecord(1600, 0))
shape.Add(New StraightEdgeRecord(0, 450))
'create a Rect object
Dim rect As New Rect(-10, -10, 1610, 460)
'define shape and add rect object ot it
Dim defineShape As New DefineShape(shapeId, rect, listShape, listLine, shape)
'add define shape object to define button object
defineButton.Add(defineShape)</code></example>
    </member>
    <member name="M:Aspose.Flash.Basic.Rect.Clone">
      <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
      <returns>A new object that is a copy of this instance.</returns>
    </member>
    <member name="M:Aspose.Flash.Basic.Rect.IsEqual(Aspose.Flash.Basic.Rect)">
      <summary>
            Determines whether the specified rect is equal to this instance.
            </summary>
      <param name="rect">The rect.</param>
      <returns>
        <c>true</c> if the specified rect is equal; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="P:Aspose.Flash.Basic.Rect.XMin">
      <summary>
            Returns or sets the X minimum position of a rectangle in twips.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Basic.Rect.XMax">
      <summary>
            Returns or sets the X maximum position of a rectangle in twips.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Basic.Rect.YMin">
      <summary>
            Returns or sets the Y minimum position of a rectangle in twips.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Basic.Rect.YMax">
      <summary>
            Returns or sets the Y maximum position of a rectangle in twips.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Basic.Rect.X">
      <summary>
            Returns or sets the X coordinate of the top left corner in twips.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Basic.Rect.Y">
      <summary>
            Returns or sets the Y coordinate of the bottom right corner in twips.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Basic.Rect.Width">
      <summary>
            Returns the width of a rectangle in twips.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Basic.Rect.Height">
      <summary>
            Returns the height of a rectangle in twips.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Basic.RGB">
      <summary>
            The RGB class represents an RGB as a 24-bit red, green, blue value and alpha.
            </summary>
      <example>This example shows you how to use RGB class<code>[C#]

//create an array list
ArrayList defineButton = new ArrayList();
// define shape for button
ArrayList listShape = new ArrayList();
//create new RGB object
RGB rgb = new RGB(204, 204, 204, 255);
//add rgb to solid fill object
listShape.Add(new SolidFill(rgb));
ArrayList listLine = new ArrayList();
RGB rgb2 = new RGB(0, 0, 0, 255);
//add rdb to solid line object
listLine.Add(new SolidLine(20, rgb2));
Shape shape = new Shape();
//create new style change record
StyleChangeRecord scr = new StyleChangeRecord(1600, 450);
//select overlap fill style
scr.OverlapFillStyle = 1;
//select line style
scr.LineStyle = 1;
//add style change record to shape object
shape.Add(scr);
//add four straight edge records to shape object
shape.Add(new StraightEdgeRecord(-1600, 0));
shape.Add(new StraightEdgeRecord(0, -450));
shape.Add(new StraightEdgeRecord(1600, 0));
shape.Add(new StraightEdgeRecord(0, 450));
//create a Rect object
Rect rect = new Rect(-10, -10, 1610, 460);
//define shape and add rect object ot it
DefineShape defineShape =
new DefineShape(shapeId, rect, listShape, listLine, shape);
//add define shape object to define button object
defineButton.Add(defineShape);</code><code>[Visual Basic]

'create an array list
Dim defineButton As New ArrayList()
' define shape for button
Dim listShape As New ArrayList()
'create new RGB object
Dim rgb As New RGB(204, 204, 204, 255)
'add rgb to solid fill object
listShape.Add(New SolidFill(rgb))
Dim listLine As New ArrayList()
Dim rgb2 As New RGB(0, 0, 0, 255)
'add rdb to solid line object
listLine.Add(New SolidLine(20, rgb2))
Dim shape As New Shape()
'create new style change record
Dim scr As New StyleChangeRecord(1600, 450)
'select overlap fill style
scr.OverlapFillStyle = 1
'select line style
scr.LineStyle = 1
'add style change record to shape object
shape.Add(scr)
'add four straight edge records to shape object
shape.Add(New StraightEdgeRecord(-1600, 0))
shape.Add(New StraightEdgeRecord(0, -450))
shape.Add(New StraightEdgeRecord(1600, 0))
shape.Add(New StraightEdgeRecord(0, 450))
'create a Rect object
Dim rect As New Rect(-10, -10, 1610, 460)
'define shape and add rect object ot it
Dim defineShape As New DefineShape(shapeId, rect, listShape, listLine, shape)
'add define shape object to define button object
defineButton.Add(defineShape)</code></example>
    </member>
    <member name="M:Aspose.Flash.Basic.RGB.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>
            Constructor of the RBG class without Alpha.
            </summary>
      <param name="red">The value for the red channel.</param>
      <param name="green">The value for the green channel.</param>
      <param name="blue">The value for the blue channel.</param>
      <example>This example shows you how to use RGB(Int32,Int32,Int32) constructor<code>[C#]

//create an array list
ArrayList defineButton = new ArrayList();
// define shape for button
ArrayList listShape = new ArrayList();
//create new RGB object
RGB rgb = new RGB(204, 204, 204);
//add rgb to solid fill object
listShape.Add(new SolidFill(rgb));
ArrayList listLine = new ArrayList();
RGB rgb2 = new RGB(0, 0, 0);
//add rdb to solid line object
listLine.Add(new SolidLine(20, rgb2));
Shape shape = new Shape();
//create new style change record
StyleChangeRecord scr = new StyleChangeRecord(1600, 450);
//select overlap fill style
scr.OverlapFillStyle = 1;
//select line style
scr.LineStyle = 1;
//add style change record to shape object
shape.Add(scr);
//add four straight edge records to shape object
shape.Add(new StraightEdgeRecord(-1600, 0));
shape.Add(new StraightEdgeRecord(0, -450));
shape.Add(new StraightEdgeRecord(1600, 0));
shape.Add(new StraightEdgeRecord(0, 450));
//create a Rect object
Rect rect = new Rect(-10, -10, 1610, 460);
//define shape and add rect object ot it
DefineShape defineShape =
new DefineShape(shapeId, rect, listShape, listLine, shape);
//add define shape object to define button object
defineButton.Add(defineShape);</code><code>[Visual Basic]

'create an array list
Dim defineButton As New ArrayList()
' define shape for button
Dim listShape As New ArrayList()
'create new RGB object
Dim rgb As New RGB(204, 204, 204)
'add rgb to solid fill object
listShape.Add(New SolidFill(rgb))
Dim listLine As New ArrayList()
Dim rgb2 As New RGB(0, 0, 0)
'add rdb to solid line object
listLine.Add(New SolidLine(20, rgb2))
Dim shape As New Shape()
'create new style change record
Dim scr As New StyleChangeRecord(1600, 450)
'select overlap fill style
scr.OverlapFillStyle = 1
'select line style
scr.LineStyle = 1
'add style change record to shape object
shape.Add(scr)
'add four straight edge records to shape object
shape.Add(New StraightEdgeRecord(-1600, 0))
shape.Add(New StraightEdgeRecord(0, -450))
shape.Add(New StraightEdgeRecord(1600, 0))
shape.Add(New StraightEdgeRecord(0, 450))
'create a Rect object
Dim rect As New Rect(-10, -10, 1610, 460)
'define shape and add rect object ot it
Dim defineShape As New DefineShape(shapeId, rect, listShape, listLine, shape)
'add define shape object to define button object
defineButton.Add(defineShape)</code></example>
    </member>
    <member name="M:Aspose.Flash.Basic.RGB.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Constructor of the RBG class with Alpha.
            </summary>
      <param name="red">The value for the red channel.</param>
      <param name="green">The value for the green channel.</param>
      <param name="blue">The value for the blue channel.</param>
      <param name="alpha">The value for the alpha channel.</param>
      <example>This example shows you how to use RGB(Int32,Int32,Int32, Int32) constructor<code>[C#]

//create an array list
ArrayList defineButton = new ArrayList();
// define shape for button
ArrayList listShape = new ArrayList();
//create new RGB object
RGB rgb = new RGB(204, 204, 204, 255);
//add rgb to solid fill object
listShape.Add(new SolidFill(rgb));
ArrayList listLine = new ArrayList();
RGB rgb2 = new RGB(0, 0, 0, 255);
//add rdb to solid line object
listLine.Add(new SolidLine(20, rgb2));
Shape shape = new Shape();
//create new style change record
StyleChangeRecord scr = new StyleChangeRecord(1600, 450);
//select overlap fill style
scr.OverlapFillStyle = 1;
//select line style
scr.LineStyle = 1;
//add style change record to shape object
shape.Add(scr);
//add four straight edge records to shape object
shape.Add(new StraightEdgeRecord(-1600, 0));
shape.Add(new StraightEdgeRecord(0, -450));
shape.Add(new StraightEdgeRecord(1600, 0));
shape.Add(new StraightEdgeRecord(0, 450));
//create a Rect object
Rect rect = new Rect(-10, -10, 1610, 460);
//define shape and add rect object ot it
DefineShape defineShape =
new DefineShape(shapeId, rect, listShape, listLine, shape);
//add define shape object to define button object
defineButton.Add(defineShape);</code><code>[Visual Basic]

'create an array list
Dim defineButton As New ArrayList()
' define shape for button
Dim listShape As New ArrayList()
'create new RGB object
Dim rgb As New RGB(204, 204, 204, 255)
'add rgb to solid fill object
listShape.Add(New SolidFill(rgb))
Dim listLine As New ArrayList()
Dim rgb2 As New RGB(0, 0, 0, 255)
'add rdb to solid line object
listLine.Add(New SolidLine(20, rgb2))
Dim shape As New Shape()
'create new style change record
Dim scr As New StyleChangeRecord(1600, 450)
'select overlap fill style
scr.OverlapFillStyle = 1
'select line style
scr.LineStyle = 1
'add style change record to shape object
shape.Add(scr)
'add four straight edge records to shape object
shape.Add(New StraightEdgeRecord(-1600, 0))
shape.Add(New StraightEdgeRecord(0, -450))
shape.Add(New StraightEdgeRecord(1600, 0))
shape.Add(New StraightEdgeRecord(0, 450))
'create a Rect object
Dim rect As New Rect(-10, -10, 1610, 460)
'define shape and add rect object ot it
Dim defineShape As New DefineShape(shapeId, rect, listShape, listLine, shape)
'add define shape object to define button object
defineButton.Add(defineShape)</code></example>
    </member>
    <member name="M:Aspose.Flash.Basic.RGB.#ctor(System.Drawing.Color)">
      <summary>
            Constructs RGB class from a <see cref="P:Aspose.Flash.Basic.RGB.Color" /> object.
            </summary>
      <param name="color">The source color.</param>
      <example>This example shows you how to use RGB(Color) constructor<code>[C#]

//create an array list
ArrayList defineButton = new ArrayList();
// define shape for button
ArrayList listShape = new ArrayList();
//create a color object
Color color = new Color();
color = Color.FromName("Blue");
//create new RGB object
RGB rgb = new RGB(color);
//add rgb to solid fill object
listShape.Add(new SolidFill(rgb));
ArrayList listLine = new ArrayList();
//create a color object
Color color = new Color();
color = Color.FromName("Black");
//create new RGB object
RGB rgb2 = new RGB(color);
//add rdb to solid line object
listLine.Add(new SolidLine(20, rgb2));
Shape shape = new Shape();
//create new style change record
StyleChangeRecord scr = new StyleChangeRecord(1600, 450);
//select overlap fill style
scr.OverlapFillStyle = 1;
//select line style
scr.LineStyle = 1;
//add style change record to shape object
shape.Add(scr);
//add four straight edge records to shape object
shape.Add(new StraightEdgeRecord(-1600, 0));
shape.Add(new StraightEdgeRecord(0, -450));
shape.Add(new StraightEdgeRecord(1600, 0));
shape.Add(new StraightEdgeRecord(0, 450));
//create a Rect object
Rect rect = new Rect(-10, -10, 1610, 460);
//define shape and add rect object ot it
DefineShape defineShape =
new DefineShape(shapeId, rect, listShape, listLine, shape);
//add define shape object to define button object
defineButton.Add(defineShape);</code><code>[Visual Basic]

'create an array list
Dim defineButton As New ArrayList()
' define shape for button
Dim listShape As New ArrayList()
'create a color object
Dim color As New Color()
color = Color.FromName("Blue")
'create new RGB object
Dim rgb As New RGB(color)
'add rgb to solid fill object
listShape.Add(New SolidFill(rgb))
Dim listLine As New ArrayList()
'create a color object
Dim color As New Color()
color = Color.FromName("Black")
'create new RGB object
Dim rgb2 As New RGB(color)
'add rdb to solid line object
listLine.Add(New SolidLine(20, rgb2))
Dim shape As New Shape()
'create new style change record
Dim scr As New StyleChangeRecord(1600, 450)
'select overlap fill style
scr.OverlapFillStyle = 1
'select line style
scr.LineStyle = 1
'add style change record to shape object
shape.Add(scr)
'add four straight edge records to shape object
shape.Add(New StraightEdgeRecord(-1600, 0))
shape.Add(New StraightEdgeRecord(0, -450))
shape.Add(New StraightEdgeRecord(1600, 0))
shape.Add(New StraightEdgeRecord(0, 450))
'create a Rect object
Dim rect As New Rect(-10, -10, 1610, 460)
'define shape and add rect object ot it
Dim defineShape As New DefineShape(shapeId, rect, listShape, listLine, shape)
'add define shape object to define button object
defineButton.Add(defineShape)</code></example>
    </member>
    <member name="P:Aspose.Flash.Basic.RGB.Red">
      <summary>
            Returns or sets the red channel in the range 0..255.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Basic.RGB.Green">
      <summary>
            Returns or sets the green channel in the range 0..255.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Basic.RGB.Blue">
      <summary>
            Returns or sets the blue channel in the range 0..255.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Basic.RGB.Alpha">
      <summary>
            Returns or sets the alpha channel in the range 0..255.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Basic.RGB.Color">
      <summary>
            Returns or sets the color of the current RGB object.
            Read/write <see cref="P:Aspose.Flash.Basic.RGB.Color" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Swf.FlashObject">
      <summary>
            The FlashObject is the base class for the classes that define the different 
            types of object used to create images, buttons, shapes etc. in a Flash file. 
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.FlashObject.Id">
      <summary>
            Returns or sets unique identifier of the object.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Bitmaps.FlashBitmap">
      <summary>
            Represents an image stored in SWF file.
            </summary>
      <example>This example shows you how to use FlashBitmap class<code>[C#]

//get the identifier from flash object
int identifier = flash.NewIdentifier();
//create image from stream first
Image image = Image.FromStream(stream);
//convert image to bitmap
Bitmap bmp = new Bitmap(image);
//Define flash bitmap  and then add it to the FlashContainer object
FlashBitmap defineImage = new FlashBitmap(
identifier,
FlashBitmapType.FlashBitmapLossless,
false,
bmp);
//add image to the list
list.Add(defineImage);</code><code>[Visual Basic]

'get the identifier from flash object
Dim identifier As Integer = flash.NewIdentifier()
'create image from stream first
Dim image As Image = Image.FromStream(stream)
'convert image to bitmap
Dim bmp As New Bitmap(image)
'Define flash bitmap  and then add it to the FlashContainer object
Dim defineImage As New FlashBitmap(identifier, FlashBitmapType.FlashBitmapLossless, False, bmp)
'add image to the list
list.Add(defineImage)</code></example>
    </member>
    <member name="M:Aspose.Flash.Bitmaps.FlashBitmap.#ctor(System.Int32,Aspose.Flash.Bitmaps.FlashBitmapType,System.Boolean,System.String)">
      <summary>
            This constructor gets a source file path from which the image is read.
            </summary>
      <param name="id">Unique identifier of the new created FlashBitmap object.</param>
      <param name="bmpType">Type of encoding used to store image in SWF file. See <see cref="T:Aspose.Flash.Bitmaps.FlashBitmapType" />.</param>
      <param name="reduceColors">True to reduce image colors to 16 bit. Works with FlashBitmapLossless encoder only.</param>
      <param name="fname">Input file.</param>
      <example>This example shows you how to use FlashBitmap(Int32,FlashBitmapType,Boolean,String) constructor<code>[C#]

//get the identifier from flash object
int identifier = flash.NewIdentifier();
//Define flash bitmap  and then add it to the FlashContainer object
FlashBitmap defineImage = new FlashBitmap(
identifier,
FlashBitmapType.FlashBitmapLossless,
false,
"input.bmp");
//add image to the list
list.Add(defineImage);</code><code>[Visual Basic]

'get the identifier from flash object
Dim identifier As Integer = flash.NewIdentifier()
'Define flash bitmap  and then add it to the FlashContainer object
Dim defineImage As New FlashBitmap(identifier, FlashBitmapType.FlashBitmapLossless, False, "input.bmp")
'add image to the list
list.Add(defineImage)</code></example>
    </member>
    <member name="M:Aspose.Flash.Bitmaps.FlashBitmap.#ctor(System.Int32,Aspose.Flash.Bitmaps.FlashBitmapType,System.Boolean,System.IO.Stream)">
      <summary>
            This constructor gets a source stream from which the image is read.
            </summary>
      <param name="id">Unique identifier of the new created FlashBitmap object.</param>
      <param name="bmpType">Type of encoding used to store image in SWF file. See <see cref="T:Aspose.Flash.Bitmaps.FlashBitmapType" />.</param>
      <param name="reduceColors">True to reduce image colors to 16 bit. Works with FlashBitmapLossless encoder only.</param>
      <param name="istream">Input stream.</param>
      <example>This example shows you how to use FlashBitmap(Int32, FlashBitmapType,Boolean,Stream) constructor<code>[C#]

//get the identifier from flash object
int identifier = flash.NewIdentifier();
//read the bitmap in the stream
FileStream stream = new FileStream("input.bmp",FileMode.Open,FileAccess.Read);
//Define flash bitmap  and then add it to the FlashContainer object
FlashBitmap defineImage = new FlashBitmap(
identifier,
FlashBitmapType.
FlashBitmapLossless,
false,
stream);
//add image to the list
list.Add(defineImage);</code><code>[Visual Basic]

'get the identifier from flash object
Dim identifier As Integer = flash.NewIdentifier()
'read the bitmap in the stream
Dim stream As New FileStream("input.bmp",FileMode.Open,FileAccess.Read)
'Define flash bitmap  and then add it to the FlashContainer object
Dim defineImage As New FlashBitmap(identifier, FlashBitmapType. FlashBitmapLossless, False, stream)
'add image to the list
list.Add(defineImage)</code></example>
    </member>
    <member name="M:Aspose.Flash.Bitmaps.FlashBitmap.#ctor(System.Int32,Aspose.Flash.Bitmaps.FlashBitmapType,System.Boolean,System.Drawing.Image)">
      <summary>
            This constructor gets a source image.
            </summary>
      <param name="id">Unique identifier of the new created FlashBitmap object.</param>
      <param name="bmpType">Type of encoding used to store image in SWF file. See <see cref="T:Aspose.Flash.Bitmaps.FlashBitmapType" />.</param>
      <param name="reduceColors">True to reduce image colors to 16 bit. Works with FlashBitmapLossless encoder only.</param>
      <param name="image">Source image.</param>
      <example>This example shows you how to use FlashBitmap(Int32,FlashBitmapType,Boolean, Image) constructor<code>[C#]

//get the identifier from flash object
int identifier = flash.NewIdentifier();
//create image from stream first
Image image = Image.FromStream(stream);
//convert image to bitmap
Bitmap bmp = new Bitmap(image);
//Define flash bitmap  and then add it to the FlashContainer object
FlashBitmap defineImage = new FlashBitmap(
identifier,
FlashBitmapType.FlashBitmapLossless,
false,
bmp);
//add image to the list
list.Add(defineImage);</code></example>
      <example>This example shows you how to use FlashBitmap(Int32,FlashBitmapType,Boolean,Image) constructor<code>[Visual Basic]

'get the identifier from flash object
Dim identifier As Integer = flash.NewIdentifier()
'create image from stream first
Dim image As Image = Image.FromStream(stream)
'convert image to bitmap
Dim bmp As New Bitmap(image)
'Define flash bitmap  and then add it to the FlashContainer object
Dim defineImage As New FlashBitmap(identifier, FlashBitmapType.FlashBitmapLossless, False, bmp)
'add image to the list
list.Add(defineImage)</code></example>
    </member>
    <member name="P:Aspose.Flash.Bitmaps.FlashBitmap.Width">
      <summary>
            Returns the width of an image.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Bitmaps.FlashBitmap.Height">
      <summary>
            Returns the height of an image.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Bitmaps.FlashBitmap.PixelSize">
      <summary>
            Returns used size of pixel for image, valid for lossless codecs only.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Bitmaps.FlashBitmap.DeblockParam">
      <summary>
            Gets or sets the deblock param.
            Parameter to be fed into the deblocking filter. The parameter
            describes a relative strength of the deblocking filter from 0-
            100% expressed in a normalized 8.8 fixed point format. i.e. this can be set to [0..1.0];
            Valid if <see cref="P:Aspose.Flash.Bitmaps.FlashBitmap.BitmapType" /> is <see cref="F:Aspose.Flash.Bitmaps.FlashBitmapType.FlashBitmapJpegWithAlphaDeblock" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Bitmaps.FlashBitmap.BitmapType">
      <summary>
            Returns used image encoding type.
            Read-only <see cref="T:Aspose.Flash.Bitmaps.FlashBitmapType" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Bitmaps.FlashBitmap.Bitmap">
      <summary>
            Returns or sets the image stored in the FlashBitmap object.
            Read/write <see cref="T:System.Drawing.Bitmap" />.
            </summary>
      <remarks>
            The bitmap is internally cached for speed reasons, so if you change it you should set it back explicitly using setter.
            </remarks>
    </member>
    <member name="T:Aspose.Flash.Bitmaps.FlashBitmapType">
      <summary>
            Represents constants which show how image should be encoded in SWF file.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Bitmaps.FlashBitmapType.FlashBitmapJpeg">
      <summary>
            Image stored in Jpeg format.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Bitmaps.FlashBitmapType.FlashBitmapJpegWithAlpha">
      <summary>
            Image stored in Jpeg format with alpha channel.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Bitmaps.FlashBitmapType.FlashBitmapLossless">
      <summary>
            Image stored as zipped array of pixels.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Bitmaps.FlashBitmapType.FlashBitmapLosslessWithAlpha">
      <summary>
            Image stored as zipped array of pixels with alpha channel.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Bitmaps.FlashBitmapType.FlashBitmapJpegWithAlphaDeblock">
      <summary>
            Image stored in Jpeg with alpha channel,Png or GIF69a format with deblocking parameter.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Bitmaps.JPEGTables">
      <summary>
            JPEGTbales defines encoding table for all JPEG images defined using the DefineBits tag.
            There is may be only one JPEGTables tag in an SWF file. The data in this tag begins with
            the JPEG SOI marker 0xFF, 0xD8 and ends with the EOI marker 0xFF, 0xD9.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Bitmaps.JPEGTables.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Bitmaps.JPEGTables.#ctor(System.Byte[])">
      <summary>
            JPEGTables constructor with the encoding table data.
            </summary>
      <param name="bytes">Encoding table.</param>
    </member>
    <member name="P:Aspose.Flash.Bitmaps.JPEGTables.JPEGData">
      <summary>
            Returns or sets JPEG encoding table data.
            Read/write <see cref="T:System.Byte" />[].
            </summary>
    </member>
    <member name="T:Aspose.Flash.Button.ButtonAction">
      <summary>
            Represents the actions which button can execute in the response to a particular event.
            </summary>
      <example>This example shows you how to use ButtonAction class<code>[C#]

//define array list for button
ArrayList defineButton = new ArrayList();
// define shape for button
ArrayList listShape = new ArrayList();
//add sold fill to shape list
listShape.Add(new SolidFill(new RGB(204, 204, 204, 255)));
//create new line list
ArrayList listLine = new ArrayList();
//add solid line to line fill list
listLine.Add(new SolidLine(20, new RGB(0, 0, 0, 255)));
//create new shape
Shape shape = new Shape();
//create style change record object
StyleChangeRecord scr = new StyleChangeRecord(1600, 450);
scr.OverlapFillStyle = 1;
scr.LineStyle = 1;
//add style change record to shape
shape.Add(scr);
//add straight edge records to shape
shape.Add(new StraightEdgeRecord(-1600, 0));
shape.Add(new StraightEdgeRecord(0, -450));
shape.Add(new StraightEdgeRecord(1600, 0));
shape.Add(new StraightEdgeRecord(0, 450));
//create define shape object
DefineShape defineShape =
new DefineShape(shapeId, new Rect(-10, -10, 1610, 460), listShape, listLine, shape);
//add define shape object to define button array list
defineButton.Add(defineShape);

//Define symbol button
int buttonState = (int)ButtonState.Down | (int)ButtonState.Up |
(int)ButtonState.Over | (int)ButtonState.Active;

//create button record object
ButtonRecord button1 = new ButtonRecord(
buttonState, defineShape.Id, 1, new MatrixTransform(),
new ColorTransform(1, 1, 1, 0, 0, 0));
//create buttons array list
ArrayList buttons = new ArrayList();
//add button record to buttons array list
buttons.Add(button1);
//create actions array list
ArrayList actionArray = new ArrayList();
//create a button action
ButtonAction buttonAction = new ButtonAction((int)ButtonActionType.Press, actionArray);
//create button actions array list
ArrayList buttonActions = new ArrayList();
//add btton action to button actions array list
buttonActions.Add(buttonAction);
//create define button 2 object
DefineButton2 startButton = new DefineButton2(buttonId, false, buttons, buttonActions);
//add define button 2 object to define button array list
defineButton.Add(startButton);

string buttonName = "buttonname";
// place button in movie clip and define button name for ActionScript
PlaceObject2 placeObject = new PlaceObject2(startButton.ButtonId, 1);
placeObject.CharacterType = PlaceType.New;
placeObject.Name = buttonName; // button name
placeObject.MatrixTransform = new MatrixTransform(1190, 2580);
placeObject.Ratio = 3.051804E-05f;
defineButton.Add(placeObject);
defineButton.Add(new ShowFrame());</code><code>[Visual Basic]

'define array list for button
Dim defineButton As New ArrayList()
' define shape for button
Dim listShape As New ArrayList()
'add sold fill to shape list
listShape.Add(New SolidFill(New RGB(204, 204, 204, 255)))
'create new line list
Dim listLine As New ArrayList()
'add solid line to line fill list
listLine.Add(New SolidLine(20, New RGB(0, 0, 0, 255)))
'create new shape
Dim shape As New Shape()
'create style change record object
Dim scr As New StyleChangeRecord(1600, 450)
scr.OverlapFillStyle = 1
scr.LineStyle = 1
'add style change record to shape
shape.Add(scr)
'add straight edge records to shape
shape.Add(New StraightEdgeRecord(-1600, 0))
shape.Add(New StraightEdgeRecord(0, -450))
shape.Add(New StraightEdgeRecord(1600, 0))
shape.Add(New StraightEdgeRecord(0, 450))
'create define shape object
Dim defineShape As New DefineShape(shapeId, New Rect(-10, -10, 1610, 460), listShape, listLine, shape)
'add define shape object to define button array list
defineButton.Add(defineShape)

'Define symbol button
Dim buttonState As Integer = CInt(Fix(ButtonState.Down)) Or CInt(Fix(ButtonState.Up)) Or CInt(Fix(ButtonState.Over)) Or CInt(Fix(ButtonState.Active))

'create button record object
Dim button1 As New ButtonRecord(buttonState, defineShape.Id, 1, New MatrixTransform(), New ColorTransform(1, 1, 1, 0, 0, 0))
'create buttons array list
Dim buttons As New ArrayList()
'add button record to buttons array list
buttons.Add(button1)
'create actions array list
Dim actionArray As New ArrayList()
'create a button action
Dim buttonAction As New ButtonAction(CInt(Fix(ButtonActionType.Press)), actionArray)
'create button actions array list
Dim buttonActions As New ArrayList()
'add btton action to button actions array list
buttonActions.Add(buttonAction)
'create define button 2 object
Dim startButton As New DefineButton2(buttonId, False, buttons, buttonActions)
'add define button 2 object to define button array list
defineButton.Add(startButton)

Dim buttonName As String = "buttonname"
' place button in movie clip and define button name for ActionScript
Dim placeObject As New PlaceObject2(startButton.ButtonId, 1)
placeObject.CharacterType = PlaceType.New
placeObject.Name = buttonName ' button name
placeObject.MatrixTransform = New MatrixTransform(1190, 2580)
placeObject.Ratio = 3.051804E-05f
defineButton.Add(placeObject)
defineButton.Add(New ShowFrame())</code></example>
    </member>
    <member name="M:Aspose.Flash.Button.ButtonAction.CodeForKey(System.Char)">
      <summary>
            Generates the code identifying a particular event using the name of the event.
            </summary>
      <param name="c">The character to generate code for.</param>
    </member>
    <member name="M:Aspose.Flash.Button.ButtonAction.#ctor(System.Int32,System.Collections.ArrayList)">
      <summary>
            ButtonAction constructor.
            </summary>
      <param name="buttonEvent">The button event.</param>
      <param name="buttonActions">The button actions.</param>
      <example>This example shows you how to use ButtonAction(Int32, ArrayList) constructor<code>[C#]

//define array list for button
ArrayList defineButton = new ArrayList();
// define shape for button
ArrayList listShape = new ArrayList();
//add sold fill to shape list
listShape.Add(new SolidFill(new RGB(204, 204, 204, 255)));
//create new line list
ArrayList listLine = new ArrayList();
//add solid line to line fill list
listLine.Add(new SolidLine(20, new RGB(0, 0, 0, 255)));
//create new shape
Shape shape = new Shape();
//create style change record object
StyleChangeRecord scr = new StyleChangeRecord(1600, 450);
scr.OverlapFillStyle = 1;
scr.LineStyle = 1;
//add style change record to shape
shape.Add(scr);
//add straight edge records to shape
shape.Add(new StraightEdgeRecord(-1600, 0));
shape.Add(new StraightEdgeRecord(0, -450));
shape.Add(new StraightEdgeRecord(1600, 0));
shape.Add(new StraightEdgeRecord(0, 450));
//create define shape object
DefineShape defineShape =
new DefineShape(shapeId, new Rect(-10, -10, 1610, 460), listShape, listLine, shape);
//add define shape object to define button array list
defineButton.Add(defineShape);

//Define symbol button
int buttonState = (int)ButtonState.Down | (int)ButtonState.Up |
(int)ButtonState.Over | (int)ButtonState.Active;

//create button record object
ButtonRecord button1 = new ButtonRecord(
buttonState, defineShape.Id, 1, new MatrixTransform(),
new ColorTransform(1, 1, 1, 0, 0, 0));
//create buttons array list
ArrayList buttons = new ArrayList();
//add button record to buttons array list
buttons.Add(button1);
//create actions array list
ArrayList actionArray = new ArrayList();
//create a button action
ButtonAction buttonAction = new ButtonAction((int)ButtonActionType.Press, actionArray);
//create button actions array list
ArrayList buttonActions = new ArrayList();
//add btton action to button actions array list
buttonActions.Add(buttonAction);
//create define button 2 object
DefineButton2 startButton = new DefineButton2(buttonId, false, buttons, buttonActions);
//add define button 2 object to define button array list
defineButton.Add(startButton);

string buttonName = "buttonname";
// place button in movie clip and define button name for ActionScript
PlaceObject2 placeObject = new PlaceObject2(startButton.ButtonId, 1);
placeObject.CharacterType = PlaceType.New;
placeObject.Name = buttonName; // button name
placeObject.MatrixTransform = new MatrixTransform(1190, 2580);
placeObject.Ratio = 3.051804E-05f;
defineButton.Add(placeObject);
defineButton.Add(new ShowFrame());</code><code>[Visual Basic]

'define array list for button
Dim defineButton As New ArrayList()
' define shape for button
Dim listShape As New ArrayList()
'add sold fill to shape list
listShape.Add(New SolidFill(New RGB(204, 204, 204, 255)))
'create new line list
Dim listLine As New ArrayList()
'add solid line to line fill list
listLine.Add(New SolidLine(20, New RGB(0, 0, 0, 255)))
'create new shape
Dim shape As New Shape()
'create style change record object
Dim scr As New StyleChangeRecord(1600, 450)
scr.OverlapFillStyle = 1
scr.LineStyle = 1
'add style change record to shape
shape.Add(scr)
'add straight edge records to shape
shape.Add(New StraightEdgeRecord(-1600, 0))
shape.Add(New StraightEdgeRecord(0, -450))
shape.Add(New StraightEdgeRecord(1600, 0))
shape.Add(New StraightEdgeRecord(0, 450))
'create define shape object
Dim defineShape As New DefineShape(shapeId, New Rect(-10, -10, 1610, 460), listShape, listLine, shape)
'add define shape object to define button array list
defineButton.Add(defineShape)

'Define symbol button
Dim buttonState As Integer = CInt(Fix(ButtonState.Down)) Or CInt(Fix(ButtonState.Up)) Or CInt(Fix(ButtonState.Over)) Or CInt(Fix(ButtonState.Active))

'create button record object
Dim button1 As New ButtonRecord(buttonState, defineShape.Id, 1, New MatrixTransform(), New ColorTransform(1, 1, 1, 0, 0, 0))
'create buttons array list
Dim buttons As New ArrayList()
'add button record to buttons array list
buttons.Add(button1)
'create actions array list
Dim actionArray As New ArrayList()
'create a button action
Dim buttonAction As New ButtonAction(CInt(Fix(ButtonActionType.Press)), actionArray)
'create button actions array list
Dim buttonActions As New ArrayList()
'add btton action to button actions array list
buttonActions.Add(buttonAction)
'create define button 2 object
Dim startButton As New DefineButton2(buttonId, False, buttons, buttonActions)
'add define button 2 object to define button array list
defineButton.Add(startButton)

Dim buttonName As String = "buttonname"
' place button in movie clip and define button name for ActionScript
Dim placeObject As New PlaceObject2(startButton.ButtonId, 1)
placeObject.CharacterType = PlaceType.New
placeObject.Name = buttonName ' button name
placeObject.MatrixTransform = New MatrixTransform(1190, 2580)
placeObject.Ratio = 3.051804E-05f
defineButton.Add(placeObject)
defineButton.Add(New ShowFrame())</code></example>
    </member>
    <member name="M:Aspose.Flash.Button.ButtonAction.#ctor(System.Int32,System.Byte[])">
      <summary>
            ButtonAction constructor.
            </summary>
      <param name="buttonEvent">The button event.</param>
      <param name="encodedActions">The encoded button actions.</param>
      <example>This example shows you how to use ButtonAction(Int32, Byte[]) constructor<code>[C#]

//define array list for button
ArrayList defineButton = new ArrayList();
// define shape for button
ArrayList listShape = new ArrayList();
//add sold fill to shape list
listShape.Add(new SolidFill(new RGB(204, 204, 204, 255)));
//create new line list
ArrayList listLine = new ArrayList();
//add solid line to line fill list
listLine.Add(new SolidLine(20, new RGB(0, 0, 0, 255)));
//create new shape
Shape shape = new Shape();
//create style change record object
StyleChangeRecord scr = new StyleChangeRecord(1600, 450);
scr.OverlapFillStyle = 1;
scr.LineStyle = 1;
//add style change record to shape
shape.Add(scr);
//add straight edge records to shape
shape.Add(new StraightEdgeRecord(-1600, 0));
shape.Add(new StraightEdgeRecord(0, -450));
shape.Add(new StraightEdgeRecord(1600, 0));
shape.Add(new StraightEdgeRecord(0, 450));
//create define shape object
DefineShape defineShape =
new DefineShape(shapeId, new Rect(-10, -10, 1610, 460), listShape, listLine, shape);
//add define shape object to define button array list
defineButton.Add(defineShape);

//Define symbol button
int buttonState = (int)ButtonState.Down | (int)ButtonState.Up |
(int)ButtonState.Over | (int)ButtonState.Active;

//create button record object
ButtonRecord button1 = new ButtonRecord(
buttonState, defineShape.Id, 1, new MatrixTransform(),
new ColorTransform(1, 1, 1, 0, 0, 0));
//create buttons array list
ArrayList buttons = new ArrayList();
//add button record to buttons array list
buttons.Add(button1);
//create actions array list
ArrayList actionArray = new ArrayList();
//create bytes array from array list
Byte[] bytes = new Byte[actionArray.Count];
bytes = (Byte[])actionArray.ToArray(typeof(Byte[]));
//create a button action
ButtonAction buttonAction = new ButtonAction((int)ButtonActionType.Press, bytes);
//create button actions array list
ArrayList buttonActions = new ArrayList();
//add btton action to button actions array list
buttonActions.Add(buttonAction);
//create define button 2 object
DefineButton2 startButton = new DefineButton2(buttonId, false, buttons, buttonActions);
//add define button 2 object to define button array list
defineButton.Add(startButton);

string buttonName = "buttonname";
// place button in movie clip and define button name for ActionScript
PlaceObject2 placeObject = new PlaceObject2(startButton.ButtonId, 1);
placeObject.CharacterType = PlaceType.New;
placeObject.Name = buttonName; // button name
placeObject.MatrixTransform = new MatrixTransform(1190, 2580);
placeObject.Ratio = 3.051804E-05f;
defineButton.Add(placeObject);
defineButton.Add(new ShowFrame());</code><code>[Visual Basic]

'define array list for button
Dim defineButton As New ArrayList()
' define shape for button
Dim listShape As New ArrayList()
'add sold fill to shape list
listShape.Add(New SolidFill(New RGB(204, 204, 204, 255)))
'create new line list
Dim listLine As New ArrayList()
'add solid line to line fill list
listLine.Add(New SolidLine(20, New RGB(0, 0, 0, 255)))
'create new shape
Dim shape As New Shape()
'create style change record object
Dim scr As New StyleChangeRecord(1600, 450)
scr.OverlapFillStyle = 1
scr.LineStyle = 1
'add style change record to shape
shape.Add(scr)
'add straight edge records to shape
shape.Add(New StraightEdgeRecord(-1600, 0))
shape.Add(New StraightEdgeRecord(0, -450))
shape.Add(New StraightEdgeRecord(1600, 0))
shape.Add(New StraightEdgeRecord(0, 450))
'create define shape object
Dim defineShape As New DefineShape(shapeId, New Rect(-10, -10, 1610, 460), listShape, listLine, shape)
'add define shape object to define button array list
defineButton.Add(defineShape)

'Define symbol button
Dim buttonState As Integer = CInt(Fix(ButtonState.Down)) Or CInt(Fix(ButtonState.Up)) Or CInt(Fix(ButtonState.Over)) Or CInt(Fix(ButtonState.Active))

'create button record object
Dim button1 As New ButtonRecord(buttonState, defineShape.Id, 1, New MatrixTransform(), New ColorTransform(1, 1, 1, 0, 0, 0))
'create buttons array list
Dim buttons As New ArrayList()
'add button record to buttons array list
buttons.Add(button1)
'create actions array list
Dim actionArray As New ArrayList()
'create bytes array from array list
Dim bytes(actionArray.Count - 1) As Byte
bytes = CType(actionArray.ToArray(GetType(Byte())), Byte())
'create a button action
Dim buttonAction As New ButtonAction(CInt(Fix(ButtonActionType.Press)), bytes)
'create button actions array list
Dim buttonActions As New ArrayList()
'add btton action to button actions array list
buttonActions.Add(buttonAction)
'create define button 2 object
Dim startButton As New DefineButton2(buttonId, False, buttons, buttonActions)
'add define button 2 object to define button array list
defineButton.Add(startButton)

Dim buttonName As String = "buttonname"
' place button in movie clip and define button name for ActionScript
Dim placeObject As New PlaceObject2(startButton.ButtonId, 1)
placeObject.CharacterType = PlaceType.New
placeObject.Name = buttonName ' button name
placeObject.MatrixTransform = New MatrixTransform(1190, 2580)
placeObject.Ratio = 3.051804E-05f
defineButton.Add(placeObject)
defineButton.Add(New ShowFrame())</code></example>
    </member>
    <member name="M:Aspose.Flash.Button.ButtonAction.Add(Aspose.Flash.Actions.ActionObject)">
      <summary>
            Add an action to the end of the actions array.
            </summary>
      <example>This example shows you how to use Add method<code>[Visual Basic]

'define array list for button
Dim defineButton As New ArrayList()
' define shape for button
Dim listShape As New ArrayList()
'add sold fill to shape list
listShape.Add(New SolidFill(New RGB(204, 204, 204, 255)))
'create new line list
Dim listLine As New ArrayList()
'add solid line to line fill list
listLine.Add(New SolidLine(20, New RGB(0, 0, 0, 255)))
'create new shape
Dim shape As New Shape()
'create style change record object
Dim scr As New StyleChangeRecord(1600, 450)
scr.OverlapFillStyle = 1
scr.LineStyle = 1
'add style change record to shape
shape.Add(scr)
'add straight edge records to shape
shape.Add(New StraightEdgeRecord(-1600, 0))
shape.Add(New StraightEdgeRecord(0, -450))
shape.Add(New StraightEdgeRecord(1600, 0))
shape.Add(New StraightEdgeRecord(0, 450))
'create define shape object
Dim defineShape As New DefineShape(shapeId, New Rect(-10, -10, 1610, 460), listShape, listLine, shape)
'add define shape object to define button array list
defineButton.Add(defineShape)

'Define symbol button
Dim buttonState As Integer = CInt(Fix(ButtonState.Down)) Or CInt(Fix(ButtonState.Up)) Or CInt(Fix(ButtonState.Over)) Or CInt(Fix(ButtonState.Active))

'create button record object
Dim button1 As New ButtonRecord(buttonState, defineShape.Id, 1, New MatrixTransform(), New ColorTransform(1, 1, 1, 0, 0, 0))
'create buttons array list
Dim buttons As New ArrayList()
'add button record to buttons array list
buttons.Add(button1)
'create actions array list
Dim actionArray As New ArrayList()
'create bytes array from array list
Dim bytes(actionArray.Count - 1) As Byte
bytes = CType(actionArray.ToArray(GetType(Byte())), Byte())
'create a button action
Dim buttonAction As New ButtonAction(CInt(Fix(ButtonActionType.Press)), bytes)
'add action to the button
buttonAction.Add(New Jump(3))
'create button actions array list
Dim buttonActions As New ArrayList()
'add btton action to button actions array list
buttonActions.Add(buttonAction)
'create define button 2 object
Dim startButton As New DefineButton2(buttonId, False, buttons, buttonActions)
'add define button 2 object to define button array list
defineButton.Add(startButton)

Dim buttonName As String = "buttonname"
' place button in movie clip and define button name for ActionScript
Dim placeObject As New PlaceObject2(startButton.ButtonId, 1)
placeObject.CharacterType = PlaceType.New
placeObject.Name = buttonName ' button name
placeObject.MatrixTransform = New MatrixTransform(1190, 2580)
placeObject.Ratio = 3.051804E-05f
defineButton.Add(placeObject)
defineButton.Add(New ShowFrame())</code></example>
      <example>This example shows you how to use Add(ActionObject) method<code>[C#]

//define array list for button
ArrayList defineButton = new ArrayList();
// define shape for button
ArrayList listShape = new ArrayList();
//add sold fill to shape list
listShape.Add(new SolidFill(new RGB(204, 204, 204, 255)));
//create new line list
ArrayList listLine = new ArrayList();
//add solid line to line fill list
listLine.Add(new SolidLine(20, new RGB(0, 0, 0, 255)));
//create new shape
Shape shape = new Shape();
//create style change record object
StyleChangeRecord scr = new StyleChangeRecord(1600, 450);
scr.OverlapFillStyle = 1;
scr.LineStyle = 1;
//add style change record to shape
shape.Add(scr);
//add straight edge records to shape
shape.Add(new StraightEdgeRecord(-1600, 0));
shape.Add(new StraightEdgeRecord(0, -450));
shape.Add(new StraightEdgeRecord(1600, 0));
shape.Add(new StraightEdgeRecord(0, 450));
//create define shape object
DefineShape defineShape =
new DefineShape(shapeId, new Rect(-10, -10, 1610, 460), listShape, listLine, shape);
//add define shape object to define button array list
defineButton.Add(defineShape);

//Define symbol button
int buttonState = (int)ButtonState.Down | (int)ButtonState.Up |
(int)ButtonState.Over | (int)ButtonState.Active;

//create button record object
ButtonRecord button1 = new ButtonRecord(
buttonState, defineShape.Id, 1, new MatrixTransform(),
new ColorTransform(1, 1, 1, 0, 0, 0));
//create buttons array list
ArrayList buttons = new ArrayList();
//add button record to buttons array list
buttons.Add(button1);
//create actions array list
ArrayList actionArray = new ArrayList();
//create bytes array from array list
Byte[] bytes = new Byte[actionArray.Count];
bytes = (Byte[])actionArray.ToArray(typeof(Byte[]));
//create a button action
ButtonAction buttonAction = new ButtonAction((int)ButtonActionType.Press, bytes);
//add action to the button
buttonAction.Add(new Jump(3));
//create button actions array list
ArrayList buttonActions = new ArrayList();
//add btton action to button actions array list
buttonActions.Add(buttonAction);
//create define button 2 object
DefineButton2 startButton = new DefineButton2(buttonId, false, buttons, buttonActions);
//add define button 2 object to define button array list
defineButton.Add(startButton);

string buttonName = "buttonname";
// place button in movie clip and define button name for ActionScript
PlaceObject2 placeObject = new PlaceObject2(startButton.ButtonId, 1);
placeObject.CharacterType = PlaceType.New;
placeObject.Name = buttonName; // button name
placeObject.MatrixTransform = new MatrixTransform(1190, 2580);
placeObject.Ratio = 3.051804E-05f;
defineButton.Add(placeObject);
defineButton.Add(new ShowFrame());</code></example>
    </member>
    <member name="P:Aspose.Flash.Button.ButtonAction.Event">
      <summary>
            Returns or sets the event code that this ButtonEvent defines actions for.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Button.ButtonAction.Actions">
      <summary>
            Returns or sets the array of actions that are executed by the button
            in response to specified event(s).
            Read/write <see cref="T:System.Collections.ArrayList" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Button.ButtonAction.EncodedActions">
      <summary> 
            Sets the byte array of encoded actions.
            Write-only <see cref="T:System.Byte" />[].
            </summary>
    </member>
    <member name="T:Aspose.Flash.Button.ButtonActionType">
      <summary>
            Represents the action types.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Button.ButtonActionType.RollOver">
      <summary>
            Defines the button event that occurs when the mouse cursor moves over
            the active area of a button.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Button.ButtonActionType.RollOut">
      <summary>
            Defines the button event that occurs when the mouse cursor moves out of
            the active area of a button.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Button.ButtonActionType.Press">
      <summary>
            Defines the button event that occurs when the mouse button is clicked
            while the mouse cursor is over the active area of the button.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Button.ButtonActionType.Release">
      <summary>
            Defines the button event that occurs when the mouse button is clicked and released
            while the mouse cursor is over the active area of the button.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Button.ButtonActionType.DragOut">
      <summary>
            Defines the button event that occurs when the mouse button is clicked and
            the mouse cursor is dragged out of the active area of the button.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Button.ButtonActionType.DragOver">
      <summary>
            Defines the button event that occurs when the mouse button is clicked and
            the mouse cursor is dragged into the active area of the button.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Button.ButtonActionType.ReleaseOut">
      <summary>
            Defines the button event that occurs when the mouse button is clicked,
            the mouse cursor is dragged into the active area of the button and
            the mouse button is released.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Button.ButtonActionType.MenuDragOver">
      <summary>
            Defines the button event that occurs when the mouse button is clicked and
            the mouse cursor is dragged into the active area of the menu item.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Button.ButtonActionType.MenuDragOut">
      <summary>
            Defines the button event that occurs when the mouse button is clicked and
            the mouse cursor is dragged out of the active area of the menu item.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Button.ButtonActionType.Left">
      <summary>
            Defines the button event that occurs when the <b>Left Arrow</b> key is pressed on the keyboard.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Button.ButtonActionType.Right">
      <summary>
            Defines the button event that occurs when the <b>Right Arrow</b> key is pressed on the keyboard.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Button.ButtonActionType.Home">
      <summary>
            Defines the button event that occurs when the <b>Home</b> key is pressed on the keyboard.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Button.ButtonActionType.End">
      <summary>
            Defines the button event that occurs when the <b>End</b> key is pressed on the keyboard.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Button.ButtonActionType.Insert">
      <summary>
            Defines the button event that occurs when the <b>Insert</b> key is pressed on the keyboard.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Button.ButtonActionType.Delete">
      <summary>
            Defines the button event that occurs when the <b>Delete</b> key is pressed on the keyboard.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Button.ButtonActionType.BackSpace">
      <summary>
            Defines the button event that occurs when the <b>BackSpace</b> key is pressed on the keyboard.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Button.ButtonActionType.Enter">
      <summary>
            Defines the button event that occurs when the <b>Enter</b> key is pressed on the keyboard.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Button.ButtonActionType.Up">
      <summary>
            Defines the button event that occurs when the <b>Up Arrow</b> key is pressed on the keyboard.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Button.ButtonActionType.Down">
      <summary>
            Defines the button event that occurs when the <b>Down Arrow</b> key is pressed on the keyboard.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Button.ButtonActionType.PageUp">
      <summary>
            Defines the button event that occurs when the <b>Page Up</b> key is pressed on the keyboard.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Button.ButtonActionType.PageDown">
      <summary>
            Defines the button event that occurs when the <b>Page Down</b> key is pressed on the keyboard.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Button.ButtonActionType.Tab">
      <summary>
            Defines the button event that occurs when the <b>Tab</b> key is pressed on the keyboard.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Button.ButtonActionType.Escape">
      <summary>
            Defines the button event that occurs when the <b>Escape</b> key is pressed on the keyboard.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Button.ButtonActionType.Space">
      <summary>
            Defines the button event that occurs when the <b>Space Bar</b> is pressed on the keyboard.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Button.ButtonRecord">
      <summary>
        <p>Represents the shape that is drawn when a button is in a particular state.
             Shapes can be drawn for each of three button states, Over, Up and Down.
             Creating a button with more than one ButtonRecord object each referencing
             a different shape allows the button to be animated as it is clicked.</p>
        <p>A shape is also used to define active area of the button. When defining
             the active area the outline of the shape defines the boundary of the area.
             The shape is not drawn when the button is displayed. The button will only
             respond to mouse events when the cursor is placed inside the active area.</p>
        <p>There is no one-to-one relationship between button records and button states.
             A single button record may apply to more than one button state (by setting multiple
             ButtonState flags), and there are may be multiple button records for any button state.</p>
      </summary>
      <example>This example shows you how to use ButtonRecord class<code>[C#]

//define array list for button
ArrayList defineButton = new ArrayList();
// define shape for button
ArrayList listShape = new ArrayList();
//add sold fill to shape list
listShape.Add(new SolidFill(new RGB(204, 204, 204, 255)));
//create new line list
ArrayList listLine = new ArrayList();
//add solid line to line fill list
listLine.Add(new SolidLine(20, new RGB(0, 0, 0, 255)));
//create new shape
Shape shape = new Shape();
//create style change record object
StyleChangeRecord scr = new StyleChangeRecord(1600, 450);
scr.OverlapFillStyle = 1;
scr.LineStyle = 1;
//add style change record to shape
shape.Add(scr);
//add straight edge records to shape
shape.Add(new StraightEdgeRecord(-1600, 0));
shape.Add(new StraightEdgeRecord(0, -450));
shape.Add(new StraightEdgeRecord(1600, 0));
shape.Add(new StraightEdgeRecord(0, 450));
//create define shape object
DefineShape defineShape =
new DefineShape(shapeId, new Rect(-10, -10, 1610, 460), listShape, listLine, shape);
//add define shape object to define button array list
defineButton.Add(defineShape);

//Define symbol button
int buttonState = (int)ButtonState.Down | (int)ButtonState.Up |
(int)ButtonState.Over | (int)ButtonState.Active;

//create button record object
ButtonRecord button1 = new ButtonRecord(
buttonState, defineShape.Id, 1, new MatrixTransform(),
new ColorTransform(1, 1, 1, 0, 0, 0));
//create buttons array list
ArrayList buttons = new ArrayList();
//add button record to buttons array list
buttons.Add(button1);
//create actions array list
ArrayList actionArray = new ArrayList();
//create bytes array from array list
Byte[] bytes = new Byte[actionArray.Count];
bytes = (Byte[])actionArray.ToArray(typeof(Byte[]));
//create a button action
ButtonAction buttonAction = new ButtonAction((int)ButtonActionType.Press, bytes);
//add action to the button
buttonAction.Add(new Jump(3));
//create button actions array list
ArrayList buttonActions = new ArrayList();
//add btton action to button actions array list
buttonActions.Add(buttonAction);
//create define button 2 object
DefineButton2 startButton = new DefineButton2(buttonId, false, buttons, buttonActions);
//add define button 2 object to define button array list
defineButton.Add(startButton);

string buttonName = "buttonname";
// place button in movie clip and define button name for ActionScript
PlaceObject2 placeObject = new PlaceObject2(startButton.ButtonId, 1);
placeObject.CharacterType = PlaceType.New;
placeObject.Name = buttonName; // button name
placeObject.MatrixTransform = new MatrixTransform(1190, 2580);
placeObject.Ratio = 3.051804E-05f;
defineButton.Add(placeObject);
defineButton.Add(new ShowFrame());</code><code>[Visual Basic]

'define array list for button
Dim defineButton As New ArrayList()
' define shape for button
Dim listShape As New ArrayList()
'add sold fill to shape list
listShape.Add(New SolidFill(New RGB(204, 204, 204, 255)))
'create new line list
Dim listLine As New ArrayList()
'add solid line to line fill list
listLine.Add(New SolidLine(20, New RGB(0, 0, 0, 255)))
'create new shape
Dim shape As New Shape()
'create style change record object
Dim scr As New StyleChangeRecord(1600, 450)
scr.OverlapFillStyle = 1
scr.LineStyle = 1
'add style change record to shape
shape.Add(scr)
'add straight edge records to shape
shape.Add(New StraightEdgeRecord(-1600, 0))
shape.Add(New StraightEdgeRecord(0, -450))
shape.Add(New StraightEdgeRecord(1600, 0))
shape.Add(New StraightEdgeRecord(0, 450))
'create define shape object
Dim defineShape As New DefineShape(shapeId, New Rect(-10, -10, 1610, 460), listShape, listLine, shape)
'add define shape object to define button array list
defineButton.Add(defineShape)

'Define symbol button
Dim buttonState As Integer = CInt(Fix(ButtonState.Down)) Or CInt(Fix(ButtonState.Up)) Or CInt(Fix(ButtonState.Over)) Or CInt(Fix(ButtonState.Active))

'create button record object
Dim button1 As New ButtonRecord(buttonState, defineShape.Id, 1, New MatrixTransform(), New ColorTransform(1, 1, 1, 0, 0, 0))
'create buttons array list
Dim buttons As New ArrayList()
'add button record to buttons array list
buttons.Add(button1)
'create actions array list
Dim actionArray As New ArrayList()
'create bytes array from array list
Dim bytes(actionArray.Count - 1) As Byte
bytes = CType(actionArray.ToArray(GetType(Byte())), Byte())
'create a button action
Dim buttonAction As New ButtonAction(CInt(Fix(ButtonActionType.Press)), bytes)
'add action to the button
buttonAction.Add(New Jump(3))
'create button actions array list
Dim buttonActions As New ArrayList()
'add btton action to button actions array list
buttonActions.Add(buttonAction)
'create define button 2 object
Dim startButton As New DefineButton2(buttonId, False, buttons, buttonActions)
'add define button 2 object to define button array list
defineButton.Add(startButton)

Dim buttonName As String = "buttonname"
' place button in movie clip and define button name for ActionScript
Dim placeObject As New PlaceObject2(startButton.ButtonId, 1)
placeObject.CharacterType = PlaceType.New
placeObject.Name = buttonName ' button name
placeObject.MatrixTransform = New MatrixTransform(1190, 2580)
placeObject.Ratio = 3.051804E-05f
defineButton.Add(placeObject)
defineButton.Add(New ShowFrame())</code></example>
    </member>
    <member name="T:Aspose.Flash.Swf.ILayer">
      <summary>
            By implementing this interface the object provides an infomation about its placement.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.ILayer.Depth">
      <summary>
            Represents the layer number or depth value.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Button.ButtonRecord.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>
            ButtonRecord constructor.
            </summary>
      <param name="state">The button state.</param>
      <param name="id">The button identifier.</param>
      <param name="depth">The place depth.</param>
      <example>This example shows you how to use ButtonRecord<code>[C#]

//define array list for button
ArrayList defineButton = new ArrayList();
// define shape for button
ArrayList listShape = new ArrayList();
//add sold fill to shape list
listShape.Add(new SolidFill(new RGB(204, 204, 204, 255)));
//create new line list
ArrayList listLine = new ArrayList();
//add solid line to line fill list
listLine.Add(new SolidLine(20, new RGB(0, 0, 0, 255)));
//create new shape
Shape shape = new Shape();
//create style change record object
StyleChangeRecord scr = new StyleChangeRecord(1600, 450);
scr.OverlapFillStyle = 1;
scr.LineStyle = 1;
//add style change record to shape
shape.Add(scr);
//add straight edge records to shape
shape.Add(new StraightEdgeRecord(-1600, 0));
shape.Add(new StraightEdgeRecord(0, -450));
shape.Add(new StraightEdgeRecord(1600, 0));
shape.Add(new StraightEdgeRecord(0, 450));
//create define shape object
DefineShape defineShape =
new DefineShape(shapeId, new Rect(-10, -10, 1610, 460), listShape, listLine, shape);
//add define shape object to define button array list
defineButton.Add(defineShape);

//Define symbol button
int buttonState = (int)ButtonState.Down | (int)ButtonState.Up |
(int)ButtonState.Over | (int)ButtonState.Active;

//create button record object
ButtonRecord button1 = new ButtonRecord(
buttonState,
defineShape.Id,
1);
//create buttons array list
ArrayList buttons = new ArrayList();
//add button record to buttons array list
buttons.Add(button1);
//create actions array list
ArrayList actionArray = new ArrayList();
//create bytes array from array list
Byte[] bytes = new Byte[actionArray.Count];
bytes = (Byte[])actionArray.ToArray(typeof(Byte[]));
//create a button action
ButtonAction buttonAction = new ButtonAction((int)ButtonActionType.Press, bytes);
//add action to the button
buttonAction.Add(new Jump(3));
//create button actions array list
ArrayList buttonActions = new ArrayList();
//add btton action to button actions array list
buttonActions.Add(buttonAction);
//create define button 2 object
DefineButton2 startButton = new DefineButton2(buttonId, false, buttons, buttonActions);
//add define button 2 object to define button array list
defineButton.Add(startButton);

string buttonName = "buttonname";
// place button in movie clip and define button name for ActionScript
PlaceObject2 placeObject = new PlaceObject2(startButton.ButtonId, 1);
placeObject.CharacterType = PlaceType.New;
placeObject.Name = buttonName; // button name
placeObject.MatrixTransform = new MatrixTransform(1190, 2580);
placeObject.Ratio = 3.051804E-05f;
defineButton.Add(placeObject);
defineButton.Add(new ShowFrame());</code><code>[Visual Basic]

'define array list for button
Dim defineButton As New ArrayList()
' define shape for button
Dim listShape As New ArrayList()
'add sold fill to shape list
listShape.Add(New SolidFill(New RGB(204, 204, 204, 255)))
'create new line list
Dim listLine As New ArrayList()
'add solid line to line fill list
listLine.Add(New SolidLine(20, New RGB(0, 0, 0, 255)))
'create new shape
Dim shape As New Shape()
'create style change record object
Dim scr As New StyleChangeRecord(1600, 450)
scr.OverlapFillStyle = 1
scr.LineStyle = 1
'add style change record to shape
shape.Add(scr)
'add straight edge records to shape
shape.Add(New StraightEdgeRecord(-1600, 0))
shape.Add(New StraightEdgeRecord(0, -450))
shape.Add(New StraightEdgeRecord(1600, 0))
shape.Add(New StraightEdgeRecord(0, 450))
'create define shape object
Dim defineShape As New DefineShape(shapeId, New Rect(-10, -10, 1610, 460), listShape, listLine, shape)
'add define shape object to define button array list
defineButton.Add(defineShape)

'Define symbol button
Dim buttonState As Integer = CInt(Fix(ButtonState.Down)) Or CInt(Fix(ButtonState.Up)) Or CInt(Fix(ButtonState.Over)) Or CInt(Fix(ButtonState.Active))

'create button record object
Dim button1 As New ButtonRecord(buttonState, defineShape.Id, 1)
'create buttons array list
Dim buttons As New ArrayList()
'add button record to buttons array list
buttons.Add(button1)
'create actions array list
Dim actionArray As New ArrayList()
'create bytes array from array list
Dim bytes(actionArray.Count - 1) As Byte
bytes = CType(actionArray.ToArray(GetType(Byte())), Byte())
'create a button action
Dim buttonAction As New ButtonAction(CInt(Fix(ButtonActionType.Press)), bytes)
'add action to the button
buttonAction.Add(New Jump(3))
'create button actions array list
Dim buttonActions As New ArrayList()
'add btton action to button actions array list
buttonActions.Add(buttonAction)
'create define button 2 object
Dim startButton As New DefineButton2(buttonId, False, buttons, buttonActions)
'add define button 2 object to define button array list
defineButton.Add(startButton)

Dim buttonName As String = "buttonname"
' place button in movie clip and define button name for ActionScript
Dim placeObject As New PlaceObject2(startButton.ButtonId, 1)
placeObject.CharacterType = PlaceType.New
placeObject.Name = buttonName ' button name
placeObject.MatrixTransform = New MatrixTransform(1190, 2580)
placeObject.Ratio = 3.051804E-05f
defineButton.Add(placeObject)
defineButton.Add(New ShowFrame())</code></example>
    </member>
    <member name="M:Aspose.Flash.Button.ButtonRecord.#ctor(System.Int32,System.Int32,System.Int32,Aspose.Flash.Basic.MatrixTransform,Aspose.Flash.Basic.ColorTransform)">
      <summary>
            ButtonRecord constructor.
            </summary>
      <param name="state">The button state.</param>
      <param name="id">The button identifier.</param>
      <param name="depth">The place depth.</param>
      <param name="transform">The matrix transformation.</param>
      <param name="colorTransform">The color transformation.</param>
      <example>This example shows you how to use ButtonRecord constructor<code>[C#]

//define array list for button
ArrayList defineButton = new ArrayList();
// define shape for button
ArrayList listShape = new ArrayList();
//add sold fill to shape list
listShape.Add(new SolidFill(new RGB(204, 204, 204, 255)));
//create new line list
ArrayList listLine = new ArrayList();
//add solid line to line fill list
listLine.Add(new SolidLine(20, new RGB(0, 0, 0, 255)));
//create new shape
Shape shape = new Shape();
//create style change record object
StyleChangeRecord scr = new StyleChangeRecord(1600, 450);
scr.OverlapFillStyle = 1;
scr.LineStyle = 1;
//add style change record to shape
shape.Add(scr);
//add straight edge records to shape
shape.Add(new StraightEdgeRecord(-1600, 0));
shape.Add(new StraightEdgeRecord(0, -450));
shape.Add(new StraightEdgeRecord(1600, 0));
shape.Add(new StraightEdgeRecord(0, 450));
//create define shape object
DefineShape defineShape =
new DefineShape(shapeId, new Rect(-10, -10, 1610, 460), listShape, listLine, shape);
//add define shape object to define button array list
defineButton.Add(defineShape);

//Define symbol button
int buttonState = (int)ButtonState.Down | (int)ButtonState.Up |
(int)ButtonState.Over | (int)ButtonState.Active;

//create button record object
ButtonRecord button1 = new ButtonRecord(
buttonState, defineShape.Id, 1, new MatrixTransform(),
new ColorTransform(1, 1, 1, 0, 0, 0));
//create buttons array list
ArrayList buttons = new ArrayList();
//add button record to buttons array list
buttons.Add(button1);
//create actions array list
ArrayList actionArray = new ArrayList();
//create bytes array from array list
Byte[] bytes = new Byte[actionArray.Count];
bytes = (Byte[])actionArray.ToArray(typeof(Byte[]));
//create a button action
ButtonAction buttonAction = new ButtonAction((int)ButtonActionType.Press, bytes);
//add action to the button
buttonAction.Add(new Jump(3));
//create button actions array list
ArrayList buttonActions = new ArrayList();
//add btton action to button actions array list
buttonActions.Add(buttonAction);
//create define button 2 object
DefineButton2 startButton = new DefineButton2(buttonId, false, buttons, buttonActions);
//add define button 2 object to define button array list
defineButton.Add(startButton);

string buttonName = "buttonname";
// place button in movie clip and define button name for ActionScript
PlaceObject2 placeObject = new PlaceObject2(startButton.ButtonId, 1);
placeObject.CharacterType = PlaceType.New;
placeObject.Name = buttonName; // button name
placeObject.MatrixTransform = new MatrixTransform(1190, 2580);
placeObject.Ratio = 3.051804E-05f;
defineButton.Add(placeObject);
defineButton.Add(new ShowFrame());</code><code>[Visual Basic]

'define array list for button
Dim defineButton As New ArrayList()
' define shape for button
Dim listShape As New ArrayList()
'add sold fill to shape list
listShape.Add(New SolidFill(New RGB(204, 204, 204, 255)))
'create new line list
Dim listLine As New ArrayList()
'add solid line to line fill list
listLine.Add(New SolidLine(20, New RGB(0, 0, 0, 255)))
'create new shape
Dim shape As New Shape()
'create style change record object
Dim scr As New StyleChangeRecord(1600, 450)
scr.OverlapFillStyle = 1
scr.LineStyle = 1
'add style change record to shape
shape.Add(scr)
'add straight edge records to shape
shape.Add(New StraightEdgeRecord(-1600, 0))
shape.Add(New StraightEdgeRecord(0, -450))
shape.Add(New StraightEdgeRecord(1600, 0))
shape.Add(New StraightEdgeRecord(0, 450))
'create define shape object
Dim defineShape As New DefineShape(shapeId, New Rect(-10, -10, 1610, 460), listShape, listLine, shape)
'add define shape object to define button array list
defineButton.Add(defineShape)

'Define symbol button
Dim buttonState As Integer = CInt(Fix(ButtonState.Down)) Or CInt(Fix(ButtonState.Up)) Or CInt(Fix(ButtonState.Over)) Or CInt(Fix(ButtonState.Active))

'create button record object
Dim button1 As New ButtonRecord(buttonState, defineShape.Id, 1, New MatrixTransform(), New ColorTransform(1, 1, 1, 0, 0, 0))
'create buttons array list
Dim buttons As New ArrayList()
'add button record to buttons array list
buttons.Add(button1)
'create actions array list
Dim actionArray As New ArrayList()
'create bytes array from array list
Dim bytes(actionArray.Count - 1) As Byte
bytes = CType(actionArray.ToArray(GetType(Byte())), Byte())
'create a button action
Dim buttonAction As New ButtonAction(CInt(Fix(ButtonActionType.Press)), bytes)
'add action to the button
buttonAction.Add(New Jump(3))
'create button actions array list
Dim buttonActions As New ArrayList()
'add btton action to button actions array list
buttonActions.Add(buttonAction)
'create define button 2 object
Dim startButton As New DefineButton2(buttonId, False, buttons, buttonActions)
'add define button 2 object to define button array list
defineButton.Add(startButton)

Dim buttonName As String = "buttonname"
' place button in movie clip and define button name for ActionScript
Dim placeObject As New PlaceObject2(startButton.ButtonId, 1)
placeObject.CharacterType = PlaceType.New
placeObject.Name = buttonName ' button name
placeObject.MatrixTransform = New MatrixTransform(1190, 2580)
placeObject.Ratio = 3.051804E-05f
defineButton.Add(placeObject)
defineButton.Add(New ShowFrame())</code></example>
    </member>
    <member name="M:Aspose.Flash.Button.ButtonRecord.IsActive">
      <summary>
            Determines whether the ButtonRecord defines a shape for the button's active area.
            </summary>
      <returns>True if the ButtonRecord defines a shape for the button's active area.</returns>
    </member>
    <member name="M:Aspose.Flash.Button.ButtonRecord.IsDown">
      <summary>
            Determines whether the ButtonRecord defines a shape for the button's 'down' state.
            </summary>
      <returns>True if the ButtonRecord defines a shape for the button's 'down' state.</returns>
    </member>
    <member name="M:Aspose.Flash.Button.ButtonRecord.IsOver">
      <summary>
            Determines whether the ButtonRecord defines a shape for the button's 'over' state.
            </summary>
      <returns>True if the ButtonRecord defines a shape for the button's 'over' state.</returns>
    </member>
    <member name="M:Aspose.Flash.Button.ButtonRecord.IsUp">
      <summary>
            Determines whether the ButtonRecord defines a shape for the button's 'up' state.
            </summary>
      <returns>True if the ButtonRecord defines a shape for the button's 'up' state.</returns>
    </member>
    <member name="P:Aspose.Flash.Button.ButtonRecord.State">
      <summary>
            Returns or sets the state(s) of a button when the shape is drawn.
            Read/write <see cref="T:System.Int32" />. See <see cref="T:Aspose.Flash.Button.ButtonState" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Button.ButtonRecord.BlendMode">
      <summary>
            Blend mode
            0 or 1 = normal
            2 = layer
            3 = multiply
            4 = screen
            5 = lighten
            6 = darken
            7 = add
            8 = subtract
            9 = difference
            10 = invert
            11 = alpha
            12 = erase
            13 = overlay
            14 = hardlight
            </summary>
    </member>
    <member name="P:Aspose.Flash.Button.ButtonRecord.ButtonId">
      <summary>
            Returns or sets the Id of a shape.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Button.ButtonRecord.Depth">
      <summary>
            Returns or sets the depth of a shape.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Button.ButtonRecord.FilterList">
      <summary>
            List of filters on this button
            </summary>
    </member>
    <member name="P:Aspose.Flash.Button.ButtonRecord.MatrixTransform">
      <summary>
            Returns or sets the transformation matrix for a shape.
            Read/write <see cref="P:Aspose.Flash.Button.ButtonRecord.MatrixTransform" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Button.ButtonRecord.ColorTransform">
      <summary>
            Returns or sets the color transformation.
            Read/write <see cref="P:Aspose.Flash.Button.ButtonRecord.ColorTransform" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Button.ButtonState">
      <summary>
            Represents the button's State.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Button.ButtonState.Up">
      <summary>
            Button in the Up state.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Button.ButtonState.Over">
      <summary>
            Mouse is over the active area.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Button.ButtonState.Down">
      <summary>
            Button in the Down state or mouse is clicked in the active area.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Button.ButtonState.Active">
      <summary>
            Active area of a button.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Button.DefineButton">
      <summary>
        <p>Represents the button shape for later use by control tags such as PlaceObject.</p>
        <p>Contains an array of ButtonRecords which represent the four button shapes:
            Up, Over, Down and Hit.</p>
      </summary>
      <remarks>
        <p>It is not necessary to define all four button states, but there must be
            at least one button record.</p>
        <p>More than one button record per state is allowed.
            If two button records refer to the same state, both will be displayed for that state.</p>
      </remarks>
      <example>This example shows you how to use DefineButton class<code>[C#]

//define array list for button
ArrayList defineButton = new ArrayList();
// define shape for button
ArrayList listShape = new ArrayList();
//add sold fill to shape list
listShape.Add(new SolidFill(new RGB(204, 204, 204, 255)));
//create new line list
ArrayList listLine = new ArrayList();
//add solid line to line fill list
listLine.Add(new SolidLine(20, new RGB(0, 0, 0, 255)));
//create new shape
Shape shape = new Shape();
//create style change record object
StyleChangeRecord scr = new StyleChangeRecord(1600, 450);
scr.OverlapFillStyle = 1;
scr.LineStyle = 1;
//add style change record to shape
shape.Add(scr);
//add straight edge records to shape
shape.Add(new StraightEdgeRecord(-1600, 0));
shape.Add(new StraightEdgeRecord(0, -450));
shape.Add(new StraightEdgeRecord(1600, 0));
shape.Add(new StraightEdgeRecord(0, 450));
//create define shape object
DefineShape defineShape =
new DefineShape(shapeId, new Rect(-10, -10, 1610, 460), listShape, listLine, shape);
//add define shape object to define button array list
defineButton.Add(defineShape);

//Define symbol button
int buttonState = (int)ButtonState.Down | (int)ButtonState.Up |
(int)ButtonState.Over | (int)ButtonState.Active;

//create button record object
ButtonRecord button1 = new ButtonRecord(
buttonState,
defineShape.Id,
1);
//create buttons array list
ArrayList buttons = new ArrayList();
//add button record to buttons array list
buttons.Add(button1);
//create actions array list
ArrayList actionArray = new ArrayList();
//create bytes array from array list
Byte[] bytes = new Byte[actionArray.Count];
bytes = (Byte[])actionArray.ToArray(typeof(Byte[]));
//create a button action
ButtonAction buttonAction = new ButtonAction((int)ButtonActionType.Press, bytes);
//add action to the button
buttonAction.Add(new Jump(3));
//create button actions array list
ArrayList buttonActions = new ArrayList();
//add btton action to button actions array list
buttonActions.Add(buttonAction);
//convert button actions array to bytes array
bytes = new Byte[buttonActions.Count];
bytes = (Byte[])buttonActions.ToArray(typeof(Byte[]));
//create define button object
DefineButton startButton = new DefineButton(buttonId, buttons, bytes);
//add define button object to define button array list
defineButton.Add(startButton);</code><code>[Visual Basic]

'define array list for button
Dim defineButton As New ArrayList()
' define shape for button
Dim listShape As New ArrayList()
'add sold fill to shape list
listShape.Add(New SolidFill(New RGB(204, 204, 204, 255)))
'create new line list
Dim listLine As New ArrayList()
'add solid line to line fill list
listLine.Add(New SolidLine(20, New RGB(0, 0, 0, 255)))
'create new shape
Dim shape As New Shape()
'create style change record object
Dim scr As New StyleChangeRecord(1600, 450)
scr.OverlapFillStyle = 1
scr.LineStyle = 1
'add style change record to shape
shape.Add(scr)
'add straight edge records to shape
shape.Add(New StraightEdgeRecord(-1600, 0))
shape.Add(New StraightEdgeRecord(0, -450))
shape.Add(New StraightEdgeRecord(1600, 0))
shape.Add(New StraightEdgeRecord(0, 450))
'create define shape object
Dim defineShape As New DefineShape(shapeId, New Rect(-10, -10, 1610, 460), listShape, listLine, shape)
'add define shape object to define button array list
defineButton.Add(defineShape)

'Define symbol button
Dim buttonState As Integer = CInt(Fix(ButtonState.Down)) Or CInt(Fix(ButtonState.Up)) Or CInt(Fix(ButtonState.Over)) Or CInt(Fix(ButtonState.Active))

'create button record object
Dim button1 As New ButtonRecord(buttonState, defineShape.Id, 1)
'create buttons array list
Dim buttons As New ArrayList()
'add button record to buttons array list
buttons.Add(button1)
'create actions array list
Dim actionArray As New ArrayList()
'create bytes array from array list
Dim bytes(actionArray.Count - 1) As Byte
bytes = CType(actionArray.ToArray(GetType(Byte())), Byte())
'create a button action
Dim buttonAction As New ButtonAction(CInt(Fix(ButtonActionType.Press)), bytes)
'add action to the button
buttonAction.Add(New Jump(3))
'create button actions array list
Dim buttonActions As New ArrayList()
'add btton action to button actions array list
buttonActions.Add(buttonAction)
'convert button actions array to bytes array
bytes = New Byte(buttonActions.Count - 1){}
bytes = CType(buttonActions.ToArray(GetType(Byte())), Byte())
'create define button object
Dim startButton As New DefineButton(buttonId, buttons, bytes)
'add define button object to define button array list
defineButton.Add(startButton)</code></example>
    </member>
    <member name="M:Aspose.Flash.Button.DefineButton.#ctor(System.Int32,System.Collections.ArrayList,System.Collections.ArrayList)">
      <summary>
            DefineButton constructor.
            </summary>
      <param name="id">The button identifier.</param>
      <param name="buttonRecordArray">The button shapes.</param>
      <param name="actionArray">The button actions.</param>
      <example>This example shows you how to use DefineButton(Int32, ArrayList, ArrayList) constructor<code>[C#]

//define array list for button
ArrayList defineButton = new ArrayList();
// define shape for button
ArrayList listShape = new ArrayList();
//add sold fill to shape list
listShape.Add(new SolidFill(new RGB(204, 204, 204, 255)));
//create new line list
ArrayList listLine = new ArrayList();
//add solid line to line fill list
listLine.Add(new SolidLine(20, new RGB(0, 0, 0, 255)));
//create new shape
Shape shape = new Shape();
//create style change record object
StyleChangeRecord scr = new StyleChangeRecord(1600, 450);
scr.OverlapFillStyle = 1;
scr.LineStyle = 1;
//add style change record to shape
shape.Add(scr);
//add straight edge records to shape
shape.Add(new StraightEdgeRecord(-1600, 0));
shape.Add(new StraightEdgeRecord(0, -450));
shape.Add(new StraightEdgeRecord(1600, 0));
shape.Add(new StraightEdgeRecord(0, 450));
//create define shape object
DefineShape defineShape =
new DefineShape(shapeId, new Rect(-10, -10, 1610, 460), listShape, listLine, shape);
//add define shape object to define button array list
defineButton.Add(defineShape);

//Define symbol button
int buttonState = (int)ButtonState.Down | (int)ButtonState.Up |
(int)ButtonState.Over | (int)ButtonState.Active;

//create button record object
ButtonRecord button1 = new ButtonRecord(
buttonState,
defineShape.Id,
1);
//create buttons array list
ArrayList buttons = new ArrayList();
//add button record to buttons array list
buttons.Add(button1);
//create actions array list
ArrayList actionArray = new ArrayList();
//create bytes array from array list
Byte[] bytes = new Byte[actionArray.Count];
bytes = (Byte[])actionArray.ToArray(typeof(Byte[]));
//create a button action
ButtonAction buttonAction = new ButtonAction((int)ButtonActionType.Press, bytes);
//add action to the button
buttonAction.Add(new Jump(3));
//create button actions array list
ArrayList buttonActions = new ArrayList();
//add btton action to button actions array list
buttonActions.Add(buttonAction);
//create define button object
DefineButton startButton = new DefineButton(buttonId, buttons, buttonActions);
//add define button object to define button array list
defineButton.Add(startButton);</code><code>[Visual Basic]

'define array list for button
Dim defineButton As New ArrayList()
' define shape for button
Dim listShape As New ArrayList()
'add sold fill to shape list
listShape.Add(New SolidFill(New RGB(204, 204, 204, 255)))
'create new line list
Dim listLine As New ArrayList()
'add solid line to line fill list
listLine.Add(New SolidLine(20, New RGB(0, 0, 0, 255)))
'create new shape
Dim shape As New Shape()
'create style change record object
Dim scr As New StyleChangeRecord(1600, 450)
scr.OverlapFillStyle = 1
scr.LineStyle = 1
'add style change record to shape
shape.Add(scr)
'add straight edge records to shape
shape.Add(New StraightEdgeRecord(-1600, 0))
shape.Add(New StraightEdgeRecord(0, -450))
shape.Add(New StraightEdgeRecord(1600, 0))
shape.Add(New StraightEdgeRecord(0, 450))
'create define shape object
Dim defineShape As New DefineShape(shapeId, New Rect(-10, -10, 1610, 460), listShape, listLine, shape)
'add define shape object to define button array list
defineButton.Add(defineShape)

'Define symbol button
Dim buttonState As Integer = CInt(Fix(ButtonState.Down)) Or CInt(Fix(ButtonState.Up)) Or CInt(Fix(ButtonState.Over)) Or CInt(Fix(ButtonState.Active))

'create button record object
Dim button1 As New ButtonRecord(buttonState, defineShape.Id, 1)
'create buttons array list
Dim buttons As New ArrayList()
'add button record to buttons array list
buttons.Add(button1)
'create actions array list
Dim actionArray As New ArrayList()
'create bytes array from array list
Dim bytes(actionArray.Count - 1) As Byte
bytes = CType(actionArray.ToArray(GetType(Byte())), Byte())
'create a button action
Dim buttonAction As New ButtonAction(CInt(Fix(ButtonActionType.Press)), bytes)
'add action to the button
buttonAction.Add(New Jump(3))
'create button actions array list
Dim buttonActions As New ArrayList()
'add btton action to button actions array list
buttonActions.Add(buttonAction)
'create define button object
Dim startButton As New DefineButton(buttonId, buttons, buttonActions)
'add define button object to define button array list
defineButton.Add(startButton)</code></example>
    </member>
    <member name="M:Aspose.Flash.Button.DefineButton.#ctor(System.Int32,System.Collections.ArrayList,System.Byte[])">
      <summary>
            DefineButton constructor.
            </summary>
      <param name="id">The button identifier.</param>
      <param name="buttonRecordArray">The button shapes.</param>
      <param name="bytes">The encoded actions.</param>
      <example>This example shows you how to use DefineButton(Int32, ArrayList, Byte[]) constructor<code>[C#]

//define array list for button
ArrayList defineButton = new ArrayList();
// define shape for button
ArrayList listShape = new ArrayList();
//add sold fill to shape list
listShape.Add(new SolidFill(new RGB(204, 204, 204, 255)));
//create new line list
ArrayList listLine = new ArrayList();
//add solid line to line fill list
listLine.Add(new SolidLine(20, new RGB(0, 0, 0, 255)));
//create new shape
Shape shape = new Shape();
//create style change record object
StyleChangeRecord scr = new StyleChangeRecord(1600, 450);
scr.OverlapFillStyle = 1;
scr.LineStyle = 1;
//add style change record to shape
shape.Add(scr);
//add straight edge records to shape
shape.Add(new StraightEdgeRecord(-1600, 0));
shape.Add(new StraightEdgeRecord(0, -450));
shape.Add(new StraightEdgeRecord(1600, 0));
shape.Add(new StraightEdgeRecord(0, 450));
//create define shape object
DefineShape defineShape =
new DefineShape(shapeId, new Rect(-10, -10, 1610, 460), listShape, listLine, shape);
//add define shape object to define button array list
defineButton.Add(defineShape);

//Define symbol button
int buttonState = (int)ButtonState.Down | (int)ButtonState.Up |
(int)ButtonState.Over | (int)ButtonState.Active;

//create button record object
ButtonRecord button1 = new ButtonRecord(
buttonState,
defineShape.Id,
1);
//create buttons array list
ArrayList buttons = new ArrayList();
//add button record to buttons array list
buttons.Add(button1);
//create actions array list
ArrayList actionArray = new ArrayList();
//create bytes array from array list
Byte[] bytes = new Byte[actionArray.Count];
bytes = (Byte[])actionArray.ToArray(typeof(Byte[]));
//create a button action
ButtonAction buttonAction = new ButtonAction((int)ButtonActionType.Press, bytes);
//add action to the button
buttonAction.Add(new Jump(3));
//create button actions array list
ArrayList buttonActions = new ArrayList();
//add btton action to button actions array list
buttonActions.Add(buttonAction);
//convert button actions array to bytes array
bytes = new Byte[buttonActions.Count];
bytes = (Byte[])buttonActions.ToArray(typeof(Byte[]));
//create define button object
DefineButton startButton = new DefineButton(buttonId, buttons, bytes);
//add define button object to define button array list
defineButton.Add(startButton);</code><code>[Visual Basic]

'define array list for button
Dim defineButton As New ArrayList()
' define shape for button
Dim listShape As New ArrayList()
'add sold fill to shape list
listShape.Add(New SolidFill(New RGB(204, 204, 204, 255)))
'create new line list
Dim listLine As New ArrayList()
'add solid line to line fill list
listLine.Add(New SolidLine(20, New RGB(0, 0, 0, 255)))
'create new shape
Dim shape As New Shape()
'create style change record object
Dim scr As New StyleChangeRecord(1600, 450)
scr.OverlapFillStyle = 1
scr.LineStyle = 1
'add style change record to shape
shape.Add(scr)
'add straight edge records to shape
shape.Add(New StraightEdgeRecord(-1600, 0))
shape.Add(New StraightEdgeRecord(0, -450))
shape.Add(New StraightEdgeRecord(1600, 0))
shape.Add(New StraightEdgeRecord(0, 450))
'create define shape object
Dim defineShape As New DefineShape(shapeId, New Rect(-10, -10, 1610, 460), listShape, listLine, shape)
'add define shape object to define button array list
defineButton.Add(defineShape)

'Define symbol button
Dim buttonState As Integer = CInt(Fix(ButtonState.Down)) Or CInt(Fix(ButtonState.Up)) Or CInt(Fix(ButtonState.Over)) Or CInt(Fix(ButtonState.Active))

'create button record object
Dim button1 As New ButtonRecord(buttonState, defineShape.Id, 1)
'create buttons array list
Dim buttons As New ArrayList()
'add button record to buttons array list
buttons.Add(button1)
'create actions array list
Dim actionArray As New ArrayList()
'create bytes array from array list
Dim bytes(actionArray.Count - 1) As Byte
bytes = CType(actionArray.ToArray(GetType(Byte())), Byte())
'create a button action
Dim buttonAction As New ButtonAction(CInt(Fix(ButtonActionType.Press)), bytes)
'add action to the button
buttonAction.Add(New Jump(3))
'create button actions array list
Dim buttonActions As New ArrayList()
'add btton action to button actions array list
buttonActions.Add(buttonAction)
'convert button actions array to bytes array
bytes = New Byte(buttonActions.Count - 1){}
bytes = CType(buttonActions.ToArray(GetType(Byte())), Byte())
'create define button object
Dim startButton As New DefineButton(buttonId, buttons, bytes)
'add define button object to define button array list
defineButton.Add(startButton)</code></example>
    </member>
    <member name="M:Aspose.Flash.Button.DefineButton.#ctor">
      <summary>
            Default constructor.
            </summary>
      <example>This example shows you how to use DefineButton constructor<code>[Visual Basic]

'define array list for button
Dim defineButton As New ArrayList()
' define shape for button
Dim listShape As New ArrayList()
'add sold fill to shape list
listShape.Add(New SolidFill(New RGB(204, 204, 204, 255)))
'create new line list
Dim listLine As New ArrayList()
'add solid line to line fill list
listLine.Add(New SolidLine(20, New RGB(0, 0, 0, 255)))
'create new shape
Dim shape As New Shape()
'create style change record object
Dim scr As New StyleChangeRecord(1600, 450)
scr.OverlapFillStyle = 1
scr.LineStyle = 1
'add style change record to shape
shape.Add(scr)
'add straight edge records to shape
shape.Add(New StraightEdgeRecord(-1600, 0))
shape.Add(New StraightEdgeRecord(0, -450))
shape.Add(New StraightEdgeRecord(1600, 0))
shape.Add(New StraightEdgeRecord(0, 450))
'create define shape object
Dim defineShape As New DefineShape(shapeId, New Rect(-10, -10, 1610, 460), listShape, listLine, shape)
'add define shape object to define button array list
defineButton.Add(defineShape)

'Define symbol button
Dim buttonState As Integer = CInt(Fix(ButtonState.Down)) Or CInt(Fix(ButtonState.Up)) Or CInt(Fix(ButtonState.Over)) Or CInt(Fix(ButtonState.Active))

'create button record object
Dim button1 As New ButtonRecord(buttonState, defineShape.Id, 1)
'create buttons array list
Dim buttons As New ArrayList()
'add button record to buttons array list
buttons.Add(button1)
'create actions array list
Dim actionArray As New ArrayList()
'create a button action
Dim buttonAction As New ButtonAction(CInt(Fix(ButtonActionType.Press)), actionArray)
'add action to the button
buttonAction.Add(New Jump(3))
'create button actions array list
Dim buttonActions As New ArrayList()
'add btton action to button actions array list
buttonActions.Add(buttonAction)

'create define button object
Dim startButton As New DefineButton()
startButton.ButtonId = buttonId
startButton.Actions = buttonActions


'add define button object to define button array list
defineButton.Add(startButton)



Dim buttonName As String = "buttonname"
' place button in movie clip and define button name for ActionScript
Dim placeObject As New PlaceObject2(startButton.ButtonId, 1)
placeObject.CharacterType = PlaceType.New
placeObject.Name = buttonName ' button name
placeObject.MatrixTransform = New MatrixTransform(1190, 2580)
placeObject.Ratio = 3.051804E-05f
defineButton.Add(placeObject)
defineButton.Add(New ShowFrame())</code></example>
      <example>This example shows you how to use DefineButton() constructor<code>[C#]

//define array list for button
ArrayList defineButton = new ArrayList();
// define shape for button
ArrayList listShape = new ArrayList();
//add sold fill to shape list
listShape.Add(new SolidFill(new RGB(204, 204, 204, 255)));
//create new line list
ArrayList listLine = new ArrayList();
//add solid line to line fill list
listLine.Add(new SolidLine(20, new RGB(0, 0, 0, 255)));
//create new shape
Shape shape = new Shape();
//create style change record object
StyleChangeRecord scr = new StyleChangeRecord(1600, 450);
scr.OverlapFillStyle = 1;
scr.LineStyle = 1;
//add style change record to shape
shape.Add(scr);
//add straight edge records to shape
shape.Add(new StraightEdgeRecord(-1600, 0));
shape.Add(new StraightEdgeRecord(0, -450));
shape.Add(new StraightEdgeRecord(1600, 0));
shape.Add(new StraightEdgeRecord(0, 450));
//create define shape object
DefineShape defineShape =
new DefineShape(shapeId, new Rect(-10, -10, 1610, 460), listShape, listLine, shape);
//add define shape object to define button array list
defineButton.Add(defineShape);

//Define symbol button
int buttonState = (int)ButtonState.Down | (int)ButtonState.Up |
(int)ButtonState.Over | (int)ButtonState.Active;

//create button record object
ButtonRecord button1 = new ButtonRecord(
buttonState,
defineShape.Id,
1);
//create buttons array list
ArrayList buttons = new ArrayList();
//add button record to buttons array list
buttons.Add(button1);
//create actions array list
ArrayList actionArray = new ArrayList();
//create a button action
ButtonAction buttonAction = new ButtonAction((int)ButtonActionType.Press, actionArray);
//add action to the button
buttonAction.Add(new Jump(3));
//create button actions array list
ArrayList buttonActions = new ArrayList();
//add btton action to button actions array list
buttonActions.Add(buttonAction);

//create define button object
DefineButton startButton = new DefineButton();
startButton.ButtonId  = buttonId;
startButton.Actions = buttonActions;


//add define button object to define button array list
defineButton.Add(startButton);



string buttonName = "buttonname";
// place button in movie clip and define button name for ActionScript
PlaceObject2 placeObject = new PlaceObject2(startButton.ButtonId, 1);
placeObject.CharacterType = PlaceType.New;
placeObject.Name = buttonName; // button name
placeObject.MatrixTransform = new MatrixTransform(1190, 2580);
placeObject.Ratio = 3.051804E-05f;
defineButton.Add(placeObject);
defineButton.Add(new ShowFrame());</code></example>
    </member>
    <member name="M:Aspose.Flash.Button.DefineButton.Add(Aspose.Flash.Button.ButtonRecord)">
      <summary>
            Add a button record object to the array of button records.
            </summary>
      <param name="button">A button record object.</param>
    </member>
    <member name="M:Aspose.Flash.Button.DefineButton.Add(Aspose.Flash.Actions.ActionObject)">
      <summary>
            Add an action object to the array of actions.
            </summary>
      <param name="action">An action object.</param>
    </member>
    <member name="P:Aspose.Flash.Button.DefineButton.ButtonId">
      <summary>
            Returns or sets the button identifier.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Button.DefineButton.Shapes">
      <summary>
            Returns or sets the collection of shapes which make up the button.
            Read/write <see cref="T:System.Collections.ArrayList" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Button.DefineButton.Actions">
      <summary>
            Returns or sets the actions to perform.
            Read/write <see cref="T:System.Collections.ArrayList" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Button.DefineButton.EncodedActions">
      <summary>
            Sets the array of encoded actions.
            Write-only <see cref="T:System.Byte" />[].
            </summary>
    </member>
    <member name="T:Aspose.Flash.Button.DefineButton2">
      <summary>
            Extends the capabilities of <see cref="T:Aspose.Flash.Button.DefineButton" /> by allowing actions
            to be triggered by any state transition.
            </summary>
      <example>This example shows you how to use DefineButton2 class<code>[C#]

//define array list for button
ArrayList defineButton = new ArrayList();
// define shape for button
ArrayList listShape = new ArrayList();
//add sold fill to shape list
listShape.Add(new SolidFill(new RGB(204, 204, 204, 255)));
//create new line list
ArrayList listLine = new ArrayList();
//add solid line to line fill list
listLine.Add(new SolidLine(20, new RGB(0, 0, 0, 255)));
//create new shape
Shape shape = new Shape();
//create style change record object
StyleChangeRecord scr = new StyleChangeRecord(1600, 450);
scr.OverlapFillStyle = 1;
scr.LineStyle = 1;
//add style change record to shape
shape.Add(scr);
//add straight edge records to shape
shape.Add(new StraightEdgeRecord(-1600, 0));
shape.Add(new StraightEdgeRecord(0, -450));
shape.Add(new StraightEdgeRecord(1600, 0));
shape.Add(new StraightEdgeRecord(0, 450));
//create define shape object
DefineShape defineShape =
new DefineShape(shapeId, new Rect(-10, -10, 1610, 460), listShape, listLine, shape);
//add define shape object to define button array list
defineButton.Add(defineShape);

//Define symbol button
int buttonState = (int)ButtonState.Down | (int)ButtonState.Up |
(int)ButtonState.Over | (int)ButtonState.Active;

//create button record object
ButtonRecord button1 = new ButtonRecord(
buttonState,
defineShape.Id,
1);
//create buttons array list
ArrayList buttons = new ArrayList();
//add button record to buttons array list
buttons.Add(button1);
//create actions array list
ArrayList actionArray = new ArrayList();
//create bytes array from array list
Byte[] bytes = new Byte[actionArray.Count];
bytes = (Byte[])actionArray.ToArray(typeof(Byte[]));
//create a button action
ButtonAction buttonAction = new ButtonAction((int)ButtonActionType.Press, bytes);
//add action to the button
buttonAction.Add(new Jump(3));
//create button actions array list
ArrayList buttonActions = new ArrayList();
//add btton action to button actions array list
buttonActions.Add(buttonAction);
//create define button 2 object
DefineButton2 startButton = new DefineButton2(buttonId, false, buttons, buttonActions);
//add define button 2 object to define button array list
defineButton.Add(startButton);

string buttonName = "buttonname";
// place button in movie clip and define button name for ActionScript
PlaceObject2 placeObject = new PlaceObject2(startButton.ButtonId, 1);
placeObject.CharacterType = PlaceType.New;
placeObject.Name = buttonName; // button name
placeObject.MatrixTransform = new MatrixTransform(1190, 2580);
placeObject.Ratio = 3.051804E-05f;
defineButton.Add(placeObject);
defineButton.Add(new ShowFrame());</code><code>[Visual Basic]

'define array list for button
Dim defineButton As New ArrayList()
' define shape for button
Dim listShape As New ArrayList()
'add sold fill to shape list
listShape.Add(New SolidFill(New RGB(204, 204, 204, 255)))
'create new line list
Dim listLine As New ArrayList()
'add solid line to line fill list
listLine.Add(New SolidLine(20, New RGB(0, 0, 0, 255)))
'create new shape
Dim shape As New Shape()
'create style change record object
Dim scr As New StyleChangeRecord(1600, 450)
scr.OverlapFillStyle = 1
scr.LineStyle = 1
'add style change record to shape
shape.Add(scr)
'add straight edge records to shape
shape.Add(New StraightEdgeRecord(-1600, 0))
shape.Add(New StraightEdgeRecord(0, -450))
shape.Add(New StraightEdgeRecord(1600, 0))
shape.Add(New StraightEdgeRecord(0, 450))
'create define shape object
Dim defineShape As New DefineShape(shapeId, New Rect(-10, -10, 1610, 460), listShape, listLine, shape)
'add define shape object to define button array list
defineButton.Add(defineShape)

'Define symbol button
Dim buttonState As Integer = CInt(Fix(ButtonState.Down)) Or CInt(Fix(ButtonState.Up)) Or CInt(Fix(ButtonState.Over)) Or CInt(Fix(ButtonState.Active))

'create button record object
Dim button1 As New ButtonRecord(buttonState, defineShape.Id, 1)
'create buttons array list
Dim buttons As New ArrayList()
'add button record to buttons array list
buttons.Add(button1)
'create actions array list
Dim actionArray As New ArrayList()
'create bytes array from array list
Dim bytes(actionArray.Count - 1) As Byte
bytes = CType(actionArray.ToArray(GetType(Byte())), Byte())
'create a button action
Dim buttonAction As New ButtonAction(CInt(Fix(ButtonActionType.Press)), bytes)
'add action to the button
buttonAction.Add(New Jump(3))
'create button actions array list
Dim buttonActions As New ArrayList()
'add btton action to button actions array list
buttonActions.Add(buttonAction)
'create define button 2 object
Dim startButton As New DefineButton2(buttonId, False, buttons, buttonActions)
'add define button 2 object to define button array list
defineButton.Add(startButton)

Dim buttonName As String = "buttonname"
' place button in movie clip and define button name for ActionScript
Dim placeObject As New PlaceObject2(startButton.ButtonId, 1)
placeObject.CharacterType = PlaceType.New
placeObject.Name = buttonName ' button name
placeObject.MatrixTransform = New MatrixTransform(1190, 2580)
placeObject.Ratio = 3.051804E-05f
defineButton.Add(placeObject)
defineButton.Add(New ShowFrame())</code></example>
    </member>
    <member name="M:Aspose.Flash.Button.DefineButton2.#ctor(System.Int32,System.Boolean,System.Collections.ArrayList,System.Collections.ArrayList)">
      <summary>
            DefineButton2 constructor.
            </summary>
      <param name="id">The button identifier.</param>
      <param name="menuButton">Determines whether the button is menu.</param>
      <param name="buttonRecordArray">The array of button shapes.</param>
      <param name="buttonEventArray">The array of button actions.</param>
      <example>This example shows you how to use DefineButton2(Int32, Boolean, ArrayList, ArrayList) constructor<code>[Visual Basic]

'define array list for button
Dim defineButton As New ArrayList()
' define shape for button
Dim listShape As New ArrayList()
'add sold fill to shape list
listShape.Add(New SolidFill(New RGB(204, 204, 204, 255)))
'create new line list
Dim listLine As New ArrayList()
'add solid line to line fill list
listLine.Add(New SolidLine(20, New RGB(0, 0, 0, 255)))
'create new shape
Dim shape As New Shape()
'create style change record object
Dim scr As New StyleChangeRecord(1600, 450)
scr.OverlapFillStyle = 1
scr.LineStyle = 1
'add style change record to shape
shape.Add(scr)
'add straight edge records to shape
shape.Add(New StraightEdgeRecord(-1600, 0))
shape.Add(New StraightEdgeRecord(0, -450))
shape.Add(New StraightEdgeRecord(1600, 0))
shape.Add(New StraightEdgeRecord(0, 450))
'create define shape object
Dim defineShape As New DefineShape(shapeId, New Rect(-10, -10, 1610, 460), listShape, listLine, shape)
'add define shape object to define button array list
defineButton.Add(defineShape)

'Define symbol button
Dim buttonState As Integer = CInt(Fix(ButtonState.Down)) Or CInt(Fix(ButtonState.Up)) Or CInt(Fix(ButtonState.Over)) Or CInt(Fix(ButtonState.Active))

'create button record object
Dim button1 As New ButtonRecord(buttonState, defineShape.Id, 1)
'create buttons array list
Dim buttons As New ArrayList()
'add button record to buttons array list
buttons.Add(button1)
'create actions array list
Dim actionArray As New ArrayList()
'create bytes array from array list
Dim bytes(actionArray.Count - 1) As Byte
bytes = CType(actionArray.ToArray(GetType(Byte())), Byte())
'create a button action
Dim buttonAction As New ButtonAction(CInt(Fix(ButtonActionType.Press)), bytes)
'add action to the button
buttonAction.Add(New Jump(3))
'create button actions array list
Dim buttonActions As New ArrayList()
'add btton action to button actions array list
buttonActions.Add(buttonAction)
'create define button 2 object
Dim startButton As New DefineButton2(buttonId, False, buttons, buttonActions)
'add define button 2 object to define button array list
defineButton.Add(startButton)

Dim buttonName As String = "buttonname"
' place button in movie clip and define button name for ActionScript
Dim placeObject As New PlaceObject2(startButton.ButtonId, 1)
placeObject.CharacterType = PlaceType.New
placeObject.Name = buttonName ' button name
placeObject.MatrixTransform = New MatrixTransform(1190, 2580)
placeObject.Ratio = 3.051804E-05f
defineButton.Add(placeObject)
defineButton.Add(New ShowFrame())</code></example>
      <example>This example shows you how to use DefineButton2 constructor<code>[C#]

//define array list for button
ArrayList defineButton = new ArrayList();
// define shape for button
ArrayList listShape = new ArrayList();
//add sold fill to shape list
listShape.Add(new SolidFill(new RGB(204, 204, 204, 255)));
//create new line list
ArrayList listLine = new ArrayList();
//add solid line to line fill list
listLine.Add(new SolidLine(20, new RGB(0, 0, 0, 255)));
//create new shape
Shape shape = new Shape();
//create style change record object
StyleChangeRecord scr = new StyleChangeRecord(1600, 450);
scr.OverlapFillStyle = 1;
scr.LineStyle = 1;
//add style change record to shape
shape.Add(scr);
//add straight edge records to shape
shape.Add(new StraightEdgeRecord(-1600, 0));
shape.Add(new StraightEdgeRecord(0, -450));
shape.Add(new StraightEdgeRecord(1600, 0));
shape.Add(new StraightEdgeRecord(0, 450));
//create define shape object
DefineShape defineShape =
new DefineShape(shapeId, new Rect(-10, -10, 1610, 460), listShape, listLine, shape);
//add define shape object to define button array list
defineButton.Add(defineShape);

//Define symbol button
int buttonState = (int)ButtonState.Down | (int)ButtonState.Up |
(int)ButtonState.Over | (int)ButtonState.Active;

//create button record object
ButtonRecord button1 = new ButtonRecord(
buttonState,
defineShape.Id,
1);
//create buttons array list
ArrayList buttons = new ArrayList();
//add button record to buttons array list
buttons.Add(button1);
//create actions array list
ArrayList actionArray = new ArrayList();
//create bytes array from array list
Byte[] bytes = new Byte[actionArray.Count];
bytes = (Byte[])actionArray.ToArray(typeof(Byte[]));
//create a button action
ButtonAction buttonAction = new ButtonAction((int)ButtonActionType.Press, bytes);
//add action to the button
buttonAction.Add(new Jump(3));
//create button actions array list
ArrayList buttonActions = new ArrayList();
//add btton action to button actions array list
buttonActions.Add(buttonAction);
//create define button 2 object
DefineButton2 startButton = new DefineButton2(buttonId, false, buttons, buttonActions);
//add define button 2 object to define button array list
defineButton.Add(startButton);

string buttonName = "buttonname";
// place button in movie clip and define button name for ActionScript
PlaceObject2 placeObject = new PlaceObject2(startButton.ButtonId, 1);
placeObject.CharacterType = PlaceType.New;
placeObject.Name = buttonName; // button name
placeObject.MatrixTransform = new MatrixTransform(1190, 2580);
placeObject.Ratio = 3.051804E-05f;
defineButton.Add(placeObject);
defineButton.Add(new ShowFrame());</code></example>
    </member>
    <member name="M:Aspose.Flash.Button.DefineButton2.#ctor(System.Int32,System.Boolean,System.Collections.ArrayList,System.Byte[])">
      <summary>
            DefineButton2 constructor.
            </summary>
      <param name="id">The button identifier.</param>
      <param name="menuButton">Determines whether the button is menu.</param>
      <param name="buttonRecordArray">The array of button shapes.</param>
      <param name="bytes">The encoded button actions.</param>
      <example>This example shows you how to use DefineButton2(Int32, Boolean, ArrayList, Byte[]) constructor<code>[C#]

//define array list for button
ArrayList defineButton = new ArrayList();
// define shape for button
ArrayList listShape = new ArrayList();
//add sold fill to shape list
listShape.Add(new SolidFill(new RGB(204, 204, 204, 255)));
//create new line list
ArrayList listLine = new ArrayList();
//add solid line to line fill list
listLine.Add(new SolidLine(20, new RGB(0, 0, 0, 255)));
//create new shape
Shape shape = new Shape();
//create style change record object
StyleChangeRecord scr = new StyleChangeRecord(1600, 450);
scr.OverlapFillStyle = 1;
scr.LineStyle = 1;
//add style change record to shape
shape.Add(scr);
//add straight edge records to shape
shape.Add(new StraightEdgeRecord(-1600, 0));
shape.Add(new StraightEdgeRecord(0, -450));
shape.Add(new StraightEdgeRecord(1600, 0));
shape.Add(new StraightEdgeRecord(0, 450));
//create define shape object
DefineShape defineShape =
new DefineShape(shapeId, new Rect(-10, -10, 1610, 460), listShape, listLine, shape);
//add define shape object to define button array list
defineButton.Add(defineShape);

//Define symbol button
int buttonState = (int)ButtonState.Down | (int)ButtonState.Up |
(int)ButtonState.Over | (int)ButtonState.Active;

//create button record object
ButtonRecord button1 = new ButtonRecord(
buttonState,
defineShape.Id,
1);
//create buttons array list
ArrayList buttons = new ArrayList();
//add button record to buttons array list
buttons.Add(button1);
//create actions array list
ArrayList actionArray = new ArrayList();
//create bytes array from array list
Byte[] bytes = new Byte[actionArray.Count];
bytes = (Byte[])actionArray.ToArray(typeof(Byte[]));
//create a button action
ButtonAction buttonAction = new ButtonAction((int)ButtonActionType.Press, bytes);
//add action to the button
buttonAction.Add(new Jump(3));
//create button actions array list
ArrayList buttonActions = new ArrayList();
//add btton action to button actions array list
buttonActions.Add(buttonAction);
//convert button actions array to bytes array
Byte[] bytes = new Byte[buttonActions.Count];
bytes = (Byte[])buttonActions.ToArray(typeof(Byte[]));
//create define button 2 object
DefineButton2 startButton = new DefineButton2(buttonId, false, buttons, buttonActions);
//add define button 2 object to define button array list
defineButton.Add(startButton);

string buttonName = "buttonname";
// place button in movie clip and define button name for ActionScript
PlaceObject2 placeObject = new PlaceObject2(startButton.ButtonId, 1);
placeObject.CharacterType = PlaceType.New;
placeObject.Name = buttonName; // button name
placeObject.MatrixTransform = new MatrixTransform(1190, 2580);
placeObject.Ratio = 3.051804E-05f;
defineButton.Add(placeObject);
defineButton.Add(new ShowFrame());</code><code>[Visual Basic]

'define array list for button
Dim defineButton As New ArrayList()
' define shape for button
Dim listShape As New ArrayList()
'add sold fill to shape list
listShape.Add(New SolidFill(New RGB(204, 204, 204, 255)))
'create new line list
Dim listLine As New ArrayList()
'add solid line to line fill list
listLine.Add(New SolidLine(20, New RGB(0, 0, 0, 255)))
'create new shape
Dim shape As New Shape()
'create style change record object
Dim scr As New StyleChangeRecord(1600, 450)
scr.OverlapFillStyle = 1
scr.LineStyle = 1
'add style change record to shape
shape.Add(scr)
'add straight edge records to shape
shape.Add(New StraightEdgeRecord(-1600, 0))
shape.Add(New StraightEdgeRecord(0, -450))
shape.Add(New StraightEdgeRecord(1600, 0))
shape.Add(New StraightEdgeRecord(0, 450))
'create define shape object
Dim defineShape As New DefineShape(shapeId, New Rect(-10, -10, 1610, 460), listShape, listLine, shape)
'add define shape object to define button array list
defineButton.Add(defineShape)

'Define symbol button
Dim buttonState As Integer = CInt(Fix(ButtonState.Down)) Or CInt(Fix(ButtonState.Up)) Or CInt(Fix(ButtonState.Over)) Or CInt(Fix(ButtonState.Active))

'create button record object
Dim button1 As New ButtonRecord(buttonState, defineShape.Id, 1)
'create buttons array list
Dim buttons As New ArrayList()
'add button record to buttons array list
buttons.Add(button1)
'create actions array list
Dim actionArray As New ArrayList()
'create bytes array from array list
Dim bytes(actionArray.Count - 1) As Byte
bytes = CType(actionArray.ToArray(GetType(Byte())), Byte())
'create a button action
Dim buttonAction As New ButtonAction(CInt(Fix(ButtonActionType.Press)), bytes)
'add action to the button
buttonAction.Add(New Jump(3))
'create button actions array list
Dim buttonActions As New ArrayList()
'add btton action to button actions array list
buttonActions.Add(buttonAction)
'convert button actions array to bytes array
Dim bytes(buttonActions.Count - 1) As Byte
bytes = CType(buttonActions.ToArray(GetType(Byte())), Byte())
'create define button 2 object
Dim startButton As New DefineButton2(buttonId, False, buttons, buttonActions)
'add define button 2 object to define button array list
defineButton.Add(startButton)

Dim buttonName As String = "buttonname"
' place button in movie clip and define button name for ActionScript
Dim placeObject As New PlaceObject2(startButton.ButtonId, 1)
placeObject.CharacterType = PlaceType.New
placeObject.Name = buttonName ' button name
placeObject.MatrixTransform = New MatrixTransform(1190, 2580)
placeObject.Ratio = 3.051804E-05f
defineButton.Add(placeObject)
defineButton.Add(New ShowFrame())</code></example>
    </member>
    <member name="M:Aspose.Flash.Button.DefineButton2.Add(Aspose.Flash.Button.ButtonRecord)">
      <summary>
            Add a ButtonRecord object to the array of button records.
            </summary>
      <param name="button">A ButtonRecord object.</param>
    </member>
    <member name="M:Aspose.Flash.Button.DefineButton2.Add(Aspose.Flash.Button.ButtonAction)">
      <summary>
            Add a ButtonAction object to the array of button actions.
            </summary>
      <param name="action">A ButtonAction object.</param>
    </member>
    <member name="P:Aspose.Flash.Button.DefineButton2.ButtonId">
      <summary>
            Returns or sets the button identifier.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Button.DefineButton2.TrackAsMenu">
      <summary>
            Determines whether the button tracked as menu.
            <code><b>True</b>  - track as menu button.
            <b>False</b> - track as push button.
            </code></summary>
    </member>
    <member name="P:Aspose.Flash.Button.DefineButton2.Shapes">
      <summary>
            Returns or sets the collection of shapes which make up the button.
            Read/write <see cref="T:System.Collections.ArrayList" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Button.DefineButton2.Actions">
      <summary>
            Returns or sets an actions executed at the particular button event.
            Read/write <see cref="T:System.Collections.ArrayList" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Button.DefineButton2.EncodedActions">
      <summary>
            Sets the array of encoded actions.
            Write-only <see cref="T:System.Byte" />[].
            </summary>
    </member>
    <member name="T:Aspose.Flash.Button.DefineButtonColorTransform">
      <summary>
            DefineButtonColorTransform class defines the color transformation
            for each shape and text character in a button.
            </summary>
      <remarks>
            This class is not used for DefineButton2, which has own color transformation.
            </remarks>
    </member>
    <member name="M:Aspose.Flash.Button.DefineButtonColorTransform.#ctor(System.Int32,Aspose.Flash.Basic.ColorTransform)">
      <summary>
            DefineButtonColorTransform constructor.
            </summary>
      <param name="id">The button identifier.</param>
      <param name="colorTransform">The color transformation.</param>
    </member>
    <member name="P:Aspose.Flash.Button.DefineButtonColorTransform.ButtonId">
      <summary>
            Returns or sets the button Id.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Button.DefineButtonColorTransform.ButtonColorTransform">
      <summary>
            Returns or sets the color transformation.
            Read/write <see cref="T:Aspose.Flash.Basic.ColorTransform" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Button.DefineButtonSound">
      <summary>
            Represents sounds which are played on button's state transitions.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Button.DefineButtonSound.#ctor(System.Int32,System.Int32,Aspose.Flash.Sound.SoundInfo)">
      <summary>
            DefineButtonSound constructor.
            </summary>
      <param name="id">The button identifier.</param>
      <param name="eventCode">The button event. See <see cref="T:Aspose.Flash.Button.ButtonActionType" />.</param>
      <param name="sound">The <see cref="T:Aspose.Flash.Sound.SoundInfo" /> object.</param>
    </member>
    <member name="M:Aspose.Flash.Button.DefineButtonSound.GetSoundForEvent(System.Int32)">
      <summary>
            Returns the <see cref="T:Aspose.Flash.Sound.SoundInfo" /> object for the specified event.
            </summary>
      <param name="eventCode">The button event. See <see cref="T:Aspose.Flash.Button.ButtonActionType" />.</param>
    </member>
    <member name="M:Aspose.Flash.Button.DefineButtonSound.SetSoundForEvent(System.Int32,Aspose.Flash.Sound.SoundInfo)">
      <summary>
            Sets the <see cref="T:Aspose.Flash.Sound.SoundInfo" /> object for the specified button event.
            </summary>
      <param name="eventCode">The button event. See <see cref="T:Aspose.Flash.Button.ButtonActionType" />.</param>
      <param name="sound">The <see cref="T:Aspose.Flash.Sound.SoundInfo" /> object.</param>
    </member>
    <member name="P:Aspose.Flash.Button.DefineButtonSound.ButtonId">
      <summary>
            Returns or sets the Id of the button these sounds apply to.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Swf.FlashContainer">
      <summary>
            The main container used to store the objects which represent the data structures in a Flash file.
            Also contains the attributes Which create the header information of a Flash file.
            </summary>
      <example>This example shows you how to use FlashContainer class<code>[C#]

//Create a flash container
FlashContainer fc = new FlashContainer();
//set FrameRate
fc.FrameRate = 12.0f;
//set FrameSize
fc.FrameSize = new Rect(0, 0, 4000, 4000);

//define one style change record to set its fill style and line style
StyleChangeRecord scr = new StyleChangeRecord(-1000, -1000);

scr.FillStyle = 1;  //Select RED    see Below
scr.LineStyle = 2;  //Select YELLOW see Below

//To define rectangle, we need to define four straigh edge records
//Define four edges of Rectangle
StraightEdgeRecord ser1 = new StraightEdgeRecord(2000, 0);
StraightEdgeRecord ser2 = new StraightEdgeRecord(0, 2000);
StraightEdgeRecord ser3 = new StraightEdgeRecord(-2000, 0);
StraightEdgeRecord ser4 = new StraightEdgeRecord(0, -2000);

//Put all the five shape records in a Aspose.Flash.Shapes.Shape
//object, this is just a collection that will hold shape records
//for DefineShape2 tag
Shape shapeRect = new Shape();

shapeRect.Add(scr);
shapeRect.Add(ser1);
shapeRect.Add(ser2);
shapeRect.Add(ser3);
shapeRect.Add(ser4);

//Define fill styles array
//Add two colors RED and BLUE in fill styles array
ArrayList fillStyles = new ArrayList();
fillStyles.Add(new SolidFill(new RGB(255, 0, 0)));
fillStyles.Add(new SolidFill(new RGB(0, 255, 0)));

//Define line styles array
//Add two colors GREEN and YELLOW in line styles array
ArrayList lineStyles = new ArrayList();
lineStyles.Add(new SolidLine(10, new RGB(0, 0, 255)));
lineStyles.Add(new SolidLine(50, new RGB(255, 255, 0)));

//At this point we have all the things to create an instance of
//DefineShape2 class

DefineShape2 defineShape = new DefineShape2(fc.NewIdentifier(),
new Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect);

//Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape);

//Place the Rectangle Character on Display List
PlaceObject2 placeObj = new PlaceObject2(defineShape.Id, 1);

//Translate the origin of newly placed object
placeObj.MatrixTransform = new MatrixTransform(2000, 2000);

//Add CONTROL TAG created above inside the flash container
fc.Add(placeObj);

//Show the next frame using CONTROL TAG and add it inside the
//flash container
fc.Add(new ShowFrame());

//Now write the flash container on disk to show its output
fc.Write("c:\\out.swf");</code><code>[Visual Basic]

'Create a flash container
Dim fc As New FlashContainer()
'set FrameRate
fc.FrameRate = 12.0f
'set FrameSize
fc.FrameSize = New Rect(0, 0, 4000, 4000)

'define one style change record to set its fill style and line style
Dim scr As New StyleChangeRecord(-1000, -1000)

scr.FillStyle = 1 'Select RED see Below
scr.LineStyle = 2 'Select YELLOW see Below

'To define rectangle, we need to define four straigh edge records
'Define four edges of Rectangle
Dim ser1 As New StraightEdgeRecord(2000, 0)
Dim ser2 As New StraightEdgeRecord(0, 2000)
Dim ser3 As New StraightEdgeRecord(-2000, 0)
Dim ser4 As New StraightEdgeRecord(0, -2000)

'Put all the five shape records in a Aspose.Flash.Shapes.Shape
'object, this is just a collection that will hold shape records
'for DefineShape2 tag
Dim shapeRect As New Shape()

shapeRect.Add(scr)
shapeRect.Add(ser1)
shapeRect.Add(ser2)
shapeRect.Add(ser3)
shapeRect.Add(ser4)

'Define fill styles array
'Add two colors RED and BLUE in fill styles array
Dim fillStyles As New ArrayList()
fillStyles.Add(New SolidFill(New RGB(255, 0, 0)))
fillStyles.Add(New SolidFill(New RGB(0, 255, 0)))

'Define line styles array
'Add two colors GREEN and YELLOW in line styles array
Dim lineStyles As New ArrayList()
lineStyles.Add(New SolidLine(10, New RGB(0, 0, 255)))
lineStyles.Add(New SolidLine(50, New RGB(255, 255, 0)))

'At this point we have all the things to create an instance of
'DefineShape2 class

Dim defineShape As New DefineShape2(fc.NewIdentifier(), New Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect)

'Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape)

'Place the Rectangle Character on Display List
Dim placeObj As New PlaceObject2(defineShape.Id, 1)

'Translate the origin of newly placed object
placeObj.MatrixTransform = New MatrixTransform(2000, 2000)

'Add CONTROL TAG created above inside the flash container
fc.Add(placeObj)

'Show the next frame using CONTROL TAG and add it inside the
'flash container
fc.Add(New ShowFrame())

'Now write the flash container on disk to show its output
fc.Write("c:\out.swf")</code></example>
    </member>
    <member name="M:Aspose.Flash.Swf.FlashContainer.Render">
      <summary>
            Renders the container's first frame.
            </summary>
      <returns>Rendered image.</returns>
      <remarks>
            Default dpi and pixel format settings will be used(96.0 for DPI and 32bppArgb for pixel format), to control this, use another overload instead.
            Supported starting from .NET 2.0.
            </remarks>
    </member>
    <member name="M:Aspose.Flash.Swf.FlashContainer.Render(System.Int32)">
      <summary>
            Renders the specified container's frame.
            </summary>
      <param name="frameNumber">The frame number.</param>
      <returns>Rendered image.</returns>
      <remarks>
            Default dpi and pixel format settings will be used(96.0 for DPI and 32bppArgb for pixel format), to control this, use another overload instead.
            Supported starting from .NET 2.0.
            </remarks>
      <exception cref="T:System.ArgumentOutOfRangeException">If frame number doesn't fall into valid range [0, <see cref="P:Aspose.Flash.Swf.FlashContainer.NumberOfFrames" /> ).</exception>
    </member>
    <member name="M:Aspose.Flash.Swf.FlashContainer.Render(System.Int32,System.Single,System.Single,System.Drawing.Imaging.PixelFormat)">
      <summary>
             Renders the specified container's frame.
             </summary>
      <param name="frameNumber">The frame number.</param>
      <param name="dpiX">The dpi X.</param>
      <param name="dpiY">The dpi Y.</param>
      <param name="pixelFormat">The pixel format.</param>
      <returns>Rendered image.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">If frame number doesn't fall into valid range [0, <see cref="P:Aspose.Flash.Swf.FlashContainer.NumberOfFrames" /> ).</exception>
      <remarks>Supported starting from .NET 2.0.</remarks>
    </member>
    <member name="M:Aspose.Flash.Swf.FlashContainer.RenderToFlv(System.IO.Stream)">
      <summary>
            Renders the movie as FLV to the given stream using the build-in ScreenVideo codec.
            </summary>
      <param name="stream">The stream object to render movie into.</param>
      <remarks>
            Please note that this method has some limitations, see the "Render frame as Image" section in documentation for detailed description.
            Supported starting from .NET 2.0.
            </remarks>&gt;
        </member>
    <member name="M:Aspose.Flash.Swf.FlashContainer.RenderToFlv(System.IO.Stream,System.Boolean)">
      <summary>
            Renders the movie as FLV to the given stream using the build-in ScreenVideo codec.
            </summary>
      <param name="stream">The stream object to render movie into.</param>
      <param name="preserveSound">if set to <c>true</c> then sound from the main timeline is preserved in resulting FLV.</param>
      <remarks>
            Please note that this method has some limitations, see the "Render frame as Image" section in documentation for detailed description.
            Sound stream is being constructed by using only <see cref="T:Aspose.Flash.Sound.SoundStreamHead" />, <see cref="T:Aspose.Flash.Sound.SoundStreamHead2" />,
            <see cref="T:Aspose.Flash.Sound.SoundStreamBlock" /> tags defined within the  movie's timeline.
            Supported starting from .NET 2.0, requres assembly to be executed under full-trust.
            </remarks>
    </member>
    <member name="M:Aspose.Flash.Swf.FlashContainer.RenderToFlv(System.IO.Stream,Aspose.Flash.Video.VideoCodec)">
      <summary>
            Renders the movie as FLV to the given stream using the specified codec, it is searched in <see cref="P:Aspose.Flash.Swf.FlashContainer.Codecs" />.
            </summary>
      <param name="stream">The stream object to render movie into.</param>
      <remarks>
            Please note that this method has some limitations, see the "Render frame as Image" section in documentation for detailed description.
            </remarks>
      <exception cref="T:Aspose.Flash.FlashException">If suitable codec is not found.</exception>
    </member>
    <member name="M:Aspose.Flash.Swf.FlashContainer.RenderToFlv(System.IO.Stream,Aspose.Flash.Video.VideoCodec,System.Boolean)">
      <summary>
            Renders the movie as FLV to the given stream using the specified codec, it is searched in <see cref="P:Aspose.Flash.Swf.FlashContainer.Codecs" />.
            </summary>
      <param name="stream">The stream object to render movie into.</param>
      <param name="codec">The codec.</param>
      <param name="preserveSound">if set to <c>true</c> then sound from the main timeline is preserved in resulting FLV.</param>
      <remarks>
            Please note that this method has some limitations, see the "Render frame as Image" section in documentation for detailed description.
            Sound stream is being constructed by using only <see cref="T:Aspose.Flash.Sound.SoundStreamHead" />, <see cref="T:Aspose.Flash.Sound.SoundStreamHead2" />,
            <see cref="T:Aspose.Flash.Sound.SoundStreamBlock" /> tags defined within the  movie's timeline.
            </remarks>
      <exception cref="T:Aspose.Flash.FlashException">If suitable codec is not found.</exception>
    </member>
    <member name="M:Aspose.Flash.Swf.FlashContainer.RenderToFlv(System.IO.Stream,Aspose.Flash.Video.VideoCodec,System.String)">
      <summary>
            Renders the movie as FLV to the given stream using the specified codec and codec ID, it is searched in <see cref="P:Aspose.Flash.Swf.FlashContainer.Codecs" />.
            </summary>
      <param name="stream">The stream object to render movie into.</param>
      <param name="codec">The codec.</param>
      <param name="codecId">The codec id.</param>
      <remarks>
            Please note that this method has some limitations, see the "Render frame as Image" section in documentation for detailed description.
            </remarks>
      <exception cref="T:Aspose.Flash.FlashException">If suitable codec is not found.</exception>
    </member>
    <member name="M:Aspose.Flash.Swf.FlashContainer.RenderToFlv(System.IO.Stream,Aspose.Flash.Video.VideoCodec,System.String,System.Boolean)">
      <summary>
            Renders the movie as FLV to the given stream using the specified codec and codec ID, it is searched in <see cref="P:Aspose.Flash.Swf.FlashContainer.Codecs" />.
            </summary>
      <param name="stream">The stream object to render movie into.</param>
      <param name="codec">The codec.</param>
      <param name="codecId">The codec id.</param>
      <param name="preserveSound">if set to <c>true</c> then sound from the main timeline is preserved in resulting FLV.</param>
      <remarks>
            Please note that this method has some limitations, see the "Render frame as Image" section in documentation for detailed description.
            Sound stream is being constructed by using only <see cref="T:Aspose.Flash.Sound.SoundStreamHead" />, <see cref="T:Aspose.Flash.Sound.SoundStreamHead2" />,
            <see cref="T:Aspose.Flash.Sound.SoundStreamBlock" /> tags defined within the  movie's timeline.
            </remarks>
      <exception cref="T:Aspose.Flash.FlashException">If suitable codec is not found.</exception>
    </member>
    <member name="M:Aspose.Flash.Swf.FlashContainer.RenderToFlv(Aspose.Flash.Video.Codec,System.IO.Stream,Aspose.Flash.Video.VideoCodec,System.Boolean)">
      <summary>
            Renders container to FLV.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Swf.FlashContainer.RenderToGIF(System.IO.Stream)">
      <summary>
            Renders the movie as animated GIF to the given stream using.
            </summary>
      <param name="stream">The stream object to render movie into.</param>
      <exception cref="T:System.ArgumentNullException">If passed stream is null.</exception>
      <remarks>
            Please note that this method has some limitations, see the "Render frame as Image" section in documentation for detailed description
            Supported starting from .NET 2.0.
            </remarks>
    </member>
    <member name="M:Aspose.Flash.Swf.FlashContainer.ExtractSoundStream(System.IO.Stream)">
      <summary>
            Extracts the sound data embedded into the movie, and writes it into the given stream.
            If there are several sound streams defined within the movie, they will be merged into one.
            Sound data is exported as FLV stream, containing audio data only.
            </summary>
      <param name="stream">The stream.</param>
      <remarks>Please note that sound stream is being constructed by using only <see cref="T:Aspose.Flash.Sound.SoundStreamHead" />, <see cref="T:Aspose.Flash.Sound.SoundStreamHead2" />,
            <see cref="T:Aspose.Flash.Sound.SoundStreamBlock" /> tags defined withing the  movie.
            Supported starting from .NET 2.0.
            </remarks>
      <exception cref="T:System.ArgumentNullException">If <paramref name="stream" /> is <c>null</c>.</exception>
    </member>
    <member name="M:Aspose.Flash.Swf.FlashContainer.FromSoundData(System.String,System.Single)">
      <summary>
            Creates a <see cref="T:Aspose.Flash.Swf.FlashContainer" /> from sound file.
            Only mp3 encoded sound files with constant bitrate are supported.
            </summary>
      <param name="fileName">Name of the file.</param>
      <param name="frameRate">The frame rate for the movie.</param>
      <returns>Created flash container.</returns>
      <exception cref="T:System.ArgumentNullException">If <paramref name="fileName" /> is <c>null</c>.</exception>
      <remarks>Supported starting from .NET 2.0.</remarks>
    </member>
    <member name="M:Aspose.Flash.Swf.FlashContainer.FromSoundData(System.IO.Stream,System.Single)">
      <summary>
            Creates a <see cref="T:Aspose.Flash.Swf.FlashContainer" /> from sound stream.
            Only mp3 encoded sound files with constant bitrate are supported.
            Sampling rates allowed are: 44100Hz, 22050Hz, 11025Hz.
            </summary>
      <param name="soundStream">The sound stream.</param>
      <param name="frameRate">The frame rate for the movie.</param>
      <returns>Flash container  object with embedded soundstream.</returns>
      <exception cref="T:System.ArgumentNullException">If <paramref name="soundStream" /> is <c>null</c>.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="frameRate" /> is not a positive value.</exception>
      <exception cref="T:Aspose.Flash.FlashException">If mp3 data reading fails or there was an error with containter creation.</exception>
      <remarks>Supported starting from .NET 2.0.</remarks>
    </member>
    <member name="M:Aspose.Flash.Swf.FlashContainer.CreateSlideShow(System.String,System.Drawing.Size,Aspose.Flash.Swf.TransitionEffect,Aspose.Flash.Bitmaps.FlashBitmapType)">
      <summary>
            Creates the slide show.
            </summary>
      <param name="pathToFolderWithImages">The path to folder with images for slideshow.</param>
      <param name="frameSize">Size of the frame in twips.</param>
      <param name="effect">The effect applied.</param>
      <param name="bitmapType">Defines how bitmap should be stored.</param>
      <returns>
            FlashContainer that contains the slideshow animation with the <see cref="P:Aspose.Flash.Swf.FlashContainer.FrameRate" /> set to 1 by default.
            </returns>
      <remarks>Supported starting from .NET 2.0.</remarks>
    </member>
    <member name="M:Aspose.Flash.Swf.FlashContainer.Write(System.String,System.String)">
      <summary>
            Saves this container as EXE file(projector).
            </summary>
      <param name="fileName">Name of the file to write into.</param>
      <param name="pathToStandalonePlayer">The path to standalone player(FlashPlayer.exe or SAFlashPlayer.exe) it will be used for the creation of the executable file.
            See http://www.adobe.com/support/flashplayer/downloads.html for the appropriate standalone player version.
            </param>
      <remarks>Supported starting from .NET 2.0.</remarks>
    </member>
    <member name="M:Aspose.Flash.Swf.FlashContainer.FromEXE(System.String)">
      <summary>
            Extracts swf file from the given exe file(projector).
            </summary>
      <param name="pathToProjector">The path to projector.</param>
      <returns>FlashContainer populated with swf content.</returns>
      <remarks>Supported starting from .NET 2.0.</remarks>
      <exception cref="T:System.ArgumentNullException">if <paramref name="pathToProjector" /> is null or empty.</exception>
      <exception cref="T:System.IO.InvalidDataException">if given file doesn't contain a valid data.</exception>
    </member>
    <member name="M:Aspose.Flash.Swf.FlashContainer.FromEXE(System.IO.Stream)">
      <summary>
            Extracts swf file from the given projector stream.
            </summary>
      <param name="sourceStream">The source stream, containing projector's content.</param>
      <returns>
            FlashContainer populated with swf content.
            </returns>
      <remarks>Supported starting from .NET 2.0.</remarks>
      <exception cref="T:System.ArgumentNullException">if <paramref name="sourceStream" /> is null.</exception>
      <exception cref="T:Aspose.Flash.FlashException">if <paramref name="sourceStream" /> doesn't contain a valid data.</exception>
    </member>
    <member name="M:Aspose.Flash.Swf.FlashContainer.#ctor">
      <summary>
            Default constructor.
            </summary>
      <example>This example shows you how to use FlashContainer constructor<code>[C#]

//Create a flash container
FlashContainer fc = new FlashContainer();
//set FrameRate
fc.FrameRate = 12.0f;
//set FrameSize
fc.FrameSize = new Rect(0, 0, 4000, 4000);</code><code>[Visual Basic]

'Create a flash container
Dim fc As New FlashContainer()
'set FrameRate
fc.FrameRate = 12.0f
'set FrameSize
fc.FrameSize = New Rect(0, 0, 4000, 4000)</code></example>
    </member>
    <member name="M:Aspose.Flash.Swf.FlashContainer.#ctor(System.Int32)">
      <summary>
            FlashContainer constructor.
            </summary>
      <param name="startId">The start Id for numerating flash objects.</param>
      <example>This example shows you how to use FlashContainer constructor with a start id for numerating flash objects<code>[C#]

//Create a flash container
FlashContainer fc = new FlashContainer(5);
//set FrameRate
fc.FrameRate = 12.0f;
//set FrameSize
fc.FrameSize = new Rect(0, 0, 4000, 4000);</code><code>[Visual Basic]

'Create a flash container
Dim fc As New FlashContainer(5)
'set FrameRate
fc.FrameRate = 12.0f
'set FrameSize
fc.FrameSize = New Rect(0, 0, 4000, 4000)</code></example>
    </member>
    <member name="M:Aspose.Flash.Swf.FlashContainer.#ctor(Aspose.Flash.Basic.Rect,System.Single)">
      <summary>
            FlashContainer constructor.
            </summary>
      <param name="bounds">Bounding rectangle which defines the size of frames.</param>
      <param name="framesPerSecond">Frame rate of a flash movie.</param>
      <example>This example shows you how to use FlashContainer constructor with bounding rectangle and frame rate<code>[C#]

//Create a flash container
FlashContainer fc = new FlashContainer(new Rect(0, 0, 4000, 4000), 12.0f);</code><code>[Visual Basic]

'Create a flash container
Dim fc As New FlashContainer(New Rect(0, 0, 4000, 4000), 12.0f)</code></example>
    </member>
    <member name="M:Aspose.Flash.Swf.FlashContainer.#ctor(System.String,System.String,System.Int32,Aspose.Flash.Basic.Rect,System.Single,System.Collections.ArrayList)">
      <summary>
            FlashContainer constructor.
            <param name="encoding">Encoding format used to encode and decode strings.</param><param name="signature">String indicating whether the flash file should be compressed. See <see cref="P:Aspose.Flash.Swf.FlashContainer.Signature" /> property.</param><param name="version">Flash version number.</param><param name="bounds">Bounding rectangle which defines the size of frames.</param><param name="framesPerSecond">Frame rate of a flash movie.</param><param name="array">Collection of swf tags or objects.</param></summary>
    </member>
    <member name="M:Aspose.Flash.Swf.FlashContainer.#ctor(System.String)">
      <summary>
            FlashContainer constructor.
            </summary>
      <param name="fileName">Path to the swf file which should be opened.</param>
      <example>This example shows you how to use FlashContainer constructor with input file path<code>[C#]

//Create a flash container
FlashContainer fc = new FlashContainer("c:\\input.swf");</code><code>[Visual Basic]

'Create a flash container
Dim fc As New FlashContainer("c:\input.swf")</code></example>
    </member>
    <member name="M:Aspose.Flash.Swf.FlashContainer.#ctor(System.String,Aspose.Flash.Swf.LoadingStrategy)">
      <summary>
            FlashContainer constructor.
            </summary>
      <param name="fileName">Path to the swf file which should be opened.</param>
      <param name="strategy">The strategy for load.</param>
    </member>
    <member name="M:Aspose.Flash.Swf.FlashContainer.#ctor(System.IO.Stream)">
      <summary>
            FlashContainer constructor.
            </summary>
      <param name="inputStream">Input stream to read flash movie data from.</param>
      <example>This example shows you how to use FlashContainer constructor with input file stream<code>[C#]

//read the file into a FileStream object
FileStream fs = new FileStream("input.swf", FileMode.Open, FileAccess.Read);

//Create a flash container
FlashContainer fc = new FlashContainer(fs);</code><code>[Visual Basic]

'read the file into a FileStream object
Dim fs As New FileStream("input.swf", FileMode.Open, FileAccess.Read)

'Create a flash container
Dim fc As New FlashContainer(fs)</code></example>
    </member>
    <member name="M:Aspose.Flash.Swf.FlashContainer.#ctor(System.IO.Stream,Aspose.Flash.Swf.LoadingStrategy)">
      <summary>
            FlashContainer constructor.
            </summary>
      <param name="inputStream">Input stream to read flash movie data from.</param>
      <param name="strategy">The strategy for load.</param>
    </member>
    <member name="M:Aspose.Flash.Swf.FlashContainer.#ctor(System.Byte[],Aspose.Flash.Swf.LoadingStrategy)">
      <summary>
            FlashContainer constructor.
            </summary>
      <param name="data">Array of bytes containing the raw flash data.</param>
      <param name="strategy">The strategy for load.</param>
    </member>
    <member name="M:Aspose.Flash.Swf.FlashContainer.#ctor(System.Byte[])">
      <summary> 
            FlashContainer constructor.
            </summary>
      <param name="data">Array of bytes containing the raw flash data.</param>
      <example>This example shows you how to use FlashContainer constructor with input byte array<code>[C#]

//read the file into a FileStream object
FileStream fs = new FileStream("input.swf", FileMode.Open, FileAccess.Read);

//convert to  byte array
Byte[] bytes = new Byte[fs.Length];

//read contents to byte array
fs.Write(bytes, 0, Convert.ToInt32(fs.Length));

//Create a flash container
FlashContainer fc = new FlashContainer(bytes);</code><code>[Visual Basic]

'read the file into a FileStream object
Dim fs As New FileStream("input.swf", FileMode.Open, FileAccess.Read)

'convert to  byte array
Dim bytes(fs.Length - 1) As Byte

'read contents to byte array
fs.Write(bytes, 0, Convert.ToInt32(fs.Length))

'Create a flash container
Dim fc As New FlashContainer(bytes)</code></example>
    </member>
    <member name="M:Aspose.Flash.Swf.FlashContainer.NewIdentifier">
      <summary>
            Returns a new unique identifier for the current flash container.
            The indentidier can be used for any flash objects like shapes, sounds, etc.
            Every object must be assigned with an unique identifier.
            </summary>
      <returns>An unique identifier for objects.</returns>
    </member>
    <member name="M:Aspose.Flash.Swf.FlashContainer.Add(Aspose.Flash.Swf.BaseObject)">
      <summary>
            Add the new object to a flash movie.
            </summary>
      <param name="movieObject">Object to be added to the flash movie.</param>
      <exception cref="T:System.ArgumentNullException">If passed object is null.</exception>
      <exception cref="T:Aspose.Flash.FlashException">If movieObject version is greater than movie version.</exception>
      <example>This example shows you how to use Add(BaseObject) method<code>[C#]

//Create a flash container
FlashContainer fc = new FlashContainer();
//set FrameRate
fc.FrameRate = 12.0f;
//set FrameSize
fc.FrameSize = new Rect(0, 0, 4000, 4000);

//define one style change record to set its fill style and line style
StyleChangeRecord scr = new StyleChangeRecord(-1000, -1000);

scr.FillStyle = 1;  //Select RED    see Below
scr.LineStyle = 2;  //Select YELLOW see Below

//To define rectangle, we need to define four straigh edge records
//Define four edges of Rectangle
StraightEdgeRecord ser1 = new StraightEdgeRecord(2000, 0);
StraightEdgeRecord ser2 = new StraightEdgeRecord(0, 2000);
StraightEdgeRecord ser3 = new StraightEdgeRecord(-2000, 0);
StraightEdgeRecord ser4 = new StraightEdgeRecord(0, -2000);

//Put all the five shape records in a Aspose.Flash.Shapes.Shape
//object, this is just a collection that will hold shape records
//for DefineShape2 tag
Shape shapeRect = new Shape();

shapeRect.Add(scr);
shapeRect.Add(ser1);
shapeRect.Add(ser2);
shapeRect.Add(ser3);
shapeRect.Add(ser4);

//Define fill styles array
//Add two colors RED and BLUE in fill styles array
ArrayList fillStyles = new ArrayList();
fillStyles.Add(new SolidFill(new RGB(255, 0, 0)));
fillStyles.Add(new SolidFill(new RGB(0, 255, 0)));

//Define line styles array
//Add two colors GREEN and YELLOW in line styles array
ArrayList lineStyles = new ArrayList();
lineStyles.Add(new SolidLine(10, new RGB(0, 0, 255)));
lineStyles.Add(new SolidLine(50, new RGB(255, 255, 0)));

//At this point we have all the things to create an instance of
//DefineShape2 class

DefineShape2 defineShape = new DefineShape2(fc.NewIdentifier(),
new Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect);

//Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape);

//Place the Rectangle Character on Display List
PlaceObject2 placeObj = new PlaceObject2(defineShape.Id, 1);

//Translate the origin of newly placed object
placeObj.MatrixTransform = new MatrixTransform(2000, 2000);

//Add CONTROL TAG created above inside the flash container
fc.Add(placeObj);

//Show the next frame using CONTROL TAG and add it inside the
//flash container
fc.Add(new ShowFrame());

//Now write the flash container on disk to show its output
fc.Write("c:\\out.swf");</code><code>[Visual Basic]

'Create a flash container
Dim fc As New FlashContainer()
'set FrameRate
fc.FrameRate = 12.0f
'set FrameSize
fc.FrameSize = New Rect(0, 0, 4000, 4000)

'define one style change record to set its fill style and line style
Dim scr As New StyleChangeRecord(-1000, -1000)

scr.FillStyle = 1 'Select RED see Below
scr.LineStyle = 2 'Select YELLOW see Below

'To define rectangle, we need to define four straigh edge records
'Define four edges of Rectangle
Dim ser1 As New StraightEdgeRecord(2000, 0)
Dim ser2 As New StraightEdgeRecord(0, 2000)
Dim ser3 As New StraightEdgeRecord(-2000, 0)
Dim ser4 As New StraightEdgeRecord(0, -2000)

'Put all the five shape records in a Aspose.Flash.Shapes.Shape
'object, this is just a collection that will hold shape records
'for DefineShape2 tag
Dim shapeRect As New Shape()

shapeRect.Add(scr)
shapeRect.Add(ser1)
shapeRect.Add(ser2)
shapeRect.Add(ser3)
shapeRect.Add(ser4)

'Define fill styles array
'Add two colors RED and BLUE in fill styles array
Dim fillStyles As New ArrayList()
fillStyles.Add(New SolidFill(New RGB(255, 0, 0)))
fillStyles.Add(New SolidFill(New RGB(0, 255, 0)))

'Define line styles array
'Add two colors GREEN and YELLOW in line styles array
Dim lineStyles As New ArrayList()
lineStyles.Add(New SolidLine(10, New RGB(0, 0, 255)))
lineStyles.Add(New SolidLine(50, New RGB(255, 255, 0)))

'At this point we have all the things to create an instance of
'DefineShape2 class

Dim defineShape As New DefineShape2(fc.NewIdentifier(), New Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect)

'Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape)

'Place the Rectangle Character on Display List
Dim placeObj As New PlaceObject2(defineShape.Id, 1)

'Translate the origin of newly placed object
placeObj.MatrixTransform = New MatrixTransform(2000, 2000)

'Add CONTROL TAG created above inside the flash container
fc.Add(placeObj)

'Show the next frame using CONTROL TAG and add it inside the
'flash container
fc.Add(New ShowFrame())

'Now write the flash container on disk to show its output
fc.Write("c:\out.swf")</code></example>
    </member>
    <member name="M:Aspose.Flash.Swf.FlashContainer.Add(System.Collections.ArrayList)">
      <summary>
            Add all of the objects in the collection to a flash movie.
            </summary>`
            <param name="array">Collection of objects to add to the flash movie.</param><exception cref="T:System.ArgumentNullException">If passed array is null.</exception><exception cref="T:Aspose.Flash.FlashException">If given array contains object with version greater than movie version.</exception><example>This example shows you how to use Add(ArrayList) method<code>[C#]

//Create a flash container
FlashContainer fc = new FlashContainer();
//set FrameRate
fc.FrameRate = 12.0f;
//set FrameSize
fc.FrameSize = new Rect(0, 0, 4000, 4000);

//define one style change record to set its fill style and line style
StyleChangeRecord scr = new StyleChangeRecord(-1000, -1000);

scr.FillStyle = 1;  //Select RED    see Below
scr.LineStyle = 2;  //Select YELLOW see Below

//To define rectangle, we need to define four straigh edge records
//Define four edges of Rectangle
StraightEdgeRecord ser1 = new StraightEdgeRecord(2000, 0);
StraightEdgeRecord ser2 = new StraightEdgeRecord(0, 2000);
StraightEdgeRecord ser3 = new StraightEdgeRecord(-2000, 0);
StraightEdgeRecord ser4 = new StraightEdgeRecord(0, -2000);

//Put all the five shape records in a Aspose.Flash.Shapes.Shape
//object, this is just a collection that will hold shape records
//for DefineShape2 tag
Shape shapeRect = new Shape();

shapeRect.Add(scr);
shapeRect.Add(ser1);
shapeRect.Add(ser2);
shapeRect.Add(ser3);
shapeRect.Add(ser4);

//Define fill styles array
//Add two colors RED and BLUE in fill styles array
ArrayList fillStyles = new ArrayList();
fillStyles.Add(new SolidFill(new RGB(255, 0, 0)));
fillStyles.Add(new SolidFill(new RGB(0, 255, 0)));

//Define line styles array
//Add two colors GREEN and YELLOW in line styles array
ArrayList lineStyles = new ArrayList();
lineStyles.Add(new SolidLine(10, new RGB(0, 0, 255)));
lineStyles.Add(new SolidLine(50, new RGB(255, 255, 0)));

//At this point we have all the things to create an instance of
//DefineShape2 class

DefineShape2 defineShape = new DefineShape2(fc.NewIdentifier(),
new Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect);

//Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape);

//Place the Rectangle Character on Display List
PlaceObject2 placeObj = new PlaceObject2(defineShape.Id, 1);

//Translate the origin of newly placed object
placeObj.MatrixTransform = new MatrixTransform(2000, 2000);

//make a list of object and then add that list to flash container
ArrayList objList =  new ArrayList();
objList.Add(placeObj);

//Add CONTROL TAG created above inside the flash container
fc.Add(objList);

//Show the next frame using CONTROL TAG and add it inside the
//flash container
fc.Add(new ShowFrame());

//Now write the flash container on disk to show its output
fc.Write("c:\\out.swf");</code><code>[Visual Basic]

'Create a flash container
Dim fc As New FlashContainer()
'set FrameRate
fc.FrameRate = 12.0f
'set FrameSize
fc.FrameSize = New Rect(0, 0, 4000, 4000)

'define one style change record to set its fill style and line style
Dim scr As New StyleChangeRecord(-1000, -1000)

scr.FillStyle = 1 'Select RED see Below
scr.LineStyle = 2 'Select YELLOW see Below

'To define rectangle, we need to define four straigh edge records
'Define four edges of Rectangle
Dim ser1 As New StraightEdgeRecord(2000, 0)
Dim ser2 As New StraightEdgeRecord(0, 2000)
Dim ser3 As New StraightEdgeRecord(-2000, 0)
Dim ser4 As New StraightEdgeRecord(0, -2000)

'Put all the five shape records in a Aspose.Flash.Shapes.Shape
'object, this is just a collection that will hold shape records
'for DefineShape2 tag
Dim shapeRect As New Shape()

shapeRect.Add(scr)
shapeRect.Add(ser1)
shapeRect.Add(ser2)
shapeRect.Add(ser3)
shapeRect.Add(ser4)

'Define fill styles array
'Add two colors RED and BLUE in fill styles array
Dim fillStyles As New ArrayList()
fillStyles.Add(New SolidFill(New RGB(255, 0, 0)))
fillStyles.Add(New SolidFill(New RGB(0, 255, 0)))

'Define line styles array
'Add two colors GREEN and YELLOW in line styles array
Dim lineStyles As New ArrayList()
lineStyles.Add(New SolidLine(10, New RGB(0, 0, 255)))
lineStyles.Add(New SolidLine(50, New RGB(255, 255, 0)))

'At this point we have all the things to create an instance of
'DefineShape2 class

Dim defineShape As New DefineShape2(fc.NewIdentifier(), New Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect)

'Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape)

'Place the Rectangle Character on Display List
Dim placeObj As New PlaceObject2(defineShape.Id, 1)

'Translate the origin of newly placed object
placeObj.MatrixTransform = New MatrixTransform(2000, 2000)

'make a list of object and then add that list to flash container
Dim objList As New ArrayList()
objList.Add(placeObj)

'Add CONTROL TAG created above inside the flash container
fc.Add(objList)

'Show the next frame using CONTROL TAG and add it inside the
'flash container
fc.Add(New ShowFrame())

'Now write the flash container on disk to show its output
fc.Write("c:\out.swf")</code></example></member>
    <member name="M:Aspose.Flash.Swf.FlashContainer.GetObjectsOfType(Aspose.Flash.Swf.BaseObjectType)">
      <summary> 
            Returns the collection of objects from the flash movie with the specified type.
            </summary>
      <param name="type">Type of objects to search for.</param>
      <returns>Collection of objects.</returns>
    </member>
    <member name="M:Aspose.Flash.Swf.FlashContainer.ReadFromFile(System.String)">
      <summary>
            Open and read swf flash file.
            </summary>
      <param name="fileName">Path to swf flash file.</param>
      <example>This example shows you how to use ReadFromFile method<code>[C#]

//Create a flash container
FlashContainer fc = new FlashContainer();

//read flash file
fc.ReadFromFile("input.swf");</code><code>[Visual Basic]

'Create a flash container
Dim fc As New FlashContainer()

'read flash file
fc.ReadFromFile("input.swf")</code></example>
    </member>
    <member name="M:Aspose.Flash.Swf.FlashContainer.ReadFromFile(System.String,Aspose.Flash.Swf.LoadingStrategy)">
      <summary>
            Open and read swf flash file.
            </summary>
      <param name="fileName">Path to swf flash file.</param>
      <param name="strategy">The strategy for load.</param>
    </member>
    <member name="M:Aspose.Flash.Swf.FlashContainer.ReadFromData(System.Byte[])">
      <summary>
            Read the flash data from a byte array.
            </summary>
      <param name="bytes">Array of bytes which contain raw binary flash data.</param>
      <example>This example shows you how to use ReadFromData method<code>[C#]

//Create a flash container
FlashContainer fc = new FlashContainer();

//read input file into file stream and convert to byte array
FileStream fs = new FileStream("input.swf", FileMode.Open, FileAccess.Read);
Byte[] bytes = new Byte[fs.Length];
fs.Read(bytes, 0, Convert.ToInt32(fs.Length));

//read flash from bytes data
fc.ReadFromData(bytes);</code><code>[Visual Basic]

'Create a flash container
Dim fc As New FlashContainer()

'read input file into file stream and convert to byte array
Dim fs As New FileStream("input.swf", FileMode.Open, FileAccess.Read)
Dim bytes(fs.Length - 1) As Byte
fs.Read(bytes, 0, Convert.ToInt32(fs.Length))

'read flash from bytes data
fc.ReadFromData(bytes)</code></example>
    </member>
    <member name="M:Aspose.Flash.Swf.FlashContainer.ReadFromData(System.Byte[],Aspose.Flash.Swf.LoadingStrategy)">
      <summary>
            Read the flash data from a byte array.
            </summary>
      <param name="bytes">Array of bytes which contain raw binary flash data.</param>
      <param name="strategy">The strategy for load.</param>
    </member>
    <member name="M:Aspose.Flash.Swf.FlashContainer.RemapIdentifiers(Aspose.Flash.Swf.FlashContainer,System.Int32)">
      <summary>
            Remaps the object ids into flash container, using the base id given.
            </summary>
      <param name="container">The container, where ids should be remapped.</param>
      <param name="remapStartId">The starting id for remapping.</param>
      <returns>Last assigned id used for given container.</returns>
      <example>
            //these containers both have objects with ids: 1,2,4,5,6
            FlashContainer flash1 = new FlashContainer("1.swf");
            FlashContainer flash2 = new FlashContainer("2.swf");
            //so remap ids for second container 
            FlashContainer.RemapIdentifiers(flash2,flash1.Identifier);
            //merge content
            flash1.AddFlash(flash2);
            </example>
      <remarks>
            This function only remaps objects' ids and doesn't process ActionScript bytecode.
            </remarks>
    </member>
    <member name="M:Aspose.Flash.Swf.FlashContainer.Write(System.String)">
      <summary>
            Creates the flash movie and store it to a file.
            </summary>
      <param name="filename">File where flash movie should be stored.</param>
      <example>This example shows you how to use Write method<code>[C#]

//Place the Rectangle Character on Display List
PlaceObject2 placeObj = new PlaceObject2(defineShape.Id, 1);

//Translate the origin of newly placed object
placeObj.MatrixTransform = new MatrixTransform(2000, 2000);

//make a list of object and then add that list to flash container
ArrayList objList =  new ArrayList();
objList.Add(placeObj);

//Add CONTROL TAG created above inside the flash container
fc.Add(objList);

//Show the next frame using CONTROL TAG and add it inside the
//flash container
fc.Add(new ShowFrame());

//Now write the flash container on disk to show its output
fc.Write("c:\\out.swf");</code><code>[Visual Basic]

'Place the Rectangle Character on Display List
Dim placeObj As New PlaceObject2(defineShape.Id, 1)

'Translate the origin of newly placed object
placeObj.MatrixTransform = New MatrixTransform(2000, 2000)

'make a list of object and then add that list to flash container
Dim objList As New ArrayList()
objList.Add(placeObj)

'Add CONTROL TAG created above inside the flash container
fc.Add(objList)

'Show the next frame using CONTROL TAG and add it inside the
'flash container
fc.Add(New ShowFrame())

'Now write the flash container on disk to show its output
fc.Write("c:\out.swf")</code></example>
    </member>
    <member name="M:Aspose.Flash.Swf.FlashContainer.Write(System.IO.Stream)">
      <summary>
            Creates the flash movie and store it to a stream.
            </summary>
      <param name="outputStream">Output stream where flash movie should be stored.</param>
      <example>This example shows you how to use write method<code>[C#]

//Place the Rectangle Character on Display List
PlaceObject2 placeObj = new PlaceObject2(defineShape.Id, 1);

//Translate the origin of newly placed object
placeObj.MatrixTransform = new MatrixTransform(2000, 2000);

//make a list of object and then add that list to flash container
ArrayList objList =  new ArrayList();
objList.Add(placeObj);

//Add CONTROL TAG created above inside the flash container
fc.Add(objList);

//Show the next frame using CONTROL TAG and add it inside the
//flash container
fc.Add(new ShowFrame());

MemoryStream ms = new MemoryStream();

//Now write the flash container on disk to show its output
fc.Write(ms);</code><code>[Visual Basic]

'Place the Rectangle Character on Display List
Dim placeObj As New PlaceObject2(defineShape.Id, 1)

'Translate the origin of newly placed object
placeObj.MatrixTransform = New MatrixTransform(2000, 2000)

'make a list of object and then add that list to flash container
Dim objList As New ArrayList()
objList.Add(placeObj)

'Add CONTROL TAG created above inside the flash container
fc.Add(objList)

'Show the next frame using CONTROL TAG and add it inside the
'flash container
fc.Add(New ShowFrame())

Dim ms As New MemoryStream()

'Now write the flash container on disk to show its output
fc.Write(ms)</code></example>
    </member>
    <member name="M:Aspose.Flash.Swf.FlashContainer.Write">
      <summary> 
            Creates the flash movie and store it to an array of bytes.
            </summary>
      <returns>Array of bytes where flash movie should be stored.</returns>
    </member>
    <member name="M:Aspose.Flash.Swf.FlashContainer.AddFlash(System.String)">
      <summary>
            The function is used to combine several flash files.
            <p>If flash files have different version or signature the exception will be thrown </p><p>If flash files have different frame sizes then resulting file has a maximum frame size.</p><p>If flash files have different frame rates then resulting file has a maximum frame rate.</p><remark>Flash files can be combined in next cases:
            <list type="bullet"><item>Objects in different flash files have the same identifier.</item><item>Objects in different flash files are placed in the same layer (depth).</item><item>Flash file has conditional not-conditional jumps to a frame.</item></list></remark><code>
            // Initialize  a container
            FlashContainer flash= new FlashContainer();
            // Add the first flash file 
            flash.AddFlash("flash1.swf");
            // Add the second flash file 
            flash.AddFlash("flash2.swf");
            // Write a resulting flash file
            flash.Write("flash3.swf");
            </code></summary>
      <param name="filename">Flash file name.</param>
      <example>This example shows you how to use AddFlash(String) method<code>[C#]

//Create a flash container
FlashContainer fc = new FlashContainer();

//... other code to handle this flash container

//Place the Rectangle Character on Display List
PlaceObject2 placeObj = new PlaceObject2(defineShape.Id, 1);

//Translate the origin of newly placed object
placeObj.MatrixTransform = new MatrixTransform(2000, 2000);

//make a list of object and then add that list to flash container
ArrayList objList = new ArrayList();
objList.Add(placeObj);

//Add CONTROL TAG created above inside the flash container
fc.Add(objList);


//add another flash file
fc.AddFlash("input.swf");</code><code>[Visual Basic]

'Create a flash container
Dim fc As New FlashContainer()

'... other code to handle this flash container

'Place the Rectangle Character on Display List
Dim placeObj As New PlaceObject2(defineShape.Id, 1)

'Translate the origin of newly placed object
placeObj.MatrixTransform = New MatrixTransform(2000, 2000)

'make a list of object and then add that list to flash container
Dim objList As New ArrayList()
objList.Add(placeObj)

'Add CONTROL TAG created above inside the flash container
fc.Add(objList)


'add another flash file
fc.AddFlash("input.swf")</code></example>
    </member>
    <member name="M:Aspose.Flash.Swf.FlashContainer.AddFlash(System.IO.Stream)">
      <summary>
            The function is used to combine several flash files.
            <p>If flash files have different version or signature the exception will be thrown </p><p>If flash files have different frame sizes then resulting file has a maximum frame size.</p><p>If flash files have different frame rates then resulting file has a maximum frame rate.</p><remark>Flash files can be combined in next cases:
            <list type="bullet"><item>Objects in different flash files have the same identifier.</item><item>Objects in different flash files are placed in the same layer (depth).</item><item>Flash file has conditional not-conditional jumps to a frame.</item></list></remark></summary>
      <param name="stream">Stream to read flash data from.</param>
      <example>This example shows you how to use AddFlash(Stream) method<code>[C#]

//Create a flash container
FlashContainer fc = new FlashContainer();

//... other code to handle this flash container

//Place the Rectangle Character on Display List
PlaceObject2 placeObj = new PlaceObject2(defineShape.Id, 1);

//Translate the origin of newly placed object
placeObj.MatrixTransform = new MatrixTransform(2000, 2000);

//make a list of object and then add that list to flash container
ArrayList objList = new ArrayList();
objList.Add(placeObj);

//Add CONTROL TAG created above inside the flash container
fc.Add(objList);

//read the file into a FileStream object
FileStream fs = new FileStream("input.swf", FileMode.Open, FileAccess.Read);


//add another flash file
fc.AddFlash(fs);</code><code>[Visual Basic]

'Create a flash container
Dim fc As New FlashContainer()

'... other code to handle this flash container

'Place the Rectangle Character on Display List
Dim placeObj As New PlaceObject2(defineShape.Id, 1)

'Translate the origin of newly placed object
placeObj.MatrixTransform = New MatrixTransform(2000, 2000)

'make a list of object and then add that list to flash container
Dim objList As New ArrayList()
objList.Add(placeObj)

'Add CONTROL TAG created above inside the flash container
fc.Add(objList)

'read the file into a FileStream object
Dim fs As New FileStream("input.swf", FileMode.Open, FileAccess.Read)


'add another flash file
fc.AddFlash(fs)</code></example>
    </member>
    <member name="M:Aspose.Flash.Swf.FlashContainer.AddFlash(Aspose.Flash.Swf.FlashContainer)">
      <summary>
            The function is used to combine several flash files.
            <p>If flash files have different version or signature the exception will be thrown </p><p>If flash files have different frame sizes then resulting file has a maximum frame size.</p><p>If flash files have different frame rates then resulting file has a maximum frame rate.</p><remark>Flash files can be combined in next cases:
            <list type="bullet"><item>Objects in different flash files have the same identifier.</item><item>Objects in different flash files are placed in the same layer (depth).</item><item>Flash file has conditional not-conditional jumps to a frame.</item></list></remark></summary>
      <param name="flash">FlashContainer which should be combined with the current one.</param>
      <example>This example shows you how to use AddFlash(FlashContainer) method<code>[C#]

//Create a flash container
FlashContainer fc = new FlashContainer();

//... other code to handle this flash container

//Place the Rectangle Character on Display List
PlaceObject2 placeObj = new PlaceObject2(defineShape.Id, 1);

//Translate the origin of newly placed object
placeObj.MatrixTransform = new MatrixTransform(2000, 2000);

//make a list of object and then add that list to flash container
ArrayList objList = new ArrayList();
objList.Add(placeObj);

//Add CONTROL TAG created above inside the flash container
fc.Add(objList);

//create another flash container from existing flash movie
FlashContainer fc2 = new FlashContainer("flash2.swf");

//add another flash file
fc.AddFlash(fc2);</code><code>[Visual Basic]

'Create a flash container
Dim fc As New FlashContainer()

'... other code to handle this flash container

'Place the Rectangle Character on Display List
Dim placeObj As New PlaceObject2(defineShape.Id, 1)

'Translate the origin of newly placed object
placeObj.MatrixTransform = New MatrixTransform(2000, 2000)

'make a list of object and then add that list to flash container
Dim objList As New ArrayList()
objList.Add(placeObj)

'Add CONTROL TAG created above inside the flash container
fc.Add(objList)

'create another flash container from existing flash movie
Dim fc2 As New FlashContainer("flash2.swf")

'add another flash file
fc.AddFlash(fc2)</code></example>
    </member>
    <member name="M:Aspose.Flash.Swf.FlashContainer.FromSVG(System.String)">
      <summary>
            Creates a flash container from an SVG file.
            </summary>
      <param name="fileName">Path to SVG file.</param>
      <returns>Created FlashContainer.</returns>
      <example>This example shows you how to use FromSVG(String) method<code>[C#]

//Create a flash container
FlashContainer fc = new FlashContainer();

//create from SVG
fc = FlashContainer.FromSVG("input.svg");</code><code>[Visual Basic]

'Create a flash container
Dim fc As New FlashContainer()

'create from SVG
fc = FlashContainer.FromSVG("input.svg")</code></example>
    </member>
    <member name="M:Aspose.Flash.Swf.FlashContainer.FromSVG(System.String,System.Int32)">
      <summary>
            Creates a flash container from an SVG file.
            </summary>
      <param name="fileName">Path to SVG file.</param>
      <param name="startId">Start Id to numerate flash objects.</param>
      <returns>Created FlashContainer.</returns>
      <example>This example shows you how to use FromSVG(String, Int32) method<code>[C#]

//Create a flash container
FlashContainer fc = new FlashContainer();

//create from SVG
fc = FlashContainer.FromSVG("input.svg", 1);</code><code>[Visual Basic]

'Create a flash container
Dim fc As New FlashContainer()

'create from SVG
fc = FlashContainer.FromSVG("input.svg", 1)</code></example>
    </member>
    <member name="M:Aspose.Flash.Swf.FlashContainer.FromSVG(System.IO.Stream,System.Boolean)">
      <summary>
            Creates a flash from a SVG stream.
            </summary>
      <param name="stream">SVG input stream.</param>
      <param name="close">Determines whether the stream should be closed after reading.</param>
      <returns>Created FlashContainer.</returns>
      <example>This example shows you how to use FromSVG(Stream, Boolean) method<code>[C#]

//Create a flash container
FlashContainer fc = new FlashContainer();

//read svg file into file stream
FileStream fs = new FileStream("input.svg", FileMode.Open, FileAccess.Read);

//create from SVG
fc = FlashContainer.FromSVG(fs, true);</code><code>[Visual Basic]

'Create a flash container
Dim fc As New FlashContainer()

'read svg file into file stream
Dim fs As New FileStream("input.svg", FileMode.Open, FileAccess.Read)

'create from SVG
fc = FlashContainer.FromSVG(fs, True)</code></example>
    </member>
    <member name="M:Aspose.Flash.Swf.FlashContainer.FromSVG(System.IO.Stream,System.Boolean,System.Int32)">
      <summary>
            Creates a flash from a SVG stream.
            </summary>
      <param name="stream">SVG input stream.</param>
      <param name="close">Determines whether the stream should be closed after reading.</param>
      <param name="startId">Start Id to numerate flash objects.</param>
      <returns>Created FlashContainer.</returns>
      <example>This example shows you how to use FromSVG(Stream, Boolean, Int32) method<code>[C#]

//Create a flash container
FlashContainer fc = new FlashContainer();

//read svg file into file stream
FileStream fs = new FileStream("input.svg", FileMode.Open, FileAccess.Read);

//create from SVG
fc = FlashContainer.FromSVG(fs, true,1);</code><code>[Visual Basic]

'Create a flash container
Dim fc As New FlashContainer()

'read svg file into file stream
Dim fs As New FileStream("input.svg", FileMode.Open, FileAccess.Read)

'create from SVG
fc = FlashContainer.FromSVG(fs, True,1)</code></example>
    </member>
    <member name="P:Aspose.Flash.Swf.FlashContainer.Identifier">
      <summary>
            Returns or sets the unique identifer which is assigned to a definition object.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.FlashContainer.Encoding">
      <summary>
            Returns or sets the encoding scheme for strings encoded and decoded from a Flash file.
            Read/write <see cref="T:System.String" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.FlashContainer.Signature">
      <summary>
            Returns or sets the flash signature.
            Read/write <see cref="T:System.String" />.
            </summary>
      <remarks>
            The signature determines whether the file will be compressed. If the signature is 
            "FWS" the file will not be compressed. If the signature is "CWS" then the file will
            be compressed using the zlib algorithm after encoding. Note that compressed Flash
            files are only readable by a Flash Player version 6 and later.
            </remarks>
    </member>
    <member name="P:Aspose.Flash.Swf.FlashContainer.Version">
      <summary>
            Returns or sets the version number of a Flash movie, allowed versios are from 1 to 10.
            Read/write <see cref="T:System.Int32" />.
            </summary>
      <exception cref="T:Aspose.Flash.FlashException">If given version number doesn't fall into allowed range.</exception>
    </member>
    <member name="P:Aspose.Flash.Swf.FlashContainer.FrameSize">
      <summary>
            Returns or sets the rectangle which defines the size of a player screen.
            Read/write <see cref="T:Aspose.Flash.Basic.Rect" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.FlashContainer.FrameRate">
      <summary>
            Returns or sets the number of frames played per second.
            Read/write <see cref="T:System.Single" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.FlashContainer.Objects">
      <summary>
            Returns or sets the collection of tags or objects in a flash movie.
            Read/write <see cref="T:System.Collections.ArrayList" />.
             </summary>
      <remarks>
            When new list containing objects is being set when its content is copied into the internal list.
            </remarks>
    </member>
    <member name="P:Aspose.Flash.Swf.FlashContainer.NextDepth">
      <summary>
            Returns the next available depth.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.FlashContainer.Codecs">
      <summary>
            Gets the available video codecs list used for frame rendering and convertion to FLV.
            See the <see cref="M:Aspose.Flash.Swf.FlashContainer.RenderToFlv(System.IO.Stream)" />,
             <see cref="M:Aspose.Flash.Swf.FlashContainer.RenderToFlv(System.IO.Stream,Aspose.Flash.Video.VideoCodec)" />, 
            <see cref="M:Aspose.Flash.Swf.FlashContainer.RenderToFlv(System.IO.Stream,Aspose.Flash.Video.VideoCodec,System.String)" /> for details about FLV conversion.
            You can add you own <see cref="T:Aspose.Flash.Video.Codec" /> class implementation to extend the frame rendering functionality or to save your movie to FLV using 
            your own codec.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.FlashContainer.NumberOfFrames">
      <summary>
            Returns the number of frames in the current flash movie.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.FlashException">
      <summary>
            FlashException class is used to handle library exceptions.
            </summary>
      <example>This example shows how to use the FlashException class<code>[C#]

//throw FlashException
Exception ex = new Exception("Test Exception");
throw new FlashException("Test FlashException", ex.InnerException);

//catch FlashException
try
{
   //Aspose.Flash code throwing exception
}
catch (FlashException flashex)
{
MessageBox.Show(flashex.ToString());
}</code><code>[Visual Basic]

'throw FlashException
Dim ex As New Exception("Test Exception")
Throw New FlashException("Test FlashException", ex.InnerException)

'catch FlashException
Try
   'Aspose.Flash code throwing exception
Catch flashex As FlashException
MessageBox.Show(flashex.ToString())
End Try</code></example>
    </member>
    <member name="M:Aspose.Flash.FlashException.#ctor(System.String,System.Exception)">
      <summary>
            FlashException constructor.
            </summary>
      <param name="message">Exception message.</param>
      <param name="innerException">Inner exception.</param>
    </member>
    <member name="M:Aspose.Flash.FlashException.#ctor(System.String)">
      <summary>
            FlashException constructor.
            </summary>
      <param name="message">Exception message.</param>
    </member>
    <member name="T:Aspose.Flash.Flv.FLVExtractor">
      <summary>
             Manages embedded flv streams extraction process.
             </summary>
      <example>
        <code>
             [C#]
                        //open SWF flash file and create flash container
                        FlashContainer flash = new FlashContainer("SWFContainingMultipleFLV.swf");
            
                        //create FLV extractor
                        FLVExtrator ext = new FLVExtrator(flash);
            
                        //open output file stream
                        using (Stream outputStream = new FileStream("FLVExtractedFromSWF.flv", FileMode.Create))
                        {
                            //extract FLV movie and write it to the stream
                            ext.Extract(outputStream, 1);
                        }
             </code>
      </example>
    </member>
    <member name="M:Aspose.Flash.Flv.FLVExtractor.#ctor(Aspose.Flash.Swf.FlashContainer)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Flash.Flv.FLVExtractor" /> class.
            </summary>
      <param name="container">The container.</param>
    </member>
    <member name="M:Aspose.Flash.Flv.FLVExtractor.Extract(System.IO.Stream,System.Int32)">
      <summary>
            Extracts the specified video stream into the given stream.
            </summary>
      <param name="stream">The stream.</param>
      <param name="videoStreamId">The video stream id.</param>
      <exception cref="T:Aspose.Flash.FlashException">If Stream is not found</exception>
    </member>
    <member name="T:Aspose.Flash.Flv.FLVPacker">
      <summary>
            Represents the packer to FLV format.
            Packs video and audio data from FlashContainer to FLV output stream.
            </summary>
      <example>
            This example shows how to convert existing SWF flash movie to FLV format.
            
            <code>
            [C#]
            
            // Open SWF flash file and create flash container
            FlashContainer flash = new FlashContainer("flash.swf");
            // Open output file stream
            Stream fileStream = new FileStream("movie.flv", FileMode.Create);
            // Create FLV packer
            IPacker packer = new FLVPacker(fileStream);
            // Created FLV movie and write it to the stream
            packer.Pack(flash);
            // Close stream
            fileStream.Flush();
            fileStream.Close();
            
            [Visual Basic]
            
            ' Open SWF flash file and create flash container
            Dim flash As FlashContainer =  New FlashContainer("flash.swf")
            ' Open output file stream
            Dim fileStream As Stream =  New FileStream("movie.flv",FileMode.Create)
            ' Create FLV packer
            Dim packer As IPacker =  New FLVPacker(fileStream)
            ' Created FLV movie and write it to the stream
            packer.Pack(flash)
            ' Close stream
            fileStream.Flush()
            fileStream.Close()
            </code></example>
      <example>This example shows you how to use the FlvPacker class<code>[C#]

// Open SWF flash file and create flash container
FlashContainer flash = new FlashContainer("flash.swf");
// Open output file stream
Stream fileStream = new FileStream("movie.flv", FileMode.Create);
// Create FLV packer
IPacker packer = new FLVPacker(fileStream);
// Created FLV movie and write it to the stream
packer.Pack(flash);
//release resources
packer.Release();
// Close stream
fileStream.Flush();
fileStream.Close();</code><code>[Visual Basic]

' Open SWF flash file and create flash container
Dim flash As New FlashContainer("flash.swf")
' Open output file stream
Dim fileStream As Stream = New FileStream("movie.flv", FileMode.Create)
' Create FLV packer
Dim packer As IPacker = New FLVPacker(fileStream)
' Created FLV movie and write it to the stream
packer.Pack(flash)
'release resources
packer.Release()
' Close stream
fileStream.Flush()
fileStream.Close()</code></example>
    </member>
    <member name="T:Aspose.Flash.Flv.IPacker">
      <summary>
            Pack flash data to an output format.
            </summary>
      <example>This example shows you how to use IPacker Interface<code>[C#]

// Open SWF flash file and create flash container
FlashContainer flash = new FlashContainer("flash.swf");
// Open output file stream
Stream fileStream = new FileStream("movie.flv", FileMode.Create);
// Create FLV packer
IPacker packer = new FLVPacker(fileStream);
// Created FLV movie and write it to the stream
packer.Pack(flash);
//release resources
packer.Release();
// Close stream
fileStream.Flush();
fileStream.Close();</code><code>[Visual Basic]

' Open SWF flash file and create flash container
Dim flash As New FlashContainer("flash.swf")
' Open output file stream
Dim fileStream As Stream = New FileStream("movie.flv", FileMode.Create)
' Create FLV packer
Dim packer As IPacker = New FLVPacker(fileStream)
' Created FLV movie and write it to the stream
packer.Pack(flash)
'release resources
packer.Release()
' Close stream
fileStream.Flush()
fileStream.Close()</code></example>
    </member>
    <member name="M:Aspose.Flash.Flv.IPacker.Release">
      <summary>
            Release resourses. This method should be called after method Pack().
            </summary>
    </member>
    <member name="M:Aspose.Flash.Flv.IPacker.Pack(Aspose.Flash.Swf.FlashContainer)">
      <summary>
            Pack the flash container to an output format.
            </summary>
      <param name="flash">Source flash container used to read movie.</param>
      <exception cref="T:Aspose.Flash.Flv.PackerException">
      </exception>
    </member>
    <member name="M:Aspose.Flash.Flv.FLVPacker.#ctor(System.IO.Stream)">
      <summary>
            FLVPacker constructor.
            </summary>
      <param name="output">Output stream where video in FLV format should be stored.</param>
      <example>This example shows you how to use FlvPacker constructor<code>[C#]

// Open SWF flash file and create flash container
FlashContainer flash = new FlashContainer("flash.swf");
// Open output file stream
Stream fileStream = new FileStream("movie.flv", FileMode.Create);
// Create FLV packer
IPacker packer = new FLVPacker(fileStream);
// Created FLV movie and write it to the stream
packer.Pack(flash);
//release resources
packer.Release();
// Close stream
fileStream.Flush();
fileStream.Close();</code><code>[Visual Basic]

' Open SWF flash file and create flash container
Dim flash As New FlashContainer("flash.swf")
' Open output file stream
Dim fileStream As Stream = New FileStream("movie.flv", FileMode.Create)
' Create FLV packer
Dim packer As IPacker = New FLVPacker(fileStream)
' Created FLV movie and write it to the stream
packer.Pack(flash)
'release resources
packer.Release()
' Close stream
fileStream.Flush()
fileStream.Close()</code></example>
    </member>
    <member name="M:Aspose.Flash.Flv.FLVPacker.Release">
      <summary>
            Release resourses. This method should be called after method Pack().
            </summary>
      <example>This example shows you how to use Release method<code>[C#]

// Open SWF flash file and create flash container
FlashContainer flash = new FlashContainer("flash.swf");
// Open output file stream
Stream fileStream = new FileStream("movie.flv", FileMode.Create);
// Create FLV packer
IPacker packer = new FLVPacker(fileStream);
// Created FLV movie and write it to the stream
packer.Pack(flash);
//release resources
packer.Release();
// Close stream
fileStream.Flush();
fileStream.Close();</code></example>
      <example>This example shows you how to use Release() method<code>[Visual Basic]

' Open SWF flash file and create flash container
Dim flash As New FlashContainer("flash.swf")
' Open output file stream
Dim fileStream As Stream = New FileStream("movie.flv", FileMode.Create)
' Create FLV packer
Dim packer As IPacker = New FLVPacker(fileStream)
' Created FLV movie and write it to the stream
packer.Pack(flash)
'release resources
packer.Release()
' Close stream
fileStream.Flush()
fileStream.Close()</code></example>
    </member>
    <member name="M:Aspose.Flash.Flv.FLVPacker.Pack(Aspose.Flash.Swf.FlashContainer)">
      <summary>
            Pack the flash container to the FLV format.
            </summary>
      <param name="f">Source flash container used to read movie.</param>
      <example>This example show you how to use Pack method<code>[C#]

// Open SWF flash file and create flash container
FlashContainer flash = new FlashContainer("flash.swf");
// Open output file stream
Stream fileStream = new FileStream("movie.flv", FileMode.Create);
// Create FLV packer
IPacker packer = new FLVPacker(fileStream);
// Created FLV movie and write it to the stream
packer.Pack(flash);
//release resources
packer.Release();
// Close stream
fileStream.Flush();
fileStream.Close();</code><code>[Visual Basic]

' Open SWF flash file and create flash container
Dim flash As New FlashContainer("flash.swf")
' Open output file stream
Dim fileStream As Stream = New FileStream("movie.flv", FileMode.Create)
' Create FLV packer
Dim packer As IPacker = New FLVPacker(fileStream)
' Created FLV movie and write it to the stream
packer.Pack(flash)
'release resources
packer.Release()
' Close stream
fileStream.Flush()
fileStream.Close()</code></example>
    </member>
    <member name="T:Aspose.Flash.Flv.FLVUnpacker">
      <summary>
            Represents the unpacker from FLV format.
            It is currently supports only VP6, Sorenson H.263, Video Screen,
            video and MP3, ADPCM audio formats.
            </summary>
      <example>
            This example shows how to read FLV video and save it in SWF format.
            
            <code>
            [C#]
            
            // Open input stream with flv data
            Stream inputStream = new FileStream("movie.flv", FileMode.Open);
            // Create FLV unpacker
            IUnpacker unpacker = new FLVUnpacker(inputStream);
            // Unpack FLV to flash container
            FlashContainer flash = unpacker.Unpack();
            // Write swf-file
            flash.WriteToFile("flash.swf");
            // Release resource and close data stream
            unpacker.Release();
            inputStream.Close();
            
            [Visual Basic]
            
            ' Open input stream with flv data
            Dim inputStream As Stream =  New FileStream("movie.flv", FileMode.Open)
            ' Create FLV unpacker
            Dim unpacker As IUnpacker =  New FLVUnpacker(inputStream)
            ' Unpack FLV to flash container
            Dim flash As FlashContainer =  unpacker.Unpack()
            ' Write swf-file
            flash.WriteToFile("flash.swf")
            ' Release resource and close data stream
            unpacker.Release()
            inputStream.Close()
            </code></example>
      <example>This example shows you how to use FLVUnpacker class<code>[C#]

// Open input stream with flv data
Stream inputStream = new FileStream("movie.flv", FileMode.Open);
// Create FLV unpacker
IUnpacker unpacker = new FLVUnpacker(inputStream);
// Unpack FLV to flash container
FlashContainer flash = unpacker.Unpack();
// Write swf-file
flash.WriteToFile("flash.swf");
// Release resource and close data stream
unpacker.Release();
inputStream.Close();</code><code>[Visual Basic]

' Open input stream with flv data
Dim inputStream As Stream = New FileStream("movie.flv", FileMode.Open)
' Create FLV unpacker
Dim unpacker As IUnpacker = New FLVUnpacker(inputStream)
' Unpack FLV to flash container
Dim flash As FlashContainer = unpacker.Unpack()
' Write swf-file
flash.WriteToFile("flash.swf")
' Release resource and close data stream
unpacker.Release()
inputStream.Close()</code></example>
    </member>
    <member name="T:Aspose.Flash.Flv.IUnpacker">
      <summary>
            Unpack flash data from an input stream.
            </summary>
      <example>This example shows you how to use IUnpacker interface<code>[C#]

// Open input stream with flv data
Stream inputStream = new FileStream("movie.flv", FileMode.Open);
// Create FLV unpacker
IUnpacker unpacker = new FLVUnpacker(inputStream);
// Unpack FLV to flash container
FlashContainer flash = unpacker.Unpack();
// Write swf-file
flash.WriteToFile("flash.swf");
// Release resource and close data stream
unpacker.Release();
inputStream.Close();</code><code>[Visual Basic]

' Open input stream with flv data
Dim inputStream As Stream = New FileStream("movie.flv", FileMode.Open)
' Create FLV unpacker
Dim unpacker As IUnpacker = New FLVUnpacker(inputStream)
' Unpack FLV to flash container
Dim flash As FlashContainer = unpacker.Unpack()
' Write swf-file
flash.WriteToFile("flash.swf")
' Release resource and close data stream
unpacker.Release()
inputStream.Close()</code></example>
    </member>
    <member name="M:Aspose.Flash.Flv.IUnpacker.Release">
      <summary>
            Release resourses. This method should call after method Unpack().
            </summary>
    </member>
    <member name="M:Aspose.Flash.Flv.IUnpacker.Unpack">
      <summary>
            Does the same as <see cref="M:Aspose.Flash.Flv.IUnpacker.Unpack(System.Int32,System.Int32)" /> but the arguments are set to 1 by default.
            </summary>
      <returns>Created container with flash movie.</returns>
    </member>
    <member name="M:Aspose.Flash.Flv.IUnpacker.Unpack(System.Int32,System.Int32)">
      <summary>
            Unpacks the movie and uses the specified id as a base identifier for the upcoming
            <see cref="T:Aspose.Flash.Video.DefineVideoStream" /> tag which will be present in created container.
            Also it puts all necessary PlaceObject tags at the specified depth.
            </summary>
      <param name="objectIdentifier">Identifier to use.</param>
      <param name="depth">The depth for the PlaceObject tags.</param>
      <returns>Created container with flash movie tags.</returns>
    </member>
    <member name="M:Aspose.Flash.Flv.FLVUnpacker.#ctor(System.IO.Stream)">
      <summary>
            FLVUnpacker constructor.
            </summary>
      <param name="istr">Input stream where flash video in FLV format stored.</param>
      <example>This example shows you how to use FLVUnpacker constructor<code>[C#]

// Open input stream with flv data
Stream inputStream = new FileStream("movie.flv", FileMode.Open);
// Create FLV unpacker
IUnpacker unpacker = new FLVUnpacker(inputStream);
// Unpack FLV to flash container
FlashContainer flash = unpacker.Unpack();
// Write swf-file
flash.WriteToFile("flash.swf");
// Release resource and close data stream
unpacker.Release();
inputStream.Close();</code><code>[Visual Basic]

' Open input stream with flv data
Dim inputStream As Stream = New FileStream("movie.flv", FileMode.Open)
' Create FLV unpacker
Dim unpacker As IUnpacker = New FLVUnpacker(inputStream)
' Unpack FLV to flash container
Dim flash As FlashContainer = unpacker.Unpack()
' Write swf-file
flash.WriteToFile("flash.swf")
' Release resource and close data stream
unpacker.Release()
inputStream.Close()</code></example>
    </member>
    <member name="M:Aspose.Flash.Flv.FLVUnpacker.Release">
      <summary>
            Release resourses. This method should be called after method Unpack().
            </summary>
      <example>This example shows you how to use FLVUnpacker.Release method<code>[C#]

// Open input stream with flv data
Stream inputStream = new FileStream("movie.flv", FileMode.Open);
// Create FLV unpacker
IUnpacker unpacker = new FLVUnpacker(inputStream);
// Unpack FLV to flash container
FlashContainer flash = unpacker.Unpack();
// Write swf-file
flash.WriteToFile("flash.swf");
// Release resource and close data stream
unpacker.Release();
inputStream.Close();</code><code>[Visual Basic]

' Open input stream with flv data
Dim inputStream As Stream = New FileStream("movie.flv", FileMode.Open)
' Create FLV unpacker
Dim unpacker As IUnpacker = New FLVUnpacker(inputStream)
' Unpack FLV to flash container
Dim flash As FlashContainer = unpacker.Unpack()
' Write swf-file
flash.WriteToFile("flash.swf")
' Release resource and close data stream
unpacker.Release()
inputStream.Close()</code></example>
    </member>
    <member name="T:Aspose.Flash.Flv.PackerException">
      <summary>
            Common exception class for all packers.
            </summary>
      <example>This example shows you how to use PackerException class<code>[C#]

try
{
// Open SWF flash file and create flash container
FlashContainer flash = new FlashContainer("flash.swf");
// Open output file stream
Stream fileStream = new FileStream("movie.flv", FileMode.Create);
// Create FLV packer
IPacker packer = new FLVPacker(fileStream);
// Created FLV movie and write it to the stream
packer.Pack(flash);
//release resources
packer.Release();
// Close stream
fileStream.Flush();
fileStream.Close();
}
catch (PackerException pex)
{
MessageBox.Show(pex.ToString());
}</code><code>[Visual Basic]

Try
' Open SWF flash file and create flash container
Dim flash As New FlashContainer("flash.swf")
' Open output file stream
Dim fileStream As Stream = New FileStream("movie.flv", FileMode.Create)
' Create FLV packer
Dim packer As IPacker = New FLVPacker(fileStream)
' Created FLV movie and write it to the stream
packer.Pack(flash)
'release resources
packer.Release()
' Close stream
fileStream.Flush()
fileStream.Close()
Catch pex As PackerException
MessageBox.Show(pex.ToString())
End Try</code></example>
    </member>
    <member name="M:Aspose.Flash.Flv.PackerException.#ctor(System.String,System.Exception)">
      <summary>
            PackerException constructor.
            </summary>
      <param name="message">Detailed information about exception.</param>
      <param name="innerException">Inner exception.</param>
    </member>
    <member name="M:Aspose.Flash.Flv.PackerException.#ctor(System.String)">
      <summary>
            PackerException constructor.
            </summary>
      <param name="message">Detailed information about exception.</param>
      <example>This example shows you how to use PackerException constructor<code>[C#]

//throw PackerException
Exception ex = new Exception("Test Exception");
throw new PackerException("Test PackerException", ex.InnerException);</code><code>[Visual Basic]

'throw PackerException
Dim ex As New Exception("Test Exception")
Throw New PackerException("Test PackerException", ex.InnerException)</code></example>
    </member>
    <member name="T:Aspose.Flash.Flv.UnpackerException">
      <summary>
            Common exception class for all unpackers.
            </summary>
      <example>This example shows you how to use UnpackerException<code>[C#]

try
{
// Open input stream with flv data
Stream inputStream = new FileStream("movie.flv", FileMode.Open);
// Create FLV unpacker
IUnpacker unpacker = new FLVUnpacker(inputStream);
// Unpack FLV to flash container
FlashContainer flash = unpacker.Unpack();
// Write swf-file
flash.WriteToFile("flash.swf");
// Release resource and close data stream
unpacker.Release();
inputStream.Close();
}
catch (UnpackerException upex)
{
MessageBox.Show(upex.ToString());
}</code><code>[Visual Basic]

Try
' Open input stream with flv data
Dim inputStream As Stream = New FileStream("movie.flv", FileMode.Open)
' Create FLV unpacker
Dim unpacker As IUnpacker = New FLVUnpacker(inputStream)
' Unpack FLV to flash container
Dim flash As FlashContainer = unpacker.Unpack()
' Write swf-file
flash.WriteToFile("flash.swf")
' Release resource and close data stream
unpacker.Release()
inputStream.Close()
Catch upex As UnpackerException
MessageBox.Show(upex.ToString())
End Try</code></example>
    </member>
    <member name="M:Aspose.Flash.Flv.UnpackerException.#ctor(System.String,System.Exception)">
      <summary>
            UnpackerException constructor.
            </summary>
      <param name="message">Detailed information about exception.</param>
      <param name="innerExcepion">Inner exception.</param>
    </member>
    <member name="M:Aspose.Flash.Flv.UnpackerException.#ctor(System.String)">
      <summary>
            UnpackerException constructor.
            </summary>
      <param name="message">Detailed information about exception.</param>
      <example>This example shows you how to use UnpackerException constructor<code>[C#]

//throw UnpackgerException
Exception ex = new Exception("Test Exception");
throw new UnpackerException("Test UnpackerException", ex.InnerException);</code><code>[Visual Basic]

'throw UnpackgerException
Dim ex As New Exception("Test Exception")
Throw New UnpackerException("Test UnpackerException", ex.InnerException)</code></example>
    </member>
    <member name="T:Aspose.Flash.Flv.TagType">
      <summary>
            Represents type of data field in an flv tag.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Flv.TagType.AUDIO">
      <summary>
            Audio
            </summary>
    </member>
    <member name="F:Aspose.Flash.Flv.TagType.VIDEO">
      <summary>
            Video
            </summary>
    </member>
    <member name="F:Aspose.Flash.Flv.TagType.DATA">
      <summary>
            Data
            </summary>
    </member>
    <member name="T:Aspose.Flash.License">
      <summary>
            Provides methods to license the component.
            </summary>
      <example>
            In this example, an attempt will be made to find a license file named MyLicense.lic
            in the folder that contains the component, in the folder that contains the calling assembly,
            in the folder of the entry assembly and then in the embedded resources of the calling assembly.
            <code>
            [C#]
            
            License license = new License();
            license.SetLicense("MyLicense.lic");
            
            
            [Visual Basic]
            
            Dim license As license = New license
            License.SetLicense("MyLicense.lic")
            </code></example>
    </member>
    <member name="M:Aspose.Flash.License.#ctor">
      <summary>
            Initializes a new instance of this class.
            </summary>
      <example>
            In this example, an attempt will be made to find a license file named MyLicense.lic
            in the folder that contains the component, in the folder that contains the calling assembly,
            in the folder of the entry assembly and then in the embedded resources of the calling assembly.
            <code>
            [C#]
            
            License license = new License();
            license.SetLicense("MyLicense.lic");
            
            
            [Visual Basic]
            
            Dim license As license = New license
            License.SetLicense("MyLicense.lic")
            </code></example>
    </member>
    <member name="M:Aspose.Flash.License.SetLicense(System.String)">
      <summary>
            Licenses the component.
            </summary>
      <param name="licenseName">Can be a full or short file name or name of an embedded resource.
            Use an empty string to switch to evaluation mode.</param>
      <remarks>
        <p>Tries to find the license in the following locations:</p>
        <p>1. Explicit path.</p>
        <p>2. The folder of the component assembly.</p>
        <p>3. The folder of the client's calling assembly.</p>
        <p>4. The folder of the entry assembly.</p>
        <p>5. An embedded resource in the client's calling assembly.</p>
        <p>
          <b>Note:</b>On the .NET Compact Framework, tries to find the license only in these locations:</p>
        <p>1. Explicit path.</p>
        <p>2. An embedded resource in the client's calling assembly.</p>
      </remarks>
      <example>
            In this example, an attempt will be made to find a license file named MyLicense.lic
            in the folder that contains the component, in the folder that contains the calling assembly,
            in the folder of the entry assembly and then in the embedded resources of the calling assembly.
            <code>
            [C#]
            
            License license = new License();
            license.SetLicense("MyLicense.lic");
            
            
            [Visual Basic]
            
            Dim license As License = New License
            license.SetLicense("MyLicense.lic")
            </code></example>
    </member>
    <member name="M:Aspose.Flash.License.SetLicense(System.IO.Stream)">
      <summary>
            Licenses the component.
            </summary>
      <param name="stream">A stream that contains the license.</param>
      <remarks>
        <p>Use this method to load a license from a stream.</p>
      </remarks>
      <example>
        <code>
            [C#]
            
            License license = new License();
            license.SetLicense(myStream);
            
            
            [Visual Basic]
            
            Dim license as License = new License
            license.SetLicense(myStream)
            </code>
      </example>
    </member>
    <member name="T:Aspose.Flash.Shapes.ShapeRecord">
      <summary>
            Represents a base class for record within the shape.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Shapes.ShapeRecord.RecordType">
      <summary>
            Gets the type of the record.
            </summary>
      <value>The type of the record.</value>
    </member>
    <member name="T:Aspose.Flash.Shapes.BitmapFill">
      <summary>
            Used to fill a shape with a bitmap image.
            <p>The class is used with folowing FillStyleType:</p><ul><li>RepeatingBitmapFill</li><li>ClippedBitmapFill</li><li>NonSmoothedRepeatingBitmap</li><li>NonSmoothedClippedBitmap</li></ul></summary>
      <example>This example shows you how to use BitmapFill class<code>[C#]

//flash is the flash containter
//bmp is the bmp bitmap image
//list is the array list

int identifier = flash.NewIdentifier();

//Define image and then add it to the FlashContainer object
FlashBitmap defineImage = new FlashBitmap(
identifier, FlashBitmapType.FlashBitmapLossless, false, bmp);
list.Add(defineImage);

//ShapeManager class is used to create a rectangle with image used to Fill the rectangle
//This is the way to add an image to flash movie using Aspose.Flash.
ShapeManager shapeManager = new ShapeManager();
identifier = flash.NewIdentifier();

shapeManager.Add(new SolidLine(0, Color.White));
MatrixTransform m = new MatrixTransform();
m.Scale(20, 20);
shapeManager.Add(new BitmapFill(FillStyleType.ClippedBitmapFill, defineImage.Id, m));

shapeManager.DrawRectangle(0, 0, width, height);
DefineShape2 shape = shapeManager.GetDefineShape(identifier);
list.Add(shape);

int buttonState = (int)ButtonState.Down | (int)ButtonState.Up |
(int)ButtonState.Over | (int)ButtonState.Active;
ButtonRecord buttonRec = new ButtonRecord(
buttonState, shape.Id, depth, new MatrixTransform(), new ColorTransform(1, 1, 1, 0, 0, 0));
ArrayList buttons = new ArrayList();
buttons.Add(buttonRec);

ArrayList actionArray = new ArrayList();
ButtonAction buttonAction = new ButtonAction((int)ButtonActionType.Press, actionArray);
ArrayList buttonActions = new ArrayList();
buttonActions.Add(buttonAction);
DefineButton2 button = new DefineButton2(flash.NewIdentifier(), false, buttons, buttonActions);
list.Add(button);

// place button in movie clip and define button name for ActionScript
PlaceObject2 pObject = new PlaceObject2(button.ButtonId, depth);
pObject.CharacterType = PlaceType.New;
pObject.Name = bname; // button name for action script handler
pObject.MatrixTransform = new MatrixTransform(xPosition, yPosition);
list.Add(pObject);</code><code>[Visual Basic]

'flash is the flash containter
'bmp is the bmp bitmap image
'list is the array list

Dim identifier As Integer = flash.NewIdentifier()

'Define image and then add it to the FlashContainer object
Dim defineImage As New FlashBitmap(identifier, FlashBitmapType.FlashBitmapLossless, False, bmp)
list.Add(defineImage)

'ShapeManager class is used to create a rectangle with image used to Fill the rectangle
'This is the way to add an image to flash movie using Aspose.Flash.
Dim shapeManager As New ShapeManager()
identifier = flash.NewIdentifier()

shapeManager.Add(New SolidLine(0, Color.White))
Dim m As New MatrixTransform()
m.Scale(20, 20)
shapeManager.Add(New BitmapFill(FillStyleType.ClippedBitmapFill, defineImage.Id, m))

shapeManager.DrawRectangle(0, 0, width, height)
Dim shape As DefineShape2 = shapeManager.GetDefineShape(identifier)
list.Add(shape)

Dim buttonState As Integer = CInt(Fix(ButtonState.Down)) Or CInt(Fix(ButtonState.Up)) Or CInt(Fix(ButtonState.Over)) Or CInt(Fix(ButtonState.Active))
Dim buttonRec As New ButtonRecord(buttonState, shape.Id, depth, New MatrixTransform(), New ColorTransform(1, 1, 1, 0, 0, 0))
Dim buttons As New ArrayList()
buttons.Add(buttonRec)

Dim actionArray As New ArrayList()
Dim buttonAction As New ButtonAction(CInt(Fix(ButtonActionType.Press)), actionArray)
Dim buttonActions As New ArrayList()
buttonActions.Add(buttonAction)
Dim button As New DefineButton2(flash.NewIdentifier(), False, buttons, buttonActions)
list.Add(button)

' place button in movie clip and define button name for ActionScript
Dim pObject As New PlaceObject2(button.ButtonId, depth)
pObject.CharacterType = PlaceType.New
pObject.Name = bname ' button name for action script handler
pObject.MatrixTransform = New MatrixTransform(xPosition, yPosition)
list.Add(pObject)</code></example>
    </member>
    <member name="T:Aspose.Flash.Shapes.FillStyle">
      <summary>
            Abstract class which represents the fill style of a shape.
            </summary>
      <example>This example shows you how to use FillStyle class<code>[C#]

//Create a flash container and set frame size and frame rate
FlashContainer fc = new FlashContainer();
fc.FrameRate = 12.0f;
fc.FrameSize = new Rect(0, 0, 4000, 4000);

//Define fill styles array
//Add two colors RED and BLUE in fill styles array
ArrayList fillStyles = new ArrayList();
fillStyles.Add(new SolidFill(new RGB(255, 0, 0)));
fillStyles.Add(new SolidFill(new RGB(0, 255, 0)));

//Define line styles array
//Add two colors GREEN and YELLOW in line styles array
ArrayList lineStyles = new ArrayList();
lineStyles.Add(new SolidLine(10, new RGB(0, 0, 255)));
lineStyles.Add(new SolidLine(50, new RGB(255, 255, 0)));

//Define Style Change Record
StyleChangeRecord scr = new StyleChangeRecord(-1000, -1000);
scr.FillStyle = 1;  //Select RED
scr.LineStyle = 2;  //Select YELLOW

//add fill tyle and line style
scr.Add(new SolidFill(Color.FromName("Red")));
scr.Add(new SolidLine(50, Color.FromName("Green")));


//Define four edges of Rectangle
StraightEdgeRecord ser1 = new StraightEdgeRecord(2000, 0);
StraightEdgeRecord ser2 = new StraightEdgeRecord(0, 2000);
StraightEdgeRecord ser3 = new StraightEdgeRecord(-2000, 0);
StraightEdgeRecord ser4 = new StraightEdgeRecord(0, -2000);

//Put all the five shape records in a Aspose.Flash.Shapes.Shape
//object, this is just a collection that will hold shape records
//for DefineShape2 tag
Shape shapeRect = new Shape();
shapeRect.Add(scr);
shapeRect.Add(ser1);
shapeRect.Add(ser2);
shapeRect.Add(ser3);
shapeRect.Add(ser4);


//At this point we have all the things to create an instance of
//DefineShape3 class
DefineShape3 defineShape = new DefineShape3(fc.NewIdentifier(),
new Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect);

//adding fill style and line style in the define shape 3 object
defineShape.Add(new SolidFill(new RGB(255, 0, 0)));

defineShape.Add(new SolidLine(50, new RGB(0, 255, 0)));

//Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape);

//Place the Rectangle Character on Display List
PlaceObject2 placeObj = new PlaceObject2(defineShape.Id, 1);
//Translate the origin of newly placed object
placeObj.MatrixTransform = new MatrixTransform(2000, 2000);

//Add CONTROL TAG created above inside the flash container
fc.Add(placeObj);
//Show the next frame using CONTROL TAG and add it inside the

//flash container
fc.Add(new ShowFrame());
//Now write the flash container on disk to show its output
fc.Write("c:\\out.swf");</code><code>[Visual Basic]

'Create a flash container and set frame size and frame rate
Dim fc As New FlashContainer()
fc.FrameRate = 12.0f
fc.FrameSize = New Rect(0, 0, 4000, 4000)

'Define fill styles array
'Add two colors RED and BLUE in fill styles array
Dim fillStyles As New ArrayList()
fillStyles.Add(New SolidFill(New RGB(255, 0, 0)))
fillStyles.Add(New SolidFill(New RGB(0, 255, 0)))

'Define line styles array
'Add two colors GREEN and YELLOW in line styles array
Dim lineStyles As New ArrayList()
lineStyles.Add(New SolidLine(10, New RGB(0, 0, 255)))
lineStyles.Add(New SolidLine(50, New RGB(255, 255, 0)))

'Define Style Change Record
Dim scr As New StyleChangeRecord(-1000, -1000)
scr.FillStyle = 1 'Select RED
scr.LineStyle = 2 'Select YELLOW

'add fill tyle and line style
scr.Add(New SolidFill(Color.FromName("Red")))
scr.Add(New SolidLine(50, Color.FromName("Green")))


'Define four edges of Rectangle
Dim ser1 As New StraightEdgeRecord(2000, 0)
Dim ser2 As New StraightEdgeRecord(0, 2000)
Dim ser3 As New StraightEdgeRecord(-2000, 0)
Dim ser4 As New StraightEdgeRecord(0, -2000)

'Put all the five shape records in a Aspose.Flash.Shapes.Shape
'object, this is just a collection that will hold shape records
'for DefineShape2 tag
Dim shapeRect As New Shape()
shapeRect.Add(scr)
shapeRect.Add(ser1)
shapeRect.Add(ser2)
shapeRect.Add(ser3)
shapeRect.Add(ser4)


'At this point we have all the things to create an instance of
'DefineShape3 class
Dim defineShape As New DefineShape3(fc.NewIdentifier(), New Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect)

'adding fill style and line style in the define shape 3 object
defineShape.Add(New SolidFill(New RGB(255, 0, 0)))

defineShape.Add(New SolidLine(50, New RGB(0, 255, 0)))

'Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape)

'Place the Rectangle Character on Display List
Dim placeObj As New PlaceObject2(defineShape.Id, 1)
'Translate the origin of newly placed object
placeObj.MatrixTransform = New MatrixTransform(2000, 2000)

'Add CONTROL TAG created above inside the flash container
fc.Add(placeObj)
'Show the next frame using CONTROL TAG and add it inside the

'flash container
fc.Add(New ShowFrame())
'Now write the flash container on disk to show its output
fc.Write("c:\out.swf")</code></example>
    </member>
    <member name="P:Aspose.Flash.Shapes.FillStyle.Type">
      <summary> 
            Returns or sets the type of the fill style.
            Read/write <see cref="T:Aspose.Flash.Shapes.FillStyleType" />.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Shapes.BitmapFill.#ctor(Aspose.Flash.Shapes.FillStyleType,System.Int32,Aspose.Flash.Basic.MatrixTransform)">
      <summary>
            Creates BitmapFill with specified type, Id and transformation.
            </summary>
      <param name="type">Fill type. See <see cref="T:Aspose.Flash.Shapes.FillStyleType" />.</param>
      <param name="identifier">Bitmap Id.</param>
      <param name="transform">Trasnformations applied to the bitmap.</param>
      <example>This example shows you how to use BitmapFill constructor<code>[C#]

//flash is the flash containter
//bmp is the bmp bitmap image
//list is the array list

int identifier = flash.NewIdentifier();

//Define image and then add it to the FlashContainer object
FlashBitmap defineImage = new FlashBitmap(
identifier, FlashBitmapType.FlashBitmapLossless, false, bmp);
list.Add(defineImage);

//ShapeManager class is used to create a rectangle with image used to Fill the rectangle
//This is the way to add an image to flash movie using Aspose.Flash.
ShapeManager shapeManager = new ShapeManager();
identifier = flash.NewIdentifier();

shapeManager.Add(new SolidLine(0, Color.White));
MatrixTransform m = new MatrixTransform();
m.Scale(20, 20);
shapeManager.Add(new BitmapFill(FillStyleType.ClippedBitmapFill, defineImage.Id, m));

shapeManager.DrawRectangle(0, 0, width, height);
DefineShape2 shape = shapeManager.GetDefineShape(identifier);
list.Add(shape);

int buttonState = (int)ButtonState.Down | (int)ButtonState.Up |
(int)ButtonState.Over | (int)ButtonState.Active;
ButtonRecord buttonRec = new ButtonRecord(
buttonState, shape.Id, depth, new MatrixTransform(), new ColorTransform(1, 1, 1, 0, 0, 0));
ArrayList buttons = new ArrayList();
buttons.Add(buttonRec);

ArrayList actionArray = new ArrayList();
ButtonAction buttonAction = new ButtonAction((int)ButtonActionType.Press, actionArray);
ArrayList buttonActions = new ArrayList();
buttonActions.Add(buttonAction);
DefineButton2 button = new DefineButton2(flash.NewIdentifier(), false, buttons, buttonActions);
list.Add(button);

// place button in movie clip and define button name for ActionScript
PlaceObject2 pObject = new PlaceObject2(button.ButtonId, depth);
pObject.CharacterType = PlaceType.New;
pObject.Name = bname; // button name for action script handler
pObject.MatrixTransform = new MatrixTransform(xPosition, yPosition);
list.Add(pObject);</code><code>[Visual Basic]

'flash is the flash containter
'bmp is the bmp bitmap image
'list is the array list

Dim identifier As Integer = flash.NewIdentifier()

'Define image and then add it to the FlashContainer object
Dim defineImage As New FlashBitmap(identifier, FlashBitmapType.FlashBitmapLossless, False, bmp)
list.Add(defineImage)

'ShapeManager class is used to create a rectangle with image used to Fill the rectangle
'This is the way to add an image to flash movie using Aspose.Flash.
Dim shapeManager As New ShapeManager()
identifier = flash.NewIdentifier()

shapeManager.Add(New SolidLine(0, Color.White))
Dim m As New MatrixTransform()
m.Scale(20, 20)
shapeManager.Add(New BitmapFill(FillStyleType.ClippedBitmapFill, defineImage.Id, m))

shapeManager.DrawRectangle(0, 0, width, height)
Dim shape As DefineShape2 = shapeManager.GetDefineShape(identifier)
list.Add(shape)

Dim buttonState As Integer = CInt(Fix(ButtonState.Down)) Or CInt(Fix(ButtonState.Up)) Or CInt(Fix(ButtonState.Over)) Or CInt(Fix(ButtonState.Active))
Dim buttonRec As New ButtonRecord(buttonState, shape.Id, depth, New MatrixTransform(), New ColorTransform(1, 1, 1, 0, 0, 0))
Dim buttons As New ArrayList()
buttons.Add(buttonRec)

Dim actionArray As New ArrayList()
Dim buttonAction As New ButtonAction(CInt(Fix(ButtonActionType.Press)), actionArray)
Dim buttonActions As New ArrayList()
buttonActions.Add(buttonAction)
Dim button As New DefineButton2(flash.NewIdentifier(), False, buttons, buttonActions)
list.Add(button)

' place button in movie clip and define button name for ActionScript
Dim pObject As New PlaceObject2(button.ButtonId, depth)
pObject.CharacterType = PlaceType.New
pObject.Name = bname ' button name for action script handler
pObject.MatrixTransform = New MatrixTransform(xPosition, yPosition)
list.Add(pObject)</code></example>
    </member>
    <member name="P:Aspose.Flash.Shapes.BitmapFill.BitmapId">
      <summary>
            Returns or sets the Id of a bitmap.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Shapes.BitmapFill.MatrixTransform">
      <summary>
            Returns or sets the transformation matrix for the bitmap.
            Read/write <see cref="P:Aspose.Flash.Shapes.BitmapFill.MatrixTransform" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Shapes.CurvedEdgeRecord">
      <summary>
        <p>Represents the edge as two X-Y deltas used for defining Quadratic Bezier in the nex way:</p>
        <ol>
          <li>The first anchor point is the current drawing position.</li>
          <li>The control point is the current drawing position + ControlDelta.</li>
          <li>The last anchor point is the current drawing position + ControlDelta + AnchorDelta.</li>
        </ol>
            The last anchor point becomes the current drawing position.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Shapes.CurvedEdgeRecord.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Creates CurvedEdgeRecord object. 
            </summary>
      <param name="deltaX">Delta X coordinate of the control point.</param>
      <param name="deltaY">Delta Y coordinate of the control point.</param>
      <param name="anchorX">Delta X coordinate of the anchor point.</param>
      <param name="anchorY">Delta Y coordinate of the anchor point.</param>
    </member>
    <member name="P:Aspose.Flash.Shapes.CurvedEdgeRecord.ControlDeltaX">
      <summary>
            Returns or sets the delta X coordinate in twips
            from current drawing position to control point.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Shapes.CurvedEdgeRecord.ControlDeltaY">
      <summary>
            Returns or sets the delta Y coordinate in twips
            from current drawing position to control point.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Shapes.CurvedEdgeRecord.AnchorDeltaX">
      <summary>
            Returns or sets the delta X coordinate in twips
            from control point to last anchor point.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Shapes.CurvedEdgeRecord.AnchorDeltaY">
      <summary>
            Returns or sets the delta Y coordinate in twips
            from control point to last anchor point.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Shapes.DefineMorphShape">
      <summary>
            Represents the start and the end states of a morph sequence.
            A morph object should be displayed with the PlaceObject2 class,
            where the ratio field specifies how far the morph has progressed.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Shapes.DefineMorphShape.#ctor(System.Int32,Aspose.Flash.Basic.Rect,Aspose.Flash.Basic.Rect,System.Collections.ArrayList,System.Collections.ArrayList,Aspose.Flash.Shapes.Shape,Aspose.Flash.Shapes.Shape)">
      <summary>
            DefineMorphShape constructor.
            </summary>
      <param name="id">Object identifier.</param>
      <param name="startBounds">Bounds of the start shape.</param>
      <param name="endBounds">Bounds of the end shape.</param>
      <param name="fillStyleArray">Array of fill styles object.</param>
      <param name="lineStyleArray">Array of line style objects.</param>
      <param name="startEdges">Shape at the start of the morphing process.</param>
      <param name="endEdges">Shape at the end of the morphing process.</param>
    </member>
    <member name="M:Aspose.Flash.Shapes.DefineMorphShape.Add(Aspose.Flash.Shapes.LineStyle)">
      <summary>
            Add a SolidLine object to the array of line styles.
            </summary>
      <param name="lineStyle">SolidLine object.</param>
    </member>
    <member name="M:Aspose.Flash.Shapes.DefineMorphShape.Add(Aspose.Flash.Shapes.FillStyle)">
      <summary>
            Add the fill style object to the array of fill styles.
            </summary>
      <param name="fillStyle">FillStyle object.</param>
    </member>
    <member name="P:Aspose.Flash.Shapes.DefineMorphShape.ObjectId">
      <summary>
            Returns or sets the Id of an object.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Shapes.DefineMorphShape.StartBounds">
      <summary>
            Returns or sets the bounds of the start shape.
            Read/write <see cref="T:Aspose.Flash.Basic.Rect" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Shapes.DefineMorphShape.EndBounds">
      <summary>
            Returns or sets the bounds of the end shape
            Read/write <see cref="T:Aspose.Flash.Basic.Rect" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Shapes.DefineMorphShape.MorphFillStyles">
      <summary>
            Returns or sets fill styles.
            Read/write <see cref="T:System.Collections.ArrayList" />.
            </summary>
      <remarks>
            Fill style information is stored in the same manner as for a standard shape.
            However, each fill consists of interleaved information based on a single
            style type to accommodate morphing. 
            </remarks>
    </member>
    <member name="P:Aspose.Flash.Shapes.DefineMorphShape.MorphLineStyles">
      <summary>
            Returns or sets line styles.
            Read/write <see cref="T:System.Collections.ArrayList" />.
            </summary>
      <remarks>
            Line style information is stored in the same manner as for a standard shape.
            however, each line consists of interleaved information based on a single
            style type to accommodate morphing.
            </remarks>
    </member>
    <member name="P:Aspose.Flash.Shapes.DefineMorphShape.StartEdges">
      <summary>
             Returns or sets the set of edges and the style bits that indicate style changes.
             Read/write <see cref="T:Aspose.Flash.Shapes.Shape" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Shapes.DefineMorphShape.EndEdges">
      <summary>
            Returns or sets the set of edges, with no style information.
            Read/write <see cref="T:Aspose.Flash.Shapes.Shape" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Shapes.DefineMorphShape2">
      <summary>
            The DefineMorphShape2 tag extends the capabilities of DefineMorphShape by using a new
            morph line style record in the morph shape. It allows the use of new
            types of joins and caps as well as scaling options and the ability to fill the strokes of the morph
            shape.
            DefineMorphShape2 specifies not only the shape bounds but also the edge bounds of the
            shape. While the shape bounds are calculated along the outside of the strokes, the edge
            bounds are taken from the outside of the edges.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Shapes.DefineMorphShape2.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Shapes.DefineMorphShape2.StartBounds">
      <summary>
            Bounds of the start shape
            </summary>
    </member>
    <member name="P:Aspose.Flash.Shapes.DefineMorphShape2.EndBounds">
      <summary>
            Bounds of the end shape
            </summary>
    </member>
    <member name="P:Aspose.Flash.Shapes.DefineMorphShape2.StartEdgeBounds">
      <summary>
            Bounds of the start shape, excluding strokes
            </summary>
    </member>
    <member name="P:Aspose.Flash.Shapes.DefineMorphShape2.EndEdgeBounds">
      <summary>
            Bounds of the end shape, excluding strokes
            </summary>
    </member>
    <member name="P:Aspose.Flash.Shapes.DefineMorphShape2.EsesNonScalingStrikes">
      <summary>
            If true, the shape contains at least one non-scaling stroke.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Shapes.DefineMorphShape2.UsesScalingStrokes">
      <summary>
            If true, the shape contains at least one scaling stroke.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Shapes.DefineMorphShape2.MorphFillStyles">
      <summary>
            Fill style information
            </summary>
    </member>
    <member name="P:Aspose.Flash.Shapes.DefineMorphShape2.MorphLineStyles">
      <summary>
            Line style information
            </summary>
    </member>
    <member name="P:Aspose.Flash.Shapes.DefineMorphShape2.StartEdges">
      <summary>
            Contains the set of edges and the style bits that indicate style 
            changes (for example, MoveTo, FillStyle, and LineStyle).
            Number of edges must equal the number of edges in EndEdges.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Shapes.DefineMorphShape2.EndEdges">
      <summary>
            Contains only the set of edges, with no style information. 
            Number of edges must equal the number of edges in StartEdges.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Shapes.DefineShape">
      <summary>
            Represents the shape for using in control objects like PlaceObject.
            </summary>
      <example>This example shows you how to use DefineShape class<code>[C#]

//Create a flash container and set frame size and frame rate
FlashContainer fc = new FlashContainer();
fc.FrameRate = 12.0f;
fc.FrameSize = new Rect(0, 0, 4000, 4000);

//Define fill styles array
//Add two colors RED and BLUE in fill styles array
ArrayList fillStyles = new ArrayList();
fillStyles.Add(new SolidFill(new RGB(255, 0, 0)));
fillStyles.Add(new SolidFill(new RGB(0, 255, 0)));

//Define line styles array
//Add two colors GREEN and YELLOW in line styles array
ArrayList lineStyles = new ArrayList();
lineStyles.Add(new SolidLine(10, new RGB(0, 0, 255)));
lineStyles.Add(new SolidLine(50, new RGB(255, 255, 0)));

//Define Style Change Record
StyleChangeRecord scr = new StyleChangeRecord(-1000, -1000);
scr.FillStyle = 1;  //Select RED
scr.LineStyle = 2;  //Select YELLOW

//add fill tyle and line style
scr.Add(new SolidFill(Color.FromName("Red")));
scr.Add(new SolidLine(50,Color.FromName("Green")));


//Define four edges of Rectangle
StraightEdgeRecord ser1 = new StraightEdgeRecord(2000, 0);
StraightEdgeRecord ser2 = new StraightEdgeRecord(0, 2000);
StraightEdgeRecord ser3 = new StraightEdgeRecord(-2000, 0);
StraightEdgeRecord ser4 = new StraightEdgeRecord(0, -2000);

//Put all the five shape records in a Aspose.Flash.Shapes.Shape
//object, this is just a collection that will hold shape records
//for DefineShape2 tag
Shape shapeRect = new Shape();
shapeRect.Add(scr);
shapeRect.Add(ser1);
shapeRect.Add(ser2);
shapeRect.Add(ser3);
shapeRect.Add(ser4);


//At this point we have all the things to create an instance of
//DefineShape2 class
DefineShape defineShape = new DefineShape(fc.NewIdentifier(),
new Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect);

//adding fill style and line style in the define shape 2 object
defineShape.Add(new SolidFill(new RGB(255,0,0)));

defineShape.Add(new  SolidLine(50,new RGB(0,255,0)));

//Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape);

//Place the Rectangle Character on Display List
PlaceObject2 placeObj = new PlaceObject2(defineShape.Id, 1);
//Translate the origin of newly placed object
placeObj.MatrixTransform = new MatrixTransform(2000, 2000);

//Add CONTROL TAG created above inside the flash container
fc.Add(placeObj);
//Show the next frame using CONTROL TAG and add it inside the

//flash container
fc.Add(new ShowFrame());
//Now write the flash container on disk to show its output
fc.Write("c:\\out.swf");</code><code>[Visual Basic]

'Create a flash container and set frame size and frame rate
Dim fc As New FlashContainer()
fc.FrameRate = 12.0f
fc.FrameSize = New Rect(0, 0, 4000, 4000)

'Define fill styles array
'Add two colors RED and BLUE in fill styles array
Dim fillStyles As New ArrayList()
fillStyles.Add(New SolidFill(New RGB(255, 0, 0)))
fillStyles.Add(New SolidFill(New RGB(0, 255, 0)))

'Define line styles array
'Add two colors GREEN and YELLOW in line styles array
Dim lineStyles As New ArrayList()
lineStyles.Add(New SolidLine(10, New RGB(0, 0, 255)))
lineStyles.Add(New SolidLine(50, New RGB(255, 255, 0)))

'Define Style Change Record
Dim scr As New StyleChangeRecord(-1000, -1000)
scr.FillStyle = 1 'Select RED
scr.LineStyle = 2 'Select YELLOW

'add fill tyle and line style
scr.Add(New SolidFill(Color.FromName("Red")))
scr.Add(New SolidLine(50,Color.FromName("Green")))


'Define four edges of Rectangle
Dim ser1 As New StraightEdgeRecord(2000, 0)
Dim ser2 As New StraightEdgeRecord(0, 2000)
Dim ser3 As New StraightEdgeRecord(-2000, 0)
Dim ser4 As New StraightEdgeRecord(0, -2000)

'Put all the five shape records in a Aspose.Flash.Shapes.Shape
'object, this is just a collection that will hold shape records
'for DefineShape2 tag
Dim shapeRect As New Shape()
shapeRect.Add(scr)
shapeRect.Add(ser1)
shapeRect.Add(ser2)
shapeRect.Add(ser3)
shapeRect.Add(ser4)


'At this point we have all the things to create an instance of
'DefineShape2 class
Dim defineShape As New DefineShape(fc.NewIdentifier(), New Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect)

'adding fill style and line style in the define shape 2 object
defineShape.Add(New SolidFill(New RGB(255,0,0)))

defineShape.Add(New SolidLine(50,New RGB(0,255,0)))

'Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape)

'Place the Rectangle Character on Display List
Dim placeObj As New PlaceObject2(defineShape.Id, 1)
'Translate the origin of newly placed object
placeObj.MatrixTransform = New MatrixTransform(2000, 2000)

'Add CONTROL TAG created above inside the flash container
fc.Add(placeObj)
'Show the next frame using CONTROL TAG and add it inside the

'flash container
fc.Add(New ShowFrame())
'Now write the flash container on disk to show its output
fc.Write("c:\out.swf")</code></example>
    </member>
    <member name="M:Aspose.Flash.Shapes.DefineShape.#ctor(System.Int32,Aspose.Flash.Basic.Rect,System.Collections.ArrayList,System.Collections.ArrayList,Aspose.Flash.Shapes.Shape)">
      <summary>
            Creates DefineShape with specified shape Id, bounds and shape styles.
            </summary>
      <param name="shapeID">Shape Id.</param>
      <param name="bounds">Shape bounds.</param>
      <param name="fillStyleArray">Collection of fill styles.</param>
      <param name="lineStyleArray">Collection of line styles.</param>
      <param name="shape">Shape information.</param>
      <example>This example shows you how to use DefineShape constructor<code>[C#]

//Create a flash container and set frame size and frame rate
FlashContainer fc = new FlashContainer();
fc.FrameRate = 12.0f;
fc.FrameSize = new Rect(0, 0, 4000, 4000);

//Define fill styles array
//Add two colors RED and BLUE in fill styles array
ArrayList fillStyles = new ArrayList();
fillStyles.Add(new SolidFill(new RGB(255, 0, 0)));
fillStyles.Add(new SolidFill(new RGB(0, 255, 0)));

//Define line styles array
//Add two colors GREEN and YELLOW in line styles array
ArrayList lineStyles = new ArrayList();
lineStyles.Add(new SolidLine(10, new RGB(0, 0, 255)));
lineStyles.Add(new SolidLine(50, new RGB(255, 255, 0)));

//Define Style Change Record
StyleChangeRecord scr = new StyleChangeRecord(-1000, -1000);
scr.FillStyle = 1;  //Select RED
scr.LineStyle = 2;  //Select YELLOW

//add fill tyle and line style
scr.Add(new SolidFill(Color.FromName("Red")));
scr.Add(new SolidLine(50,Color.FromName("Green")));


//Define four edges of Rectangle
StraightEdgeRecord ser1 = new StraightEdgeRecord(2000, 0);
StraightEdgeRecord ser2 = new StraightEdgeRecord(0, 2000);
StraightEdgeRecord ser3 = new StraightEdgeRecord(-2000, 0);
StraightEdgeRecord ser4 = new StraightEdgeRecord(0, -2000);

//Put all the five shape records in a Aspose.Flash.Shapes.Shape
//object, this is just a collection that will hold shape records
//for DefineShape2 tag
Shape shapeRect = new Shape();
shapeRect.Add(scr);
shapeRect.Add(ser1);
shapeRect.Add(ser2);
shapeRect.Add(ser3);
shapeRect.Add(ser4);


//At this point we have all the things to create an instance of
//DefineShape2 class
DefineShape defineShape = new DefineShape(fc.NewIdentifier(),
new Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect);

//adding fill style and line style in the define shape 2 object
defineShape.Add(new SolidFill(new RGB(255,0,0)));

defineShape.Add(new  SolidLine(50,new RGB(0,255,0)));

//Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape);

//Place the Rectangle Character on Display List
PlaceObject2 placeObj = new PlaceObject2(defineShape.Id, 1);
//Translate the origin of newly placed object
placeObj.MatrixTransform = new MatrixTransform(2000, 2000);

//Add CONTROL TAG created above inside the flash container
fc.Add(placeObj);
//Show the next frame using CONTROL TAG and add it inside the

//flash container
fc.Add(new ShowFrame());
//Now write the flash container on disk to show its output
fc.Write("c:\\out.swf");</code><code>[Visual Basic]

'Create a flash container and set frame size and frame rate
Dim fc As New FlashContainer()
fc.FrameRate = 12.0f
fc.FrameSize = New Rect(0, 0, 4000, 4000)

'Define fill styles array
'Add two colors RED and BLUE in fill styles array
Dim fillStyles As New ArrayList()
fillStyles.Add(New SolidFill(New RGB(255, 0, 0)))
fillStyles.Add(New SolidFill(New RGB(0, 255, 0)))

'Define line styles array
'Add two colors GREEN and YELLOW in line styles array
Dim lineStyles As New ArrayList()
lineStyles.Add(New SolidLine(10, New RGB(0, 0, 255)))
lineStyles.Add(New SolidLine(50, New RGB(255, 255, 0)))

'Define Style Change Record
Dim scr As New StyleChangeRecord(-1000, -1000)
scr.FillStyle = 1 'Select RED
scr.LineStyle = 2 'Select YELLOW

'add fill tyle and line style
scr.Add(New SolidFill(Color.FromName("Red")))
scr.Add(New SolidLine(50,Color.FromName("Green")))


'Define four edges of Rectangle
Dim ser1 As New StraightEdgeRecord(2000, 0)
Dim ser2 As New StraightEdgeRecord(0, 2000)
Dim ser3 As New StraightEdgeRecord(-2000, 0)
Dim ser4 As New StraightEdgeRecord(0, -2000)

'Put all the five shape records in a Aspose.Flash.Shapes.Shape
'object, this is just a collection that will hold shape records
'for DefineShape2 tag
Dim shapeRect As New Shape()
shapeRect.Add(scr)
shapeRect.Add(ser1)
shapeRect.Add(ser2)
shapeRect.Add(ser3)
shapeRect.Add(ser4)


'At this point we have all the things to create an instance of
'DefineShape2 class
Dim defineShape As New DefineShape(fc.NewIdentifier(), New Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect)

'adding fill style and line style in the define shape 2 object
defineShape.Add(New SolidFill(New RGB(255,0,0)))

defineShape.Add(New SolidLine(50,New RGB(0,255,0)))

'Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape)

'Place the Rectangle Character on Display List
Dim placeObj As New PlaceObject2(defineShape.Id, 1)
'Translate the origin of newly placed object
placeObj.MatrixTransform = New MatrixTransform(2000, 2000)

'Add CONTROL TAG created above inside the flash container
fc.Add(placeObj)
'Show the next frame using CONTROL TAG and add it inside the

'flash container
fc.Add(New ShowFrame())
'Now write the flash container on disk to show its output
fc.Write("c:\out.swf")</code></example>
    </member>
    <member name="M:Aspose.Flash.Shapes.DefineShape.Add(Aspose.Flash.Shapes.LineStyle)">
      <summary>
            Add a LineStyle object to the array of line styles.
            </summary>
      <param name="lineStyle">LineStyle object.</param>
      <example>This example shows you how to use Add(LineStyle) method<code>[Visual Basic]

'Create a flash container and set frame size and frame rate
Dim fc As New FlashContainer()
fc.FrameRate = 12.0f
fc.FrameSize = New Rect(0, 0, 4000, 4000)

'Define fill styles array
'Add two colors RED and BLUE in fill styles array
Dim fillStyles As New ArrayList()
fillStyles.Add(New SolidFill(New RGB(255, 0, 0)))
fillStyles.Add(New SolidFill(New RGB(0, 255, 0)))

'Define line styles array
'Add two colors GREEN and YELLOW in line styles array
Dim lineStyles As New ArrayList()
lineStyles.Add(New SolidLine(10, New RGB(0, 0, 255)))
lineStyles.Add(New SolidLine(50, New RGB(255, 255, 0)))

'Define Style Change Record
Dim scr As New StyleChangeRecord(-1000, -1000)
scr.FillStyle = 1 'Select RED
scr.LineStyle = 2 'Select YELLOW

'add fill tyle and line style
scr.Add(New SolidFill(Color.FromName("Red")))
scr.Add(New SolidLine(50,Color.FromName("Green")))


'Define four edges of Rectangle
Dim ser1 As New StraightEdgeRecord(2000, 0)
Dim ser2 As New StraightEdgeRecord(0, 2000)
Dim ser3 As New StraightEdgeRecord(-2000, 0)
Dim ser4 As New StraightEdgeRecord(0, -2000)

'Put all the five shape records in a Aspose.Flash.Shapes.Shape
'object, this is just a collection that will hold shape records
'for DefineShape2 tag
Dim shapeRect As New Shape()
shapeRect.Add(scr)
shapeRect.Add(ser1)
shapeRect.Add(ser2)
shapeRect.Add(ser3)
shapeRect.Add(ser4)


'At this point we have all the things to create an instance of
'DefineShape2 class
Dim defineShape As New DefineShape(fc.NewIdentifier(), New Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect)

'adding fill style and line style in the define shape 2 object
defineShape.Add(New SolidFill(New RGB(255,0,0)))

defineShape.Add(New SolidLine(50,New RGB(0,255,0)))

'Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape)

'Place the Rectangle Character on Display List
Dim placeObj As New PlaceObject2(defineShape.Id, 1)
'Translate the origin of newly placed object
placeObj.MatrixTransform = New MatrixTransform(2000, 2000)

'Add CONTROL TAG created above inside the flash container
fc.Add(placeObj)
'Show the next frame using CONTROL TAG and add it inside the

'flash container
fc.Add(New ShowFrame())
'Now write the flash container on disk to show its output
fc.Write("c:\out.swf")</code></example>
      <example>This example shows you how to use DefineShape.Add(LineStyle) method<code>[C#]

//Create a flash container and set frame size and frame rate
FlashContainer fc = new FlashContainer();
fc.FrameRate = 12.0f;
fc.FrameSize = new Rect(0, 0, 4000, 4000);

//Define fill styles array
//Add two colors RED and BLUE in fill styles array
ArrayList fillStyles = new ArrayList();
fillStyles.Add(new SolidFill(new RGB(255, 0, 0)));
fillStyles.Add(new SolidFill(new RGB(0, 255, 0)));

//Define line styles array
//Add two colors GREEN and YELLOW in line styles array
ArrayList lineStyles = new ArrayList();
lineStyles.Add(new SolidLine(10, new RGB(0, 0, 255)));
lineStyles.Add(new SolidLine(50, new RGB(255, 255, 0)));

//Define Style Change Record
StyleChangeRecord scr = new StyleChangeRecord(-1000, -1000);
scr.FillStyle = 1;  //Select RED
scr.LineStyle = 2;  //Select YELLOW

//add fill tyle and line style
scr.Add(new SolidFill(Color.FromName("Red")));
scr.Add(new SolidLine(50,Color.FromName("Green")));


//Define four edges of Rectangle
StraightEdgeRecord ser1 = new StraightEdgeRecord(2000, 0);
StraightEdgeRecord ser2 = new StraightEdgeRecord(0, 2000);
StraightEdgeRecord ser3 = new StraightEdgeRecord(-2000, 0);
StraightEdgeRecord ser4 = new StraightEdgeRecord(0, -2000);

//Put all the five shape records in a Aspose.Flash.Shapes.Shape
//object, this is just a collection that will hold shape records
//for DefineShape2 tag
Shape shapeRect = new Shape();
shapeRect.Add(scr);
shapeRect.Add(ser1);
shapeRect.Add(ser2);
shapeRect.Add(ser3);
shapeRect.Add(ser4);


//At this point we have all the things to create an instance of
//DefineShape2 class
DefineShape defineShape = new DefineShape(fc.NewIdentifier(),
new Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect);

//adding fill style and line style in the define shape 2 object
defineShape.Add(new SolidFill(new RGB(255,0,0)));

defineShape.Add(new  SolidLine(50,new RGB(0,255,0)));

//Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape);

//Place the Rectangle Character on Display List
PlaceObject2 placeObj = new PlaceObject2(defineShape.Id, 1);
//Translate the origin of newly placed object
placeObj.MatrixTransform = new MatrixTransform(2000, 2000);

//Add CONTROL TAG created above inside the flash container
fc.Add(placeObj);
//Show the next frame using CONTROL TAG and add it inside the

//flash container
fc.Add(new ShowFrame());
//Now write the flash container on disk to show its output
fc.Write("c:\\out.swf");</code></example>
    </member>
    <member name="M:Aspose.Flash.Shapes.DefineShape.Add(Aspose.Flash.Shapes.FillStyle)">
      <summary>
            Add a FillStyle object to the array of fill styles.
            </summary>
      <param name="fillStyle">FillStyle object.</param>
      <example>This example shows you how to use Add(FillStyle) method<code>[Visual Basic]

'Create a flash container and set frame size and frame rate
Dim fc As New FlashContainer()
fc.FrameRate = 12.0f
fc.FrameSize = New Rect(0, 0, 4000, 4000)

'Define fill styles array
'Add two colors RED and BLUE in fill styles array
Dim fillStyles As New ArrayList()
fillStyles.Add(New SolidFill(New RGB(255, 0, 0)))
fillStyles.Add(New SolidFill(New RGB(0, 255, 0)))

'Define line styles array
'Add two colors GREEN and YELLOW in line styles array
Dim lineStyles As New ArrayList()
lineStyles.Add(New SolidLine(10, New RGB(0, 0, 255)))
lineStyles.Add(New SolidLine(50, New RGB(255, 255, 0)))

'Define Style Change Record
Dim scr As New StyleChangeRecord(-1000, -1000)
scr.FillStyle = 1 'Select RED
scr.LineStyle = 2 'Select YELLOW

'add fill tyle and line style
scr.Add(New SolidFill(Color.FromName("Red")))
scr.Add(New SolidLine(50,Color.FromName("Green")))


'Define four edges of Rectangle
Dim ser1 As New StraightEdgeRecord(2000, 0)
Dim ser2 As New StraightEdgeRecord(0, 2000)
Dim ser3 As New StraightEdgeRecord(-2000, 0)
Dim ser4 As New StraightEdgeRecord(0, -2000)

'Put all the five shape records in a Aspose.Flash.Shapes.Shape
'object, this is just a collection that will hold shape records
'for DefineShape2 tag
Dim shapeRect As New Shape()
shapeRect.Add(scr)
shapeRect.Add(ser1)
shapeRect.Add(ser2)
shapeRect.Add(ser3)
shapeRect.Add(ser4)


'At this point we have all the things to create an instance of
'DefineShape2 class
Dim defineShape As New DefineShape(fc.NewIdentifier(), New Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect)

'adding fill style and line style in the define shape 2 object
defineShape.Add(New SolidFill(New RGB(255,0,0)))

defineShape.Add(New SolidLine(50,New RGB(0,255,0)))

'Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape)

'Place the Rectangle Character on Display List
Dim placeObj As New PlaceObject2(defineShape.Id, 1)
'Translate the origin of newly placed object
placeObj.MatrixTransform = New MatrixTransform(2000, 2000)

'Add CONTROL TAG created above inside the flash container
fc.Add(placeObj)
'Show the next frame using CONTROL TAG and add it inside the

'flash container
fc.Add(New ShowFrame())
'Now write the flash container on disk to show its output
fc.Write("c:\out.swf")</code></example>
      <example>This example shows you how to use DefineShape.Add(FillStyle) method<code>[C#]

//Create a flash container and set frame size and frame rate
FlashContainer fc = new FlashContainer();
fc.FrameRate = 12.0f;
fc.FrameSize = new Rect(0, 0, 4000, 4000);

//Define fill styles array
//Add two colors RED and BLUE in fill styles array
ArrayList fillStyles = new ArrayList();
fillStyles.Add(new SolidFill(new RGB(255, 0, 0)));
fillStyles.Add(new SolidFill(new RGB(0, 255, 0)));

//Define line styles array
//Add two colors GREEN and YELLOW in line styles array
ArrayList lineStyles = new ArrayList();
lineStyles.Add(new SolidLine(10, new RGB(0, 0, 255)));
lineStyles.Add(new SolidLine(50, new RGB(255, 255, 0)));

//Define Style Change Record
StyleChangeRecord scr = new StyleChangeRecord(-1000, -1000);
scr.FillStyle = 1;  //Select RED
scr.LineStyle = 2;  //Select YELLOW

//add fill tyle and line style
scr.Add(new SolidFill(Color.FromName("Red")));
scr.Add(new SolidLine(50,Color.FromName("Green")));


//Define four edges of Rectangle
StraightEdgeRecord ser1 = new StraightEdgeRecord(2000, 0);
StraightEdgeRecord ser2 = new StraightEdgeRecord(0, 2000);
StraightEdgeRecord ser3 = new StraightEdgeRecord(-2000, 0);
StraightEdgeRecord ser4 = new StraightEdgeRecord(0, -2000);

//Put all the five shape records in a Aspose.Flash.Shapes.Shape
//object, this is just a collection that will hold shape records
//for DefineShape2 tag
Shape shapeRect = new Shape();
shapeRect.Add(scr);
shapeRect.Add(ser1);
shapeRect.Add(ser2);
shapeRect.Add(ser3);
shapeRect.Add(ser4);


//At this point we have all the things to create an instance of
//DefineShape2 class
DefineShape defineShape = new DefineShape(fc.NewIdentifier(),
new Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect);

//adding fill style and line style in the define shape 2 object
defineShape.Add(new SolidFill(new RGB(255,0,0)));

defineShape.Add(new  SolidLine(50,new RGB(0,255,0)));

//Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape);

//Place the Rectangle Character on Display List
PlaceObject2 placeObj = new PlaceObject2(defineShape.Id, 1);
//Translate the origin of newly placed object
placeObj.MatrixTransform = new MatrixTransform(2000, 2000);

//Add CONTROL TAG created above inside the flash container
fc.Add(placeObj);
//Show the next frame using CONTROL TAG and add it inside the

//flash container
fc.Add(new ShowFrame());
//Now write the flash container on disk to show its output
fc.Write("c:\\out.swf");</code></example>
    </member>
    <member name="P:Aspose.Flash.Shapes.DefineShape.ShapeId">
      <summary>
            Returns or sets the Id of a shape.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Shapes.DefineShape.ShapeBounds">
      <summary>
            Returns or sets the rectangle which completely encloses the shape.
            Read/write <see cref="T:Aspose.Flash.Basic.Rect" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Shapes.DefineShape.FillStyles">
      <summary>
            Returns or sets the collection of fill styles.
            Read/write <see cref="T:System.Collections.ArrayList" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Shapes.DefineShape.LineStyles">
      <summary>
            Returns or sets the collection of line styles.
            Read/write <see cref="T:System.Collections.ArrayList" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Shapes.DefineShape.Shape">
      <summary>
            Returns or sets the shape information.
            Read/write <see cref="P:Aspose.Flash.Shapes.DefineShape.Shape" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Shapes.DefineShape2">
      <summary>
            Represents the shape for using in control objects like PlaceObject and
            extends DefineShape class by supporting more than 255 styles in the style
            list and multiple style lists in a single shape.
            </summary>
      <example>This example shows you how to use DefineShape2 class<code>[C#]

//Create a flash container and set frame size and frame rate
FlashContainer fc = new FlashContainer();
fc.FrameRate = 12.0f;
fc.FrameSize = new Rect(0, 0, 4000, 4000);

//Define fill styles array
//Add two colors RED and BLUE in fill styles array
ArrayList fillStyles = new ArrayList();
fillStyles.Add(new SolidFill(new RGB(255, 0, 0)));
fillStyles.Add(new SolidFill(new RGB(0, 255, 0)));

//Define line styles array
//Add two colors GREEN and YELLOW in line styles array
ArrayList lineStyles = new ArrayList();
lineStyles.Add(new SolidLine(10, new RGB(0, 0, 255)));
lineStyles.Add(new SolidLine(50, new RGB(255, 255, 0)));

//Define Style Change Record
StyleChangeRecord scr = new StyleChangeRecord(-1000, -1000);
scr.FillStyle = 1;  //Select RED
scr.LineStyle = 2;  //Select YELLOW

//add fill tyle and line style
scr.Add(new SolidFill(Color.FromName("Red")));
scr.Add(new SolidLine(50,Color.FromName("Green")));


//Define four edges of Rectangle
StraightEdgeRecord ser1 = new StraightEdgeRecord(2000, 0);
StraightEdgeRecord ser2 = new StraightEdgeRecord(0, 2000);
StraightEdgeRecord ser3 = new StraightEdgeRecord(-2000, 0);
StraightEdgeRecord ser4 = new StraightEdgeRecord(0, -2000);

//Put all the five shape records in a Aspose.Flash.Shapes.Shape
//object, this is just a collection that will hold shape records
//for DefineShape2 tag
Shape shapeRect = new Shape();
shapeRect.Add(scr);
shapeRect.Add(ser1);
shapeRect.Add(ser2);
shapeRect.Add(ser3);
shapeRect.Add(ser4);


//At this point we have all the things to create an instance of
//DefineShape2 class
DefineShape2 defineShape = new DefineShape2(fc.NewIdentifier(),
new Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect);

//Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape);

//Place the Rectangle Character on Display List
PlaceObject2 placeObj = new PlaceObject2(defineShape.Id, 1);
//Translate the origin of newly placed object
placeObj.MatrixTransform = new MatrixTransform(2000, 2000);

//Add CONTROL TAG created above inside the flash container
fc.Add(placeObj);
//Show the next frame using CONTROL TAG and add it inside the

//flash container
fc.Add(new ShowFrame());
//Now write the flash container on disk to show its output
fc.Write("c:\\out.swf");</code><code>[Visual Basic]

'Create a flash container and set frame size and frame rate
Dim fc As New FlashContainer()
fc.FrameRate = 12.0f
fc.FrameSize = New Rect(0, 0, 4000, 4000)

'Define fill styles array
'Add two colors RED and BLUE in fill styles array
Dim fillStyles As New ArrayList()
fillStyles.Add(New SolidFill(New RGB(255, 0, 0)))
fillStyles.Add(New SolidFill(New RGB(0, 255, 0)))

'Define line styles array
'Add two colors GREEN and YELLOW in line styles array
Dim lineStyles As New ArrayList()
lineStyles.Add(New SolidLine(10, New RGB(0, 0, 255)))
lineStyles.Add(New SolidLine(50, New RGB(255, 255, 0)))

'Define Style Change Record
Dim scr As New StyleChangeRecord(-1000, -1000)
scr.FillStyle = 1 'Select RED
scr.LineStyle = 2 'Select YELLOW

'add fill tyle and line style
scr.Add(New SolidFill(Color.FromName("Red")))
scr.Add(New SolidLine(50,Color.FromName("Green")))


'Define four edges of Rectangle
Dim ser1 As New StraightEdgeRecord(2000, 0)
Dim ser2 As New StraightEdgeRecord(0, 2000)
Dim ser3 As New StraightEdgeRecord(-2000, 0)
Dim ser4 As New StraightEdgeRecord(0, -2000)

'Put all the five shape records in a Aspose.Flash.Shapes.Shape
'object, this is just a collection that will hold shape records
'for DefineShape2 tag
Dim shapeRect As New Shape()
shapeRect.Add(scr)
shapeRect.Add(ser1)
shapeRect.Add(ser2)
shapeRect.Add(ser3)
shapeRect.Add(ser4)


'At this point we have all the things to create an instance of
'DefineShape2 class
Dim defineShape As New DefineShape2(fc.NewIdentifier(), New Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect)

'Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape)

'Place the Rectangle Character on Display List
Dim placeObj As New PlaceObject2(defineShape.Id, 1)
'Translate the origin of newly placed object
placeObj.MatrixTransform = New MatrixTransform(2000, 2000)

'Add CONTROL TAG created above inside the flash container
fc.Add(placeObj)
'Show the next frame using CONTROL TAG and add it inside the

'flash container
fc.Add(New ShowFrame())
'Now write the flash container on disk to show its output
fc.Write("c:\out.swf")</code></example>
    </member>
    <member name="M:Aspose.Flash.Shapes.DefineShape2.#ctor(System.Int32,Aspose.Flash.Basic.Rect,System.Collections.ArrayList,System.Collections.ArrayList,Aspose.Flash.Shapes.Shape)">
      <summary>
            Creates DefineShape2 with specified shape Id, bounds and shape styles.
            </summary>
      <param name="shapeID">Shape Id.</param>
      <param name="bounds">Shape bounds.</param>
      <param name="fillStyleArray">Collection of fill styles.</param>
      <param name="lineStyleArray">Collection of line styles.</param>
      <param name="shape">Shape information.</param>
      <example>This example shows you how to use DefineShape2 constructor<code>[C#]

//Create a flash container and set frame size and frame rate
FlashContainer fc = new FlashContainer();
fc.FrameRate = 12.0f;
fc.FrameSize = new Rect(0, 0, 4000, 4000);

//Define fill styles array
//Add two colors RED and BLUE in fill styles array
ArrayList fillStyles = new ArrayList();
fillStyles.Add(new SolidFill(new RGB(255, 0, 0)));
fillStyles.Add(new SolidFill(new RGB(0, 255, 0)));

//Define line styles array
//Add two colors GREEN and YELLOW in line styles array
ArrayList lineStyles = new ArrayList();
lineStyles.Add(new SolidLine(10, new RGB(0, 0, 255)));
lineStyles.Add(new SolidLine(50, new RGB(255, 255, 0)));

//Define Style Change Record
StyleChangeRecord scr = new StyleChangeRecord(-1000, -1000);
scr.FillStyle = 1;  //Select RED
scr.LineStyle = 2;  //Select YELLOW

//add fill tyle and line style
scr.Add(new SolidFill(Color.FromName("Red")));
scr.Add(new SolidLine(50,Color.FromName("Green")));


//Define four edges of Rectangle
StraightEdgeRecord ser1 = new StraightEdgeRecord(2000, 0);
StraightEdgeRecord ser2 = new StraightEdgeRecord(0, 2000);
StraightEdgeRecord ser3 = new StraightEdgeRecord(-2000, 0);
StraightEdgeRecord ser4 = new StraightEdgeRecord(0, -2000);

//Put all the five shape records in a Aspose.Flash.Shapes.Shape
//object, this is just a collection that will hold shape records
//for DefineShape2 tag
Shape shapeRect = new Shape();
shapeRect.Add(scr);
shapeRect.Add(ser1);
shapeRect.Add(ser2);
shapeRect.Add(ser3);
shapeRect.Add(ser4);


//At this point we have all the things to create an instance of
//DefineShape2 class
DefineShape2 defineShape = new DefineShape2(fc.NewIdentifier(),
new Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect);

//Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape);

//Place the Rectangle Character on Display List
PlaceObject2 placeObj = new PlaceObject2(defineShape.Id, 1);
//Translate the origin of newly placed object
placeObj.MatrixTransform = new MatrixTransform(2000, 2000);

//Add CONTROL TAG created above inside the flash container
fc.Add(placeObj);
//Show the next frame using CONTROL TAG and add it inside the

//flash container
fc.Add(new ShowFrame());
//Now write the flash container on disk to show its output
fc.Write("c:\\out.swf");</code><code>[Visual Basic]

'Create a flash container and set frame size and frame rate
Dim fc As New FlashContainer()
fc.FrameRate = 12.0f
fc.FrameSize = New Rect(0, 0, 4000, 4000)

'Define fill styles array
'Add two colors RED and BLUE in fill styles array
Dim fillStyles As New ArrayList()
fillStyles.Add(New SolidFill(New RGB(255, 0, 0)))
fillStyles.Add(New SolidFill(New RGB(0, 255, 0)))

'Define line styles array
'Add two colors GREEN and YELLOW in line styles array
Dim lineStyles As New ArrayList()
lineStyles.Add(New SolidLine(10, New RGB(0, 0, 255)))
lineStyles.Add(New SolidLine(50, New RGB(255, 255, 0)))

'Define Style Change Record
Dim scr As New StyleChangeRecord(-1000, -1000)
scr.FillStyle = 1 'Select RED
scr.LineStyle = 2 'Select YELLOW

'add fill tyle and line style
scr.Add(New SolidFill(Color.FromName("Red")))
scr.Add(New SolidLine(50,Color.FromName("Green")))


'Define four edges of Rectangle
Dim ser1 As New StraightEdgeRecord(2000, 0)
Dim ser2 As New StraightEdgeRecord(0, 2000)
Dim ser3 As New StraightEdgeRecord(-2000, 0)
Dim ser4 As New StraightEdgeRecord(0, -2000)

'Put all the five shape records in a Aspose.Flash.Shapes.Shape
'object, this is just a collection that will hold shape records
'for DefineShape2 tag
Dim shapeRect As New Shape()
shapeRect.Add(scr)
shapeRect.Add(ser1)
shapeRect.Add(ser2)
shapeRect.Add(ser3)
shapeRect.Add(ser4)


'At this point we have all the things to create an instance of
'DefineShape2 class
Dim defineShape As New DefineShape2(fc.NewIdentifier(), New Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect)

'Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape)

'Place the Rectangle Character on Display List
Dim placeObj As New PlaceObject2(defineShape.Id, 1)
'Translate the origin of newly placed object
placeObj.MatrixTransform = New MatrixTransform(2000, 2000)

'Add CONTROL TAG created above inside the flash container
fc.Add(placeObj)
'Show the next frame using CONTROL TAG and add it inside the

'flash container
fc.Add(New ShowFrame())
'Now write the flash container on disk to show its output
fc.Write("c:\out.swf")</code></example>
    </member>
    <member name="M:Aspose.Flash.Shapes.DefineShape2.Add(Aspose.Flash.Shapes.LineStyle)">
      <summary>
            Add a LineStyle object to the array of line styles.
            </summary>
      <param name="lineStyle">LineStyle object.</param>
      <example>This example shows you how to use DefineShape2.Add(LineStyle) method<code>[C#]

//Create a flash container and set frame size and frame rate
FlashContainer fc = new FlashContainer();
fc.FrameRate = 12.0f;
fc.FrameSize = new Rect(0, 0, 4000, 4000);

//Define fill styles array
//Add two colors RED and BLUE in fill styles array
ArrayList fillStyles = new ArrayList();
fillStyles.Add(new SolidFill(new RGB(255, 0, 0)));
fillStyles.Add(new SolidFill(new RGB(0, 255, 0)));

//Define line styles array
//Add two colors GREEN and YELLOW in line styles array
ArrayList lineStyles = new ArrayList();
lineStyles.Add(new SolidLine(10, new RGB(0, 0, 255)));
lineStyles.Add(new SolidLine(50, new RGB(255, 255, 0)));

//Define Style Change Record
StyleChangeRecord scr = new StyleChangeRecord(-1000, -1000);
scr.FillStyle = 1;  //Select RED
scr.LineStyle = 2;  //Select YELLOW

//add fill tyle and line style
scr.Add(new SolidFill(Color.FromName("Red")));
scr.Add(new SolidLine(50,Color.FromName("Green")));


//Define four edges of Rectangle
StraightEdgeRecord ser1 = new StraightEdgeRecord(2000, 0);
StraightEdgeRecord ser2 = new StraightEdgeRecord(0, 2000);
StraightEdgeRecord ser3 = new StraightEdgeRecord(-2000, 0);
StraightEdgeRecord ser4 = new StraightEdgeRecord(0, -2000);

//Put all the five shape records in a Aspose.Flash.Shapes.Shape
//object, this is just a collection that will hold shape records
//for DefineShape2 tag
Shape shapeRect = new Shape();
shapeRect.Add(scr);
shapeRect.Add(ser1);
shapeRect.Add(ser2);
shapeRect.Add(ser3);
shapeRect.Add(ser4);


//At this point we have all the things to create an instance of
//DefineShape2 class
DefineShape2 defineShape = new DefineShape2(fc.NewIdentifier(),
new Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect);

//adding fill style and line style in the define shape 2 object
defineShape.Add(new SolidFill(new RGB(255,0,0)));

defineShape.Add(new  SolidLine(50,new RGB(0,255,0)));

//Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape);

//Place the Rectangle Character on Display List
PlaceObject2 placeObj = new PlaceObject2(defineShape.Id, 1);
//Translate the origin of newly placed object
placeObj.MatrixTransform = new MatrixTransform(2000, 2000);

//Add CONTROL TAG created above inside the flash container
fc.Add(placeObj);
//Show the next frame using CONTROL TAG and add it inside the

//flash container
fc.Add(new ShowFrame());
//Now write the flash container on disk to show its output
fc.Write("c:\\out.swf");</code><code>[Visual Basic]

'Create a flash container and set frame size and frame rate
Dim fc As New FlashContainer()
fc.FrameRate = 12.0f
fc.FrameSize = New Rect(0, 0, 4000, 4000)

'Define fill styles array
'Add two colors RED and BLUE in fill styles array
Dim fillStyles As New ArrayList()
fillStyles.Add(New SolidFill(New RGB(255, 0, 0)))
fillStyles.Add(New SolidFill(New RGB(0, 255, 0)))

'Define line styles array
'Add two colors GREEN and YELLOW in line styles array
Dim lineStyles As New ArrayList()
lineStyles.Add(New SolidLine(10, New RGB(0, 0, 255)))
lineStyles.Add(New SolidLine(50, New RGB(255, 255, 0)))

'Define Style Change Record
Dim scr As New StyleChangeRecord(-1000, -1000)
scr.FillStyle = 1 'Select RED
scr.LineStyle = 2 'Select YELLOW

'add fill tyle and line style
scr.Add(New SolidFill(Color.FromName("Red")))
scr.Add(New SolidLine(50,Color.FromName("Green")))


'Define four edges of Rectangle
Dim ser1 As New StraightEdgeRecord(2000, 0)
Dim ser2 As New StraightEdgeRecord(0, 2000)
Dim ser3 As New StraightEdgeRecord(-2000, 0)
Dim ser4 As New StraightEdgeRecord(0, -2000)

'Put all the five shape records in a Aspose.Flash.Shapes.Shape
'object, this is just a collection that will hold shape records
'for DefineShape2 tag
Dim shapeRect As New Shape()
shapeRect.Add(scr)
shapeRect.Add(ser1)
shapeRect.Add(ser2)
shapeRect.Add(ser3)
shapeRect.Add(ser4)


'At this point we have all the things to create an instance of
'DefineShape2 class
Dim defineShape As New DefineShape2(fc.NewIdentifier(), New Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect)

'adding fill style and line style in the define shape 2 object
defineShape.Add(New SolidFill(New RGB(255,0,0)))

defineShape.Add(New SolidLine(50,New RGB(0,255,0)))

'Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape)

'Place the Rectangle Character on Display List
Dim placeObj As New PlaceObject2(defineShape.Id, 1)
'Translate the origin of newly placed object
placeObj.MatrixTransform = New MatrixTransform(2000, 2000)

'Add CONTROL TAG created above inside the flash container
fc.Add(placeObj)
'Show the next frame using CONTROL TAG and add it inside the

'flash container
fc.Add(New ShowFrame())
'Now write the flash container on disk to show its output
fc.Write("c:\out.swf")</code></example>
    </member>
    <member name="M:Aspose.Flash.Shapes.DefineShape2.Add(Aspose.Flash.Shapes.FillStyle)">
      <summary>
            Add a FillStyle object to the array of fill styles.
            </summary>
      <param name="fillStyle">FillStyle object.</param>
      <example>This example shows you how to use DefineShape2.Add(FillStyle) method<code>[C#]

//Create a flash container and set frame size and frame rate
FlashContainer fc = new FlashContainer();
fc.FrameRate = 12.0f;
fc.FrameSize = new Rect(0, 0, 4000, 4000);

//Define fill styles array
//Add two colors RED and BLUE in fill styles array
ArrayList fillStyles = new ArrayList();
fillStyles.Add(new SolidFill(new RGB(255, 0, 0)));
fillStyles.Add(new SolidFill(new RGB(0, 255, 0)));

//Define line styles array
//Add two colors GREEN and YELLOW in line styles array
ArrayList lineStyles = new ArrayList();
lineStyles.Add(new SolidLine(10, new RGB(0, 0, 255)));
lineStyles.Add(new SolidLine(50, new RGB(255, 255, 0)));

//Define Style Change Record
StyleChangeRecord scr = new StyleChangeRecord(-1000, -1000);
scr.FillStyle = 1;  //Select RED
scr.LineStyle = 2;  //Select YELLOW

//add fill tyle and line style
scr.Add(new SolidFill(Color.FromName("Red")));
scr.Add(new SolidLine(50,Color.FromName("Green")));


//Define four edges of Rectangle
StraightEdgeRecord ser1 = new StraightEdgeRecord(2000, 0);
StraightEdgeRecord ser2 = new StraightEdgeRecord(0, 2000);
StraightEdgeRecord ser3 = new StraightEdgeRecord(-2000, 0);
StraightEdgeRecord ser4 = new StraightEdgeRecord(0, -2000);

//Put all the five shape records in a Aspose.Flash.Shapes.Shape
//object, this is just a collection that will hold shape records
//for DefineShape2 tag
Shape shapeRect = new Shape();
shapeRect.Add(scr);
shapeRect.Add(ser1);
shapeRect.Add(ser2);
shapeRect.Add(ser3);
shapeRect.Add(ser4);


//At this point we have all the things to create an instance of
//DefineShape2 class
DefineShape2 defineShape = new DefineShape2(fc.NewIdentifier(),
new Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect);

//adding fill style and line style in the define shape 2 object
defineShape.Add(new SolidFill(new RGB(255,0,0)));

defineShape.Add(new  SolidLine(50,new RGB(0,255,0)));

//Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape);

//Place the Rectangle Character on Display List
PlaceObject2 placeObj = new PlaceObject2(defineShape.Id, 1);
//Translate the origin of newly placed object
placeObj.MatrixTransform = new MatrixTransform(2000, 2000);

//Add CONTROL TAG created above inside the flash container
fc.Add(placeObj);
//Show the next frame using CONTROL TAG and add it inside the

//flash container
fc.Add(new ShowFrame());
//Now write the flash container on disk to show its output
fc.Write("c:\\out.swf");</code><code>[Visual Basic]

'Create a flash container and set frame size and frame rate
Dim fc As New FlashContainer()
fc.FrameRate = 12.0f
fc.FrameSize = New Rect(0, 0, 4000, 4000)

'Define fill styles array
'Add two colors RED and BLUE in fill styles array
Dim fillStyles As New ArrayList()
fillStyles.Add(New SolidFill(New RGB(255, 0, 0)))
fillStyles.Add(New SolidFill(New RGB(0, 255, 0)))

'Define line styles array
'Add two colors GREEN and YELLOW in line styles array
Dim lineStyles As New ArrayList()
lineStyles.Add(New SolidLine(10, New RGB(0, 0, 255)))
lineStyles.Add(New SolidLine(50, New RGB(255, 255, 0)))

'Define Style Change Record
Dim scr As New StyleChangeRecord(-1000, -1000)
scr.FillStyle = 1 'Select RED
scr.LineStyle = 2 'Select YELLOW

'add fill tyle and line style
scr.Add(New SolidFill(Color.FromName("Red")))
scr.Add(New SolidLine(50,Color.FromName("Green")))


'Define four edges of Rectangle
Dim ser1 As New StraightEdgeRecord(2000, 0)
Dim ser2 As New StraightEdgeRecord(0, 2000)
Dim ser3 As New StraightEdgeRecord(-2000, 0)
Dim ser4 As New StraightEdgeRecord(0, -2000)

'Put all the five shape records in a Aspose.Flash.Shapes.Shape
'object, this is just a collection that will hold shape records
'for DefineShape2 tag
Dim shapeRect As New Shape()
shapeRect.Add(scr)
shapeRect.Add(ser1)
shapeRect.Add(ser2)
shapeRect.Add(ser3)
shapeRect.Add(ser4)


'At this point we have all the things to create an instance of
'DefineShape2 class
Dim defineShape As New DefineShape2(fc.NewIdentifier(), New Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect)

'adding fill style and line style in the define shape 2 object
defineShape.Add(New SolidFill(New RGB(255,0,0)))

defineShape.Add(New SolidLine(50,New RGB(0,255,0)))

'Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape)

'Place the Rectangle Character on Display List
Dim placeObj As New PlaceObject2(defineShape.Id, 1)
'Translate the origin of newly placed object
placeObj.MatrixTransform = New MatrixTransform(2000, 2000)

'Add CONTROL TAG created above inside the flash container
fc.Add(placeObj)
'Show the next frame using CONTROL TAG and add it inside the

'flash container
fc.Add(New ShowFrame())
'Now write the flash container on disk to show its output
fc.Write("c:\out.swf")</code></example>
    </member>
    <member name="P:Aspose.Flash.Shapes.DefineShape2.ShapeId">
      <summary>
            Returns or sets the Id of a shape.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Shapes.DefineShape2.ShapeBounds">
      <summary>
            Returns or sets the rectangle which completely encloses the shape.
            Read/write <see cref="T:Aspose.Flash.Basic.Rect" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Shapes.DefineShape2.FillStyles">
      <summary>
            Returns or sets the collection of fill styles.
            Read/write <see cref="T:System.Collections.ArrayList" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Shapes.DefineShape2.LineStyles">
      <summary>
            Returns or sets the collection of line styles.
            Read/write <see cref="T:System.Collections.ArrayList" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Shapes.DefineShape2.Shape">
      <summary>
            Returns or sets the shape information.
            Read/write <see cref="P:Aspose.Flash.Shapes.DefineShape2.Shape" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Shapes.DefineShape3">
      <summary>
            Represents the shape for using in control objects like PlaceObject and
            extends DefineShape2 class by supporting alpha transparency.
            </summary>
      <example>This example shows you how to use DefineShape3 class<code>[C#]

//Create a flash container and set frame size and frame rate
FlashContainer fc = new FlashContainer();
fc.FrameRate = 12.0f;
fc.FrameSize = new Rect(0, 0, 4000, 4000);

//Define fill styles array
//Add two colors RED and BLUE in fill styles array
ArrayList fillStyles = new ArrayList();
fillStyles.Add(new SolidFill(new RGB(255, 0, 0)));
fillStyles.Add(new SolidFill(new RGB(0, 255, 0)));

//Define line styles array
//Add two colors GREEN and YELLOW in line styles array
ArrayList lineStyles = new ArrayList();
lineStyles.Add(new SolidLine(10, new RGB(0, 0, 255)));
lineStyles.Add(new SolidLine(50, new RGB(255, 255, 0)));

//Define Style Change Record
StyleChangeRecord scr = new StyleChangeRecord(-1000, -1000);
scr.FillStyle = 1;  //Select RED
scr.LineStyle = 2;  //Select YELLOW

//add fill tyle and line style
scr.Add(new SolidFill(Color.FromName("Red")));
scr.Add(new SolidLine(50,Color.FromName("Green")));


//Define four edges of Rectangle
StraightEdgeRecord ser1 = new StraightEdgeRecord(2000, 0);
StraightEdgeRecord ser2 = new StraightEdgeRecord(0, 2000);
StraightEdgeRecord ser3 = new StraightEdgeRecord(-2000, 0);
StraightEdgeRecord ser4 = new StraightEdgeRecord(0, -2000);

//Put all the five shape records in a Aspose.Flash.Shapes.Shape
//object, this is just a collection that will hold shape records
//for DefineShape2 tag
Shape shapeRect = new Shape();
shapeRect.Add(scr);
shapeRect.Add(ser1);
shapeRect.Add(ser2);
shapeRect.Add(ser3);
shapeRect.Add(ser4);


//At this point we have all the things to create an instance of
//DefineShape3 class
DefineShape3 defineShape = new DefineShape3(fc.NewIdentifier(),
new Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect);

//adding fill style and line style in the define shape 3 object
defineShape.Add(new SolidFill(new RGB(255,0,0)));

defineShape.Add(new  SolidLine(50,new RGB(0,255,0)));

//Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape);

//Place the Rectangle Character on Display List
PlaceObject2 placeObj = new PlaceObject2(defineShape.Id, 1);
//Translate the origin of newly placed object
placeObj.MatrixTransform = new MatrixTransform(2000, 2000);

//Add CONTROL TAG created above inside the flash container
fc.Add(placeObj);
//Show the next frame using CONTROL TAG and add it inside the

//flash container
fc.Add(new ShowFrame());
//Now write the flash container on disk to show its output
fc.Write("c:\\out.swf");</code><code>[Visual Basic]

'Create a flash container and set frame size and frame rate
Dim fc As New FlashContainer()
fc.FrameRate = 12.0f
fc.FrameSize = New Rect(0, 0, 4000, 4000)

'Define fill styles array
'Add two colors RED and BLUE in fill styles array
Dim fillStyles As New ArrayList()
fillStyles.Add(New SolidFill(New RGB(255, 0, 0)))
fillStyles.Add(New SolidFill(New RGB(0, 255, 0)))

'Define line styles array
'Add two colors GREEN and YELLOW in line styles array
Dim lineStyles As New ArrayList()
lineStyles.Add(New SolidLine(10, New RGB(0, 0, 255)))
lineStyles.Add(New SolidLine(50, New RGB(255, 255, 0)))

'Define Style Change Record
Dim scr As New StyleChangeRecord(-1000, -1000)
scr.FillStyle = 1 'Select RED
scr.LineStyle = 2 'Select YELLOW

'add fill tyle and line style
scr.Add(New SolidFill(Color.FromName("Red")))
scr.Add(New SolidLine(50,Color.FromName("Green")))


'Define four edges of Rectangle
Dim ser1 As New StraightEdgeRecord(2000, 0)
Dim ser2 As New StraightEdgeRecord(0, 2000)
Dim ser3 As New StraightEdgeRecord(-2000, 0)
Dim ser4 As New StraightEdgeRecord(0, -2000)

'Put all the five shape records in a Aspose.Flash.Shapes.Shape
'object, this is just a collection that will hold shape records
'for DefineShape2 tag
Dim shapeRect As New Shape()
shapeRect.Add(scr)
shapeRect.Add(ser1)
shapeRect.Add(ser2)
shapeRect.Add(ser3)
shapeRect.Add(ser4)


'At this point we have all the things to create an instance of
'DefineShape3 class
Dim defineShape As New DefineShape3(fc.NewIdentifier(), New Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect)

'adding fill style and line style in the define shape 3 object
defineShape.Add(New SolidFill(New RGB(255,0,0)))

defineShape.Add(New SolidLine(50,New RGB(0,255,0)))

'Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape)

'Place the Rectangle Character on Display List
Dim placeObj As New PlaceObject2(defineShape.Id, 1)
'Translate the origin of newly placed object
placeObj.MatrixTransform = New MatrixTransform(2000, 2000)

'Add CONTROL TAG created above inside the flash container
fc.Add(placeObj)
'Show the next frame using CONTROL TAG and add it inside the

'flash container
fc.Add(New ShowFrame())
'Now write the flash container on disk to show its output
fc.Write("c:\out.swf")</code></example>
    </member>
    <member name="M:Aspose.Flash.Shapes.DefineShape3.#ctor(System.Int32,Aspose.Flash.Basic.Rect,System.Collections.ArrayList,System.Collections.ArrayList,Aspose.Flash.Shapes.Shape)">
      <summary>
            Creates DefineShape3 with specified shape Id, bounds and shape styles.
            </summary>
      <param name="shapeID">Shape Id.</param>
      <param name="bounds">Shape bounds.</param>
      <param name="fillStyleArray">Collection of fill styles.</param>
      <param name="lineStyleArray">Collection of line styles.</param>
      <param name="shape">Shape information.</param>
      <example>This example shows you how to use DefineShape3 constructor<code>[C#]

//Create a flash container and set frame size and frame rate
FlashContainer fc = new FlashContainer();
fc.FrameRate = 12.0f;
fc.FrameSize = new Rect(0, 0, 4000, 4000);

//Define fill styles array
//Add two colors RED and BLUE in fill styles array
ArrayList fillStyles = new ArrayList();
fillStyles.Add(new SolidFill(new RGB(255, 0, 0)));
fillStyles.Add(new SolidFill(new RGB(0, 255, 0)));

//Define line styles array
//Add two colors GREEN and YELLOW in line styles array
ArrayList lineStyles = new ArrayList();
lineStyles.Add(new SolidLine(10, new RGB(0, 0, 255)));
lineStyles.Add(new SolidLine(50, new RGB(255, 255, 0)));

//Define Style Change Record
StyleChangeRecord scr = new StyleChangeRecord(-1000, -1000);
scr.FillStyle = 1;  //Select RED
scr.LineStyle = 2;  //Select YELLOW

//add fill tyle and line style
scr.Add(new SolidFill(Color.FromName("Red")));
scr.Add(new SolidLine(50,Color.FromName("Green")));


//Define four edges of Rectangle
StraightEdgeRecord ser1 = new StraightEdgeRecord(2000, 0);
StraightEdgeRecord ser2 = new StraightEdgeRecord(0, 2000);
StraightEdgeRecord ser3 = new StraightEdgeRecord(-2000, 0);
StraightEdgeRecord ser4 = new StraightEdgeRecord(0, -2000);

//Put all the five shape records in a Aspose.Flash.Shapes.Shape
//object, this is just a collection that will hold shape records
//for DefineShape2 tag
Shape shapeRect = new Shape();
shapeRect.Add(scr);
shapeRect.Add(ser1);
shapeRect.Add(ser2);
shapeRect.Add(ser3);
shapeRect.Add(ser4);


//At this point we have all the things to create an instance of
//DefineShape3 class
DefineShape3 defineShape = new DefineShape3(fc.NewIdentifier(),
new Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect);

//adding fill style and line style in the define shape 3 object
defineShape.Add(new SolidFill(new RGB(255,0,0)));

defineShape.Add(new  SolidLine(50,new RGB(0,255,0)));

//Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape);

//Place the Rectangle Character on Display List
PlaceObject2 placeObj = new PlaceObject2(defineShape.Id, 1);
//Translate the origin of newly placed object
placeObj.MatrixTransform = new MatrixTransform(2000, 2000);

//Add CONTROL TAG created above inside the flash container
fc.Add(placeObj);
//Show the next frame using CONTROL TAG and add it inside the

//flash container
fc.Add(new ShowFrame());
//Now write the flash container on disk to show its output
fc.Write("c:\\out.swf");</code><code>[Visual Basic]

'Create a flash container and set frame size and frame rate
Dim fc As New FlashContainer()
fc.FrameRate = 12.0f
fc.FrameSize = New Rect(0, 0, 4000, 4000)

'Define fill styles array
'Add two colors RED and BLUE in fill styles array
Dim fillStyles As New ArrayList()
fillStyles.Add(New SolidFill(New RGB(255, 0, 0)))
fillStyles.Add(New SolidFill(New RGB(0, 255, 0)))

'Define line styles array
'Add two colors GREEN and YELLOW in line styles array
Dim lineStyles As New ArrayList()
lineStyles.Add(New SolidLine(10, New RGB(0, 0, 255)))
lineStyles.Add(New SolidLine(50, New RGB(255, 255, 0)))

'Define Style Change Record
Dim scr As New StyleChangeRecord(-1000, -1000)
scr.FillStyle = 1 'Select RED
scr.LineStyle = 2 'Select YELLOW

'add fill tyle and line style
scr.Add(New SolidFill(Color.FromName("Red")))
scr.Add(New SolidLine(50,Color.FromName("Green")))


'Define four edges of Rectangle
Dim ser1 As New StraightEdgeRecord(2000, 0)
Dim ser2 As New StraightEdgeRecord(0, 2000)
Dim ser3 As New StraightEdgeRecord(-2000, 0)
Dim ser4 As New StraightEdgeRecord(0, -2000)

'Put all the five shape records in a Aspose.Flash.Shapes.Shape
'object, this is just a collection that will hold shape records
'for DefineShape2 tag
Dim shapeRect As New Shape()
shapeRect.Add(scr)
shapeRect.Add(ser1)
shapeRect.Add(ser2)
shapeRect.Add(ser3)
shapeRect.Add(ser4)


'At this point we have all the things to create an instance of
'DefineShape3 class
Dim defineShape As New DefineShape3(fc.NewIdentifier(), New Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect)

'adding fill style and line style in the define shape 3 object
defineShape.Add(New SolidFill(New RGB(255,0,0)))

defineShape.Add(New SolidLine(50,New RGB(0,255,0)))

'Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape)

'Place the Rectangle Character on Display List
Dim placeObj As New PlaceObject2(defineShape.Id, 1)
'Translate the origin of newly placed object
placeObj.MatrixTransform = New MatrixTransform(2000, 2000)

'Add CONTROL TAG created above inside the flash container
fc.Add(placeObj)
'Show the next frame using CONTROL TAG and add it inside the

'flash container
fc.Add(New ShowFrame())
'Now write the flash container on disk to show its output
fc.Write("c:\out.swf")</code></example>
    </member>
    <member name="M:Aspose.Flash.Shapes.DefineShape3.Add(Aspose.Flash.Shapes.LineStyle)">
      <summary>
            Add a LineStyle object to the array of line styles.
            </summary>
      <param name="lineStyle">LineStyle object.</param>
      <example>This example shows you how to use DefineShape3.Add(LineStyle) method<code>[C#]

//Create a flash container and set frame size and frame rate
FlashContainer fc = new FlashContainer();
fc.FrameRate = 12.0f;
fc.FrameSize = new Rect(0, 0, 4000, 4000);

//Define fill styles array
//Add two colors RED and BLUE in fill styles array
ArrayList fillStyles = new ArrayList();
fillStyles.Add(new SolidFill(new RGB(255, 0, 0)));
fillStyles.Add(new SolidFill(new RGB(0, 255, 0)));

//Define line styles array
//Add two colors GREEN and YELLOW in line styles array
ArrayList lineStyles = new ArrayList();
lineStyles.Add(new SolidLine(10, new RGB(0, 0, 255)));
lineStyles.Add(new SolidLine(50, new RGB(255, 255, 0)));

//Define Style Change Record
StyleChangeRecord scr = new StyleChangeRecord(-1000, -1000);
scr.FillStyle = 1;  //Select RED
scr.LineStyle = 2;  //Select YELLOW

//add fill tyle and line style
scr.Add(new SolidFill(Color.FromName("Red")));
scr.Add(new SolidLine(50,Color.FromName("Green")));


//Define four edges of Rectangle
StraightEdgeRecord ser1 = new StraightEdgeRecord(2000, 0);
StraightEdgeRecord ser2 = new StraightEdgeRecord(0, 2000);
StraightEdgeRecord ser3 = new StraightEdgeRecord(-2000, 0);
StraightEdgeRecord ser4 = new StraightEdgeRecord(0, -2000);

//Put all the five shape records in a Aspose.Flash.Shapes.Shape
//object, this is just a collection that will hold shape records
//for DefineShape2 tag
Shape shapeRect = new Shape();
shapeRect.Add(scr);
shapeRect.Add(ser1);
shapeRect.Add(ser2);
shapeRect.Add(ser3);
shapeRect.Add(ser4);


//At this point we have all the things to create an instance of
//DefineShape3 class
DefineShape3 defineShape = new DefineShape3(fc.NewIdentifier(),
new Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect);

//adding fill style and line style in the define shape 3 object
defineShape.Add(new SolidFill(new RGB(255,0,0)));

defineShape.Add(new  SolidLine(50,new RGB(0,255,0)));

//Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape);

//Place the Rectangle Character on Display List
PlaceObject2 placeObj = new PlaceObject2(defineShape.Id, 1);
//Translate the origin of newly placed object
placeObj.MatrixTransform = new MatrixTransform(2000, 2000);

//Add CONTROL TAG created above inside the flash container
fc.Add(placeObj);
//Show the next frame using CONTROL TAG and add it inside the

//flash container
fc.Add(new ShowFrame());
//Now write the flash container on disk to show its output
fc.Write("c:\\out.swf");</code><code>[Visual Basic]

'Create a flash container and set frame size and frame rate
Dim fc As New FlashContainer()
fc.FrameRate = 12.0f
fc.FrameSize = New Rect(0, 0, 4000, 4000)

'Define fill styles array
'Add two colors RED and BLUE in fill styles array
Dim fillStyles As New ArrayList()
fillStyles.Add(New SolidFill(New RGB(255, 0, 0)))
fillStyles.Add(New SolidFill(New RGB(0, 255, 0)))

'Define line styles array
'Add two colors GREEN and YELLOW in line styles array
Dim lineStyles As New ArrayList()
lineStyles.Add(New SolidLine(10, New RGB(0, 0, 255)))
lineStyles.Add(New SolidLine(50, New RGB(255, 255, 0)))

'Define Style Change Record
Dim scr As New StyleChangeRecord(-1000, -1000)
scr.FillStyle = 1 'Select RED
scr.LineStyle = 2 'Select YELLOW

'add fill tyle and line style
scr.Add(New SolidFill(Color.FromName("Red")))
scr.Add(New SolidLine(50,Color.FromName("Green")))


'Define four edges of Rectangle
Dim ser1 As New StraightEdgeRecord(2000, 0)
Dim ser2 As New StraightEdgeRecord(0, 2000)
Dim ser3 As New StraightEdgeRecord(-2000, 0)
Dim ser4 As New StraightEdgeRecord(0, -2000)

'Put all the five shape records in a Aspose.Flash.Shapes.Shape
'object, this is just a collection that will hold shape records
'for DefineShape2 tag
Dim shapeRect As New Shape()
shapeRect.Add(scr)
shapeRect.Add(ser1)
shapeRect.Add(ser2)
shapeRect.Add(ser3)
shapeRect.Add(ser4)


'At this point we have all the things to create an instance of
'DefineShape3 class
Dim defineShape As New DefineShape3(fc.NewIdentifier(), New Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect)

'adding fill style and line style in the define shape 3 object
defineShape.Add(New SolidFill(New RGB(255,0,0)))

defineShape.Add(New SolidLine(50,New RGB(0,255,0)))

'Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape)

'Place the Rectangle Character on Display List
Dim placeObj As New PlaceObject2(defineShape.Id, 1)
'Translate the origin of newly placed object
placeObj.MatrixTransform = New MatrixTransform(2000, 2000)

'Add CONTROL TAG created above inside the flash container
fc.Add(placeObj)
'Show the next frame using CONTROL TAG and add it inside the

'flash container
fc.Add(New ShowFrame())
'Now write the flash container on disk to show its output
fc.Write("c:\out.swf")</code></example>
    </member>
    <member name="M:Aspose.Flash.Shapes.DefineShape3.Add(Aspose.Flash.Shapes.FillStyle)">
      <summary>
            Add a FillStyle object to the array of fill styles.
            </summary>
      <param name="fillStyle">FillStyle object.</param>
      <example>This example shows you how to use DefineShape3.Add(FillStyle) method<code>[C#]

//Create a flash container and set frame size and frame rate
FlashContainer fc = new FlashContainer();
fc.FrameRate = 12.0f;
fc.FrameSize = new Rect(0, 0, 4000, 4000);

//Define fill styles array
//Add two colors RED and BLUE in fill styles array
ArrayList fillStyles = new ArrayList();
fillStyles.Add(new SolidFill(new RGB(255, 0, 0)));
fillStyles.Add(new SolidFill(new RGB(0, 255, 0)));

//Define line styles array
//Add two colors GREEN and YELLOW in line styles array
ArrayList lineStyles = new ArrayList();
lineStyles.Add(new SolidLine(10, new RGB(0, 0, 255)));
lineStyles.Add(new SolidLine(50, new RGB(255, 255, 0)));

//Define Style Change Record
StyleChangeRecord scr = new StyleChangeRecord(-1000, -1000);
scr.FillStyle = 1;  //Select RED
scr.LineStyle = 2;  //Select YELLOW

//add fill tyle and line style
scr.Add(new SolidFill(Color.FromName("Red")));
scr.Add(new SolidLine(50,Color.FromName("Green")));


//Define four edges of Rectangle
StraightEdgeRecord ser1 = new StraightEdgeRecord(2000, 0);
StraightEdgeRecord ser2 = new StraightEdgeRecord(0, 2000);
StraightEdgeRecord ser3 = new StraightEdgeRecord(-2000, 0);
StraightEdgeRecord ser4 = new StraightEdgeRecord(0, -2000);

//Put all the five shape records in a Aspose.Flash.Shapes.Shape
//object, this is just a collection that will hold shape records
//for DefineShape2 tag
Shape shapeRect = new Shape();
shapeRect.Add(scr);
shapeRect.Add(ser1);
shapeRect.Add(ser2);
shapeRect.Add(ser3);
shapeRect.Add(ser4);


//At this point we have all the things to create an instance of
//DefineShape3 class
DefineShape3 defineShape = new DefineShape3(fc.NewIdentifier(),
new Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect);

//adding fill style and line style in the define shape 3 object
defineShape.Add(new SolidFill(new RGB(255,0,0)));

defineShape.Add(new  SolidLine(50,new RGB(0,255,0)));

//Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape);

//Place the Rectangle Character on Display List
PlaceObject2 placeObj = new PlaceObject2(defineShape.Id, 1);
//Translate the origin of newly placed object
placeObj.MatrixTransform = new MatrixTransform(2000, 2000);

//Add CONTROL TAG created above inside the flash container
fc.Add(placeObj);
//Show the next frame using CONTROL TAG and add it inside the

//flash container
fc.Add(new ShowFrame());
//Now write the flash container on disk to show its output
fc.Write("c:\\out.swf");</code><code>[Visual Basic]

'Create a flash container and set frame size and frame rate
Dim fc As New FlashContainer()
fc.FrameRate = 12.0f
fc.FrameSize = New Rect(0, 0, 4000, 4000)

'Define fill styles array
'Add two colors RED and BLUE in fill styles array
Dim fillStyles As New ArrayList()
fillStyles.Add(New SolidFill(New RGB(255, 0, 0)))
fillStyles.Add(New SolidFill(New RGB(0, 255, 0)))

'Define line styles array
'Add two colors GREEN and YELLOW in line styles array
Dim lineStyles As New ArrayList()
lineStyles.Add(New SolidLine(10, New RGB(0, 0, 255)))
lineStyles.Add(New SolidLine(50, New RGB(255, 255, 0)))

'Define Style Change Record
Dim scr As New StyleChangeRecord(-1000, -1000)
scr.FillStyle = 1 'Select RED
scr.LineStyle = 2 'Select YELLOW

'add fill tyle and line style
scr.Add(New SolidFill(Color.FromName("Red")))
scr.Add(New SolidLine(50,Color.FromName("Green")))


'Define four edges of Rectangle
Dim ser1 As New StraightEdgeRecord(2000, 0)
Dim ser2 As New StraightEdgeRecord(0, 2000)
Dim ser3 As New StraightEdgeRecord(-2000, 0)
Dim ser4 As New StraightEdgeRecord(0, -2000)

'Put all the five shape records in a Aspose.Flash.Shapes.Shape
'object, this is just a collection that will hold shape records
'for DefineShape2 tag
Dim shapeRect As New Shape()
shapeRect.Add(scr)
shapeRect.Add(ser1)
shapeRect.Add(ser2)
shapeRect.Add(ser3)
shapeRect.Add(ser4)


'At this point we have all the things to create an instance of
'DefineShape3 class
Dim defineShape As New DefineShape3(fc.NewIdentifier(), New Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect)

'adding fill style and line style in the define shape 3 object
defineShape.Add(New SolidFill(New RGB(255,0,0)))

defineShape.Add(New SolidLine(50,New RGB(0,255,0)))

'Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape)

'Place the Rectangle Character on Display List
Dim placeObj As New PlaceObject2(defineShape.Id, 1)
'Translate the origin of newly placed object
placeObj.MatrixTransform = New MatrixTransform(2000, 2000)

'Add CONTROL TAG created above inside the flash container
fc.Add(placeObj)
'Show the next frame using CONTROL TAG and add it inside the

'flash container
fc.Add(New ShowFrame())
'Now write the flash container on disk to show its output
fc.Write("c:\out.swf")</code></example>
    </member>
    <member name="P:Aspose.Flash.Shapes.DefineShape3.ShapeId">
      <summary>
            Returns or sets the Id of a shape.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Shapes.DefineShape3.ShapeBounds">
      <summary>
            Returns or sets the rectangle which completely encloses the shape.
            Read/write <see cref="T:Aspose.Flash.Basic.Rect" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Shapes.DefineShape3.FillStyles">
      <summary>
            Returns or sets the collection of fill styles.
            Read/write <see cref="T:System.Collections.ArrayList" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Shapes.DefineShape3.LineStyles">
      <summary>
            Returns or sets the collection of line styles.
            Read/write <see cref="T:System.Collections.ArrayList" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Shapes.DefineShape3.Shape">
      <summary>
            Returns or sets the shape information.
            Read/write <see cref="P:Aspose.Flash.Shapes.DefineShape3.Shape" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Shapes.DefineShape4">
      <summary>
            DefineShape4 extends the capabilities of DefineShape3 by using a new line style record in the
            shape. DefineShape4 specifies not only the shape bounds but also the edge bounds of the shape.
            The EdgeBounds field assists Flash Player in accurately determining certain layouts.
            In addition, DefineShape4 includes new hinting flags UsesNonScalingStrokes and
            UsesScalingStrokes. These flags assist Flash Player in creating the best possible area for
            invalidation.
            </summary>
      <example>This example shows you how to use DefineShape4 class<code>[C#]

//Create a flash container and set frame size and frame rate
FlashContainer fc = new FlashContainer();
fc.FrameRate = 12.0f;
fc.FrameSize = new Rect(0, 0, 4000, 4000);

//Define fill styles array
//Add two colors RED and BLUE in fill styles array
ArrayList fillStyles = new ArrayList();
fillStyles.Add(new SolidFill(new RGB(255, 0, 0)));
fillStyles.Add(new SolidFill(new RGB(0, 255, 0)));

//Define line styles array
//Add two colors GREEN and YELLOW in line styles array
ArrayList lineStyles = new ArrayList();
lineStyles.Add(new SolidLine(10, new RGB(0, 0, 255)));
lineStyles.Add(new SolidLine(50, new RGB(255, 255, 0)));

//Define Style Change Record
StyleChangeRecord scr = new StyleChangeRecord(-1000, -1000);
scr.FillStyle = 1;  //Select RED
scr.LineStyle = 2;  //Select YELLOW

//add fill tyle and line style
scr.Add(new SolidFill(Color.FromName("Red")));
scr.Add(new SolidLine(50, Color.FromName("Green")));


//Define four edges of Rectangle
StraightEdgeRecord ser1 = new StraightEdgeRecord(2000, 0);
StraightEdgeRecord ser2 = new StraightEdgeRecord(0, 2000);
StraightEdgeRecord ser3 = new StraightEdgeRecord(-2000, 0);
StraightEdgeRecord ser4 = new StraightEdgeRecord(0, -2000);

//Put all the five shape records in a Aspose.Flash.Shapes.Shape
//object, this is just a collection that will hold shape records
//for DefineShape2 tag
Shape shapeRect = new Shape();
shapeRect.Add(scr);
shapeRect.Add(ser1);
shapeRect.Add(ser2);
shapeRect.Add(ser3);
shapeRect.Add(ser4);


//At this point we have all the things to create an instance of
//DefineShape4 class
DefineShape4 defineShape = new DefineShape4();

//(fc.NewIdentifier(),
//new Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect);

defineShape.Id = fc.NewIdentifier();
defineShape.EdgeBounds = new Rect(-1500, -1500, 1500, 1500);
defineShape.FillStyles = fillStyles;
defineShape.LineStyles = lineStyles;
defineShape.Shape = shapeRect;

//Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape);

//Place the Rectangle Character on Display List
PlaceObject2 placeObj = new PlaceObject2(defineShape.Id, 1);
//Translate the origin of newly placed object
placeObj.MatrixTransform = new MatrixTransform(2000, 2000);

//Add CONTROL TAG created above inside the flash container
fc.Add(placeObj);
//Show the next frame using CONTROL TAG and add it inside the

//flash container
fc.Add(new ShowFrame());
//Now write the flash container on disk to show its output
fc.Write("c:\\out.swf");</code><code>[Visual Basic]

'Create a flash container and set frame size and frame rate
Dim fc As New FlashContainer()
fc.FrameRate = 12.0f
fc.FrameSize = New Rect(0, 0, 4000, 4000)

'Define fill styles array
'Add two colors RED and BLUE in fill styles array
Dim fillStyles As New ArrayList()
fillStyles.Add(New SolidFill(New RGB(255, 0, 0)))
fillStyles.Add(New SolidFill(New RGB(0, 255, 0)))

'Define line styles array
'Add two colors GREEN and YELLOW in line styles array
Dim lineStyles As New ArrayList()
lineStyles.Add(New SolidLine(10, New RGB(0, 0, 255)))
lineStyles.Add(New SolidLine(50, New RGB(255, 255, 0)))

'Define Style Change Record
Dim scr As New StyleChangeRecord(-1000, -1000)
scr.FillStyle = 1 'Select RED
scr.LineStyle = 2 'Select YELLOW

'add fill tyle and line style
scr.Add(New SolidFill(Color.FromName("Red")))
scr.Add(New SolidLine(50, Color.FromName("Green")))


'Define four edges of Rectangle
Dim ser1 As New StraightEdgeRecord(2000, 0)
Dim ser2 As New StraightEdgeRecord(0, 2000)
Dim ser3 As New StraightEdgeRecord(-2000, 0)
Dim ser4 As New StraightEdgeRecord(0, -2000)

'Put all the five shape records in a Aspose.Flash.Shapes.Shape
'object, this is just a collection that will hold shape records
'for DefineShape2 tag
Dim shapeRect As New Shape()
shapeRect.Add(scr)
shapeRect.Add(ser1)
shapeRect.Add(ser2)
shapeRect.Add(ser3)
shapeRect.Add(ser4)


'At this point we have all the things to create an instance of
'DefineShape4 class
Dim defineShape As New DefineShape4()

'(fc.NewIdentifier(),
'new Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect);

defineShape.Id = fc.NewIdentifier()
defineShape.EdgeBounds = New Rect(-1500, -1500, 1500, 1500)
defineShape.FillStyles = fillStyles
defineShape.LineStyles = lineStyles
defineShape.Shape = shapeRect

'Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape)

'Place the Rectangle Character on Display List
Dim placeObj As New PlaceObject2(defineShape.Id, 1)
'Translate the origin of newly placed object
placeObj.MatrixTransform = New MatrixTransform(2000, 2000)

'Add CONTROL TAG created above inside the flash container
fc.Add(placeObj)
'Show the next frame using CONTROL TAG and add it inside the

'flash container
fc.Add(New ShowFrame())
'Now write the flash container on disk to show its output
fc.Write("c:\out.swf")</code></example>
    </member>
    <member name="M:Aspose.Flash.Shapes.DefineShape4.#ctor">
      <summary>
            Default constructor.
            </summary>
      <example>This example shows you how to use DefineShape4 constructor<code>[C#]

//Create a flash container and set frame size and frame rate
FlashContainer fc = new FlashContainer();
fc.FrameRate = 12.0f;
fc.FrameSize = new Rect(0, 0, 4000, 4000);

//Define fill styles array
//Add two colors RED and BLUE in fill styles array
ArrayList fillStyles = new ArrayList();
fillStyles.Add(new SolidFill(new RGB(255, 0, 0)));
fillStyles.Add(new SolidFill(new RGB(0, 255, 0)));

//Define line styles array
//Add two colors GREEN and YELLOW in line styles array
ArrayList lineStyles = new ArrayList();
lineStyles.Add(new SolidLine(10, new RGB(0, 0, 255)));
lineStyles.Add(new SolidLine(50, new RGB(255, 255, 0)));

//Define Style Change Record
StyleChangeRecord scr = new StyleChangeRecord(-1000, -1000);
scr.FillStyle = 1;  //Select RED
scr.LineStyle = 2;  //Select YELLOW

//add fill tyle and line style
scr.Add(new SolidFill(Color.FromName("Red")));
scr.Add(new SolidLine(50, Color.FromName("Green")));


//Define four edges of Rectangle
StraightEdgeRecord ser1 = new StraightEdgeRecord(2000, 0);
StraightEdgeRecord ser2 = new StraightEdgeRecord(0, 2000);
StraightEdgeRecord ser3 = new StraightEdgeRecord(-2000, 0);
StraightEdgeRecord ser4 = new StraightEdgeRecord(0, -2000);

//Put all the five shape records in a Aspose.Flash.Shapes.Shape
//object, this is just a collection that will hold shape records
//for DefineShape2 tag
Shape shapeRect = new Shape();
shapeRect.Add(scr);
shapeRect.Add(ser1);
shapeRect.Add(ser2);
shapeRect.Add(ser3);
shapeRect.Add(ser4);


//At this point we have all the things to create an instance of
//DefineShape4 class
DefineShape4 defineShape = new DefineShape4();

//(fc.NewIdentifier(),
//new Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect);

defineShape.Id = fc.NewIdentifier();
defineShape.EdgeBounds = new Rect(-1500, -1500, 1500, 1500);
defineShape.FillStyles = fillStyles;
defineShape.LineStyles = lineStyles;
defineShape.Shape = shapeRect;

//Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape);

//Place the Rectangle Character on Display List
PlaceObject2 placeObj = new PlaceObject2(defineShape.Id, 1);
//Translate the origin of newly placed object
placeObj.MatrixTransform = new MatrixTransform(2000, 2000);

//Add CONTROL TAG created above inside the flash container
fc.Add(placeObj);
//Show the next frame using CONTROL TAG and add it inside the

//flash container
fc.Add(new ShowFrame());
//Now write the flash container on disk to show its output
fc.Write("c:\\out.swf");</code><code>[Visual Basic]

'Create a flash container and set frame size and frame rate
Dim fc As New FlashContainer()
fc.FrameRate = 12.0f
fc.FrameSize = New Rect(0, 0, 4000, 4000)

'Define fill styles array
'Add two colors RED and BLUE in fill styles array
Dim fillStyles As New ArrayList()
fillStyles.Add(New SolidFill(New RGB(255, 0, 0)))
fillStyles.Add(New SolidFill(New RGB(0, 255, 0)))

'Define line styles array
'Add two colors GREEN and YELLOW in line styles array
Dim lineStyles As New ArrayList()
lineStyles.Add(New SolidLine(10, New RGB(0, 0, 255)))
lineStyles.Add(New SolidLine(50, New RGB(255, 255, 0)))

'Define Style Change Record
Dim scr As New StyleChangeRecord(-1000, -1000)
scr.FillStyle = 1 'Select RED
scr.LineStyle = 2 'Select YELLOW

'add fill tyle and line style
scr.Add(New SolidFill(Color.FromName("Red")))
scr.Add(New SolidLine(50, Color.FromName("Green")))


'Define four edges of Rectangle
Dim ser1 As New StraightEdgeRecord(2000, 0)
Dim ser2 As New StraightEdgeRecord(0, 2000)
Dim ser3 As New StraightEdgeRecord(-2000, 0)
Dim ser4 As New StraightEdgeRecord(0, -2000)

'Put all the five shape records in a Aspose.Flash.Shapes.Shape
'object, this is just a collection that will hold shape records
'for DefineShape2 tag
Dim shapeRect As New Shape()
shapeRect.Add(scr)
shapeRect.Add(ser1)
shapeRect.Add(ser2)
shapeRect.Add(ser3)
shapeRect.Add(ser4)


'At this point we have all the things to create an instance of
'DefineShape4 class
Dim defineShape As New DefineShape4()

'(fc.NewIdentifier(),
'new Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect);

defineShape.Id = fc.NewIdentifier()
defineShape.EdgeBounds = New Rect(-1500, -1500, 1500, 1500)
defineShape.FillStyles = fillStyles
defineShape.LineStyles = lineStyles
defineShape.Shape = shapeRect

'Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape)

'Place the Rectangle Character on Display List
Dim placeObj As New PlaceObject2(defineShape.Id, 1)
'Translate the origin of newly placed object
placeObj.MatrixTransform = New MatrixTransform(2000, 2000)

'Add CONTROL TAG created above inside the flash container
fc.Add(placeObj)
'Show the next frame using CONTROL TAG and add it inside the

'flash container
fc.Add(New ShowFrame())
'Now write the flash container on disk to show its output
fc.Write("c:\out.swf")</code></example>
    </member>
    <member name="P:Aspose.Flash.Shapes.DefineShape4.ShapeId">
      <summary>
            Returns or sets the Id of a shape.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Shapes.DefineShape4.ShapeBounds">
      <summary>
            Bounds of the shape
            </summary>
    </member>
    <member name="P:Aspose.Flash.Shapes.DefineShape4.EdgeBounds">
      <summary>
            Bounds of the shape, excluding strokes.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Shapes.DefineShape4.UserNonScalingStrokes">
      <summary>
            If 1, the shape contains at least one non-scaling stroke.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Shapes.DefineShape4.UserScalingStrokes">
      <summary>
            If 1, the shape contains at least one scaling stroke.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Shapes.DefineShape4.FillStyles">
      <summary>
            Array of fill styles.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Shapes.DefineShape4.LineStyles">
      <summary>
            Array of line styles.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Shapes.DefineShape4.Shape">
      <summary>
            Shape
            </summary>
    </member>
    <member name="T:Aspose.Flash.Shapes.FillStyleType">
      <summary>
            Represents fill styles which can be used in flash movie.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Shapes.FillStyleType.SolidFill">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Flash.Shapes.FillStyleType.LinearGradientFill">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Flash.Shapes.FillStyleType.RadialGradientFill">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Flash.Shapes.FillStyleType.FocalRadialGradientFill">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Flash.Shapes.FillStyleType.RepeatingBitmapFill">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Flash.Shapes.FillStyleType.ClippedBitmapFill">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Flash.Shapes.FillStyleType.NonSmoothedRepeatingBitmap">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Flash.Shapes.FillStyleType.NonSmoothedClippedBitmap">
      <summary>
      </summary>
    </member>
    <member name="T:Aspose.Flash.Shapes.FocalGradientFill">
      <summary>
            Represents the focal gradient fill style.
            </summary>
      <example>This example shows you how to use FocalGradientFill class<code>[C#]

ShapeManager sm = new ShapeManager();
DefineSprite m = new DefineSprite(c.NewIdentifier());

//adding line styles to linestyles list
int i = sm.LineStyles.Add(new SolidLine(10, new RGB(0, 0, 0)));

//select a line style from srray of line styles
sm.SelectLineStyle(i);

MatrixTransform mt = new MatrixTransform();
mt.Scale(50,50);

//array list for gradients
ArrayList list = new ArrayList();
list.Add(new GradientRecord(10,new RGB(100,20,20)));
list.Add(new GradientRecord(20,new RGB(0,255,0)));
list.Add(new GradientRecord(50,new RGB(0,0,255)));


//use focal gradient fill
FocalGradientFill fgf = new FocalGradientFill();
fgf.FocalPoint = 100;
fgf.Gradients = list;
fgf.MatrixTransform = mt;
//add a gradient record
fgf.Add(new GradientRecord(20, new RGB(0, 255, 0)));

sm.Add(fgf);

//draw rounded rectangle
sm.DrawRoundedRectangle(2000, 2000, 4000, 4000, 50);


//define shape using GetDefineShape method
DefineShape3 ds = sm.GetDefineShape3(c.NewIdentifier());
c.Add(ds);


PlaceObject2 po = new PlaceObject2(ds.ShapeId, 1);
po.CharacterType = PlaceType.New;
m.Add(po);</code><code>[Visual Basic]

Dim sm As New ShapeManager()
Dim m As New DefineSprite(c.NewIdentifier())

'adding line styles to linestyles list
Dim i As Integer = sm.LineStyles.Add(New SolidLine(10, New RGB(0, 0, 0)))

'select a line style from srray of line styles
sm.SelectLineStyle(i)

Dim mt As New MatrixTransform()
mt.Scale(50,50)

'array list for gradients
Dim list As New ArrayList()
list.Add(New GradientRecord(10,New RGB(100,20,20)))
list.Add(New GradientRecord(20,New RGB(0,255,0)))
list.Add(New GradientRecord(50,New RGB(0,0,255)))


'use focal gradient fill
Dim fgf As New FocalGradientFill()
fgf.FocalPoint = 100
fgf.Gradients = list
fgf.MatrixTransform = mt
'add a gradient record
fgf.Add(New GradientRecord(20, New RGB(0, 255, 0)))

sm.Add(fgf)

'draw rounded rectangle
sm.DrawRoundedRectangle(2000, 2000, 4000, 4000, 50)


'define shape using GetDefineShape method
Dim ds As DefineShape3 = sm.GetDefineShape3(c.NewIdentifier())
c.Add(ds)


Dim po As New PlaceObject2(ds.ShapeId, 1)
po.CharacterType = PlaceType.New
m.Add(po)</code></example>
    </member>
    <member name="M:Aspose.Flash.Shapes.FocalGradientFill.#ctor">
      <summary>
            Default constructor.
            </summary>
      <example>This example shows you how to use FocalGradientFill constructor<code>[C#]

ShapeManager sm = new ShapeManager();
DefineSprite m = new DefineSprite(c.NewIdentifier());

//adding line styles to linestyles list
int i = sm.LineStyles.Add(new SolidLine(10, new RGB(0, 0, 0)));

//select a line style from srray of line styles
sm.SelectLineStyle(i);

MatrixTransform mt = new MatrixTransform();
mt.Scale(50,50);

//array list for gradients
ArrayList list = new ArrayList();
list.Add(new GradientRecord(10,new RGB(100,20,20)));
list.Add(new GradientRecord(20,new RGB(0,255,0)));
list.Add(new GradientRecord(50,new RGB(0,0,255)));


//use focal gradient fill
FocalGradientFill fgf = new FocalGradientFill();
fgf.FocalPoint = 100;
fgf.Gradients = list;
fgf.MatrixTransform = mt;
//add a gradient record
fgf.Add(new GradientRecord(20, new RGB(0, 255, 0)));

sm.Add(fgf);

//draw rounded rectangle
sm.DrawRoundedRectangle(2000, 2000, 4000, 4000, 50);


//define shape using GetDefineShape method
DefineShape3 ds = sm.GetDefineShape3(c.NewIdentifier());
c.Add(ds);


PlaceObject2 po = new PlaceObject2(ds.ShapeId, 1);
po.CharacterType = PlaceType.New;
m.Add(po);</code><code>[Visual Basic]

Dim sm As New ShapeManager()
Dim m As New DefineSprite(c.NewIdentifier())

'adding line styles to linestyles list
Dim i As Integer = sm.LineStyles.Add(New SolidLine(10, New RGB(0, 0, 0)))

'select a line style from srray of line styles
sm.SelectLineStyle(i)

Dim mt As New MatrixTransform()
mt.Scale(50,50)

'array list for gradients
Dim list As New ArrayList()
list.Add(New GradientRecord(10,New RGB(100,20,20)))
list.Add(New GradientRecord(20,New RGB(0,255,0)))
list.Add(New GradientRecord(50,New RGB(0,0,255)))


'use focal gradient fill
Dim fgf As New FocalGradientFill()
fgf.FocalPoint = 100
fgf.Gradients = list
fgf.MatrixTransform = mt
'add a gradient record
fgf.Add(New GradientRecord(20, New RGB(0, 255, 0)))

sm.Add(fgf)

'draw rounded rectangle
sm.DrawRoundedRectangle(2000, 2000, 4000, 4000, 50)


'define shape using GetDefineShape method
Dim ds As DefineShape3 = sm.GetDefineShape3(c.NewIdentifier())
c.Add(ds)


Dim po As New PlaceObject2(ds.ShapeId, 1)
po.CharacterType = PlaceType.New
m.Add(po)</code></example>
    </member>
    <member name="M:Aspose.Flash.Shapes.FocalGradientFill.Add(Aspose.Flash.Shapes.GradientRecord)">
      <summary>
            Add a gradient to the collection of gradients.
            </summary>
      <param name="gradient">New gradient to add.</param>
      <example>This example shows you how to use Add(GradientRecord) method<code>[Visual Basic]

Dim sm As New ShapeManager()
Dim m As New DefineSprite(c.NewIdentifier())

'adding line styles to linestyles list
Dim i As Integer = sm.LineStyles.Add(New SolidLine(10, New RGB(0, 0, 0)))

'select a line style from srray of line styles
sm.SelectLineStyle(i)

Dim mt As New MatrixTransform()
mt.Scale(50,50)

'array list for gradients
Dim list As New ArrayList()
list.Add(New GradientRecord(10,New RGB(100,20,20)))
list.Add(New GradientRecord(20,New RGB(0,255,0)))
list.Add(New GradientRecord(50,New RGB(0,0,255)))


'use focal gradient fill
Dim fgf As New FocalGradientFill()
fgf.FocalPoint = 100
fgf.Gradients = list
fgf.MatrixTransform = mt
'add a gradient record
fgf.Add(New GradientRecord(20, New RGB(0, 255, 0)))

sm.Add(fgf)

'draw rounded rectangle
sm.DrawRoundedRectangle(2000, 2000, 4000, 4000, 50)


'define shape using GetDefineShape method
Dim ds As DefineShape3 = sm.GetDefineShape3(c.NewIdentifier())
c.Add(ds)


Dim po As New PlaceObject2(ds.ShapeId, 1)
po.CharacterType = PlaceType.New
m.Add(po)</code></example>
      <example>This example shows you how to use FocalGradientFill.Add(GradientRecord) method<code>[C#]

ShapeManager sm = new ShapeManager();
DefineSprite m = new DefineSprite(c.NewIdentifier());

//adding line styles to linestyles list
int i = sm.LineStyles.Add(new SolidLine(10, new RGB(0, 0, 0)));

//select a line style from srray of line styles
sm.SelectLineStyle(i);

MatrixTransform mt = new MatrixTransform();
mt.Scale(50,50);

//array list for gradients
ArrayList list = new ArrayList();
list.Add(new GradientRecord(10,new RGB(100,20,20)));
list.Add(new GradientRecord(20,new RGB(0,255,0)));
list.Add(new GradientRecord(50,new RGB(0,0,255)));


//use focal gradient fill
FocalGradientFill fgf = new FocalGradientFill();
fgf.FocalPoint = 100;
fgf.Gradients = list;
fgf.MatrixTransform = mt;
//add a gradient record
fgf.Add(new GradientRecord(20, new RGB(0, 255, 0)));

sm.Add(fgf);

//draw rounded rectangle
sm.DrawRoundedRectangle(2000, 2000, 4000, 4000, 50);


//define shape using GetDefineShape method
DefineShape3 ds = sm.GetDefineShape3(c.NewIdentifier());
c.Add(ds);


PlaceObject2 po = new PlaceObject2(ds.ShapeId, 1);
po.CharacterType = PlaceType.New;
m.Add(po);</code></example>
    </member>
    <member name="P:Aspose.Flash.Shapes.FocalGradientFill.SpreadMode">
      <summary>
            Returns or sets the spread mode of a gradient.
            Read/write <see cref="T:Aspose.Flash.Shapes.SpreadMode" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Shapes.FocalGradientFill.InterpolationMode">
      <summary>
            Returns or sets the interpolation mode of a gradient.
            Read/write <see cref="T:Aspose.Flash.Shapes.InterpolationMode" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Shapes.FocalGradientFill.Gradients">
      <summary>
            Returns or sets the list of gradients.
            Read/write <see cref="T:System.Collections.ArrayList" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Shapes.FocalGradientFill.FocalPoint">
      <summary>
            Returns or sets the focal point of a gradient.
            Read/write <see cref="T:System.Single" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Shapes.FocalGradientFill.MatrixTransform">
      <summary>
            Returns or sets the transformation matrix of a gradient.
            Read/write <see cref="P:Aspose.Flash.Shapes.FocalGradientFill.MatrixTransform" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Shapes.GradientRecord">
      <summary>
            Represents the gradient control point.
            </summary>
      <example>This example shows you how to use GradientRecord class<code>[C#]

FlashContainer c = new FlashContainer();
//c.Add(new SetBackgroundColor(new RGB(255, 255, 255)));
c.FrameSize = new Rect(0, 0, 1440 * 5, 1440 * 5);

ShapeManager sm = new ShapeManager();
DefineSprite m = new DefineSprite(c.NewIdentifier());

//adding line styles to linestyles list
int i = sm.LineStyles.Add(new SolidLine(10, new RGB(0, 0, 0)));

//select a line style from srray of line styles
sm.SelectLineStyle(i);

MatrixTransform mt = new MatrixTransform();
mt.Scale(50,50);

//array list for gradients
ArrayList list = new ArrayList();
list.Add(new GradientRecord(10,new RGB(100,20,20)));
list.Add(new GradientRecord(20,new RGB(0,255,0)));
list.Add(new GradientRecord(50,new RGB(0,0,255)));
list.Add(new GradientRecord(100,new RGB(0,0,0)));

GradientFill gf = new GradientFill(FillStyleType.RadialGradientFill, mt, list);
//add another gradient record
gf.Add(new GradientRecord(255, new RGB(100, 100, 100)));
//use the gradient fill
sm.Add(gf);

//draw rounded rectangle
sm.DrawRoundedRectangle(2000, 2000, 4000, 4000, 50);


//define shape using GetDefineShape method
DefineShape3 ds = sm.GetDefineShape3(c.NewIdentifier());
c.Add(ds);


PlaceObject2 po = new PlaceObject2(ds.ShapeId, 1);
po.CharacterType = PlaceType.New;
m.Add(po);

c.Add(m);
po = new PlaceObject2(m.SpriteId, 1);
po.CharacterType = PlaceType.New;
c.Add(po);</code><code>[Visual Basic]

Dim c As New FlashContainer()
'c.Add(new SetBackgroundColor(new RGB(255, 255, 255)));
c.FrameSize = New Rect(0, 0, 1440 * 5, 1440 * 5)

Dim sm As New ShapeManager()
Dim m As New DefineSprite(c.NewIdentifier())

'adding line styles to linestyles list
Dim i As Integer = sm.LineStyles.Add(New SolidLine(10, New RGB(0, 0, 0)))

'select a line style from srray of line styles
sm.SelectLineStyle(i)

Dim mt As New MatrixTransform()
mt.Scale(50,50)

'array list for gradients
Dim list As New ArrayList()
list.Add(New GradientRecord(10,New RGB(100,20,20)))
list.Add(New GradientRecord(20,New RGB(0,255,0)))
list.Add(New GradientRecord(50,New RGB(0,0,255)))
list.Add(New GradientRecord(100,New RGB(0,0,0)))

Dim gf As New GradientFill(FillStyleType.RadialGradientFill, mt, list)
'add another gradient record
gf.Add(New GradientRecord(255, New RGB(100, 100, 100)))
'use the gradient fill
sm.Add(gf)

'draw rounded rectangle
sm.DrawRoundedRectangle(2000, 2000, 4000, 4000, 50)


'define shape using GetDefineShape method
Dim ds As DefineShape3 = sm.GetDefineShape3(c.NewIdentifier())
c.Add(ds)


Dim po As New PlaceObject2(ds.ShapeId, 1)
po.CharacterType = PlaceType.New
m.Add(po)

c.Add(m)
po = New PlaceObject2(m.SpriteId, 1)
po.CharacterType = PlaceType.New
c.Add(po)</code></example>
    </member>
    <member name="M:Aspose.Flash.Shapes.GradientRecord.#ctor(System.Int32,Aspose.Flash.Basic.RGB)">
      <summary>
            Creates the GradientRecord with the specified ratio and color.
            </summary>
      <param name="ratio">Ratio of a gradient.</param>
      <param name="color">Color of a gradient.</param>
    </member>
    <member name="M:Aspose.Flash.Shapes.GradientRecord.#ctor(System.Int32,System.Drawing.Color)">
      <summary>
            Creates the GradientRecord with the specified ratio and color.
            </summary>
      <param name="ratio">Ratio of a gradient.</param>
      <param name="color">Color of a gradient.</param>
    </member>
    <member name="P:Aspose.Flash.Shapes.GradientRecord.Ratio">
      <summary>
            Returns or sets the ratio value.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Shapes.GradientRecord.ColorRGB">
      <summary>
            Returns or sets the color of a gradient.
            Read/write <see cref="T:Aspose.Flash.Basic.RGB" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Shapes.GradientRecord.Color">
      <summary>
            Returns or sets the color of a gradient.
            Read/write <see cref="P:Aspose.Flash.Shapes.GradientRecord.Color" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Shapes.SpreadMode">
      <summary>
            Spread mode of gradient fill
            </summary>
    </member>
    <member name="F:Aspose.Flash.Shapes.SpreadMode.PadMode">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Flash.Shapes.SpreadMode.ReflectMode">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Flash.Shapes.SpreadMode.RepeadMode">
      <summary>
      </summary>
    </member>
    <member name="T:Aspose.Flash.Shapes.InterpolationMode">
      <summary>
            Interpolation mode
            </summary>
    </member>
    <member name="F:Aspose.Flash.Shapes.InterpolationMode.NormalRGB">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Flash.Shapes.InterpolationMode.LinearRGB">
      <summary>
      </summary>
    </member>
    <member name="T:Aspose.Flash.Shapes.GradientFill">
      <summary>
            Gradient class is the part of the Fill Style class.
            </summary>
      <example>This example shows you how to use GradientFill class<code>[C#]

FlashContainer c = new FlashContainer();
//c.Add(new SetBackgroundColor(new RGB(255, 255, 255)));
c.FrameSize = new Rect(0, 0, 1440 * 5, 1440 * 5);

ShapeManager sm = new ShapeManager();
DefineSprite m = new DefineSprite(c.NewIdentifier());

//adding line styles to linestyles list
int i = sm.LineStyles.Add(new SolidLine(10, new RGB(0, 0, 0)));

//select a line style from srray of line styles
sm.SelectLineStyle(i);

MatrixTransform mt = new MatrixTransform();
mt.Scale(50,50);

//array list for gradients
ArrayList list = new ArrayList();
list.Add(new GradientRecord(10,new RGB(100,20,20)));
list.Add(new GradientRecord(20,new RGB(0,255,0)));
list.Add(new GradientRecord(50,new RGB(0,0,255)));
list.Add(new GradientRecord(100,new RGB(0,0,0)));

//use the gradient fill
sm.Add(new GradientFill(FillStyleType.RadialGradientFill,mt, list));

//draw rounded rectangle
sm.DrawRoundedRectangle(2000, 2000, 4000, 4000, 50);


//define shape using GetDefineShape method
DefineShape3 ds = sm.GetDefineShape3(c.NewIdentifier());
c.Add(ds);


PlaceObject2 po = new PlaceObject2(ds.ShapeId, 1);
po.CharacterType = PlaceType.New;
m.Add(po);

c.Add(m);
po = new PlaceObject2(m.SpriteId, 1);
po.CharacterType = PlaceType.New;
c.Add(po);</code><code>[Visual Basic]

Dim c As New FlashContainer()
'c.Add(new SetBackgroundColor(new RGB(255, 255, 255)));
c.FrameSize = New Rect(0, 0, 1440 * 5, 1440 * 5)

Dim sm As New ShapeManager()
Dim m As New DefineSprite(c.NewIdentifier())

'adding line styles to linestyles list
Dim i As Integer = sm.LineStyles.Add(New SolidLine(10, New RGB(0, 0, 0)))

'select a line style from srray of line styles
sm.SelectLineStyle(i)

Dim mt As New MatrixTransform()
mt.Scale(50,50)

'array list for gradients
Dim list As New ArrayList()
list.Add(New GradientRecord(10,New RGB(100,20,20)))
list.Add(New GradientRecord(20,New RGB(0,255,0)))
list.Add(New GradientRecord(50,New RGB(0,0,255)))
list.Add(New GradientRecord(100,New RGB(0,0,0)))

'use the gradient fill
sm.Add(New GradientFill(FillStyleType.RadialGradientFill,mt, list))

'draw rounded rectangle
sm.DrawRoundedRectangle(2000, 2000, 4000, 4000, 50)


'define shape using GetDefineShape method
Dim ds As DefineShape3 = sm.GetDefineShape3(c.NewIdentifier())
c.Add(ds)


Dim po As New PlaceObject2(ds.ShapeId, 1)
po.CharacterType = PlaceType.New
m.Add(po)

c.Add(m)
po = New PlaceObject2(m.SpriteId, 1)
po.CharacterType = PlaceType.New
c.Add(po)</code></example>
    </member>
    <member name="M:Aspose.Flash.Shapes.GradientFill.#ctor(Aspose.Flash.Shapes.FillStyleType,Aspose.Flash.Basic.MatrixTransform,System.Collections.ArrayList)">
      <summary>
            Creates GradientFill with specified type, transformation and collection of gradients.
            </summary>
      <param name="type">Type of gradient. See <see cref="T:Aspose.Flash.Shapes.FillStyleType" />.</param>
      <param name="transform">Transformation matrix.</param>
      <param name="array">Collection of up to 8 gradients which define the control points of the gradient.</param>
      <example>This example shows you how to use GradientFill constructor<code>[C#]

FlashContainer c = new FlashContainer();
//c.Add(new SetBackgroundColor(new RGB(255, 255, 255)));
c.FrameSize = new Rect(0, 0, 1440 * 5, 1440 * 5);

ShapeManager sm = new ShapeManager();
DefineSprite m = new DefineSprite(c.NewIdentifier());

//adding line styles to linestyles list
int i = sm.LineStyles.Add(new SolidLine(10, new RGB(0, 0, 0)));

//select a line style from srray of line styles
sm.SelectLineStyle(i);

MatrixTransform mt = new MatrixTransform();
mt.Scale(50,50);

//array list for gradients
ArrayList list = new ArrayList();
list.Add(new GradientRecord(10,new RGB(100,20,20)));
list.Add(new GradientRecord(20,new RGB(0,255,0)));
list.Add(new GradientRecord(50,new RGB(0,0,255)));
list.Add(new GradientRecord(100,new RGB(0,0,0)));

//use the gradient fill
sm.Add(new GradientFill(FillStyleType.RadialGradientFill,mt, list));

//draw rounded rectangle
sm.DrawRoundedRectangle(2000, 2000, 4000, 4000, 50);


//define shape using GetDefineShape method
DefineShape3 ds = sm.GetDefineShape3(c.NewIdentifier());
c.Add(ds);


PlaceObject2 po = new PlaceObject2(ds.ShapeId, 1);
po.CharacterType = PlaceType.New;
m.Add(po);

c.Add(m);
po = new PlaceObject2(m.SpriteId, 1);
po.CharacterType = PlaceType.New;
c.Add(po);</code><code>[Visual Basic]

Dim c As New FlashContainer()
'c.Add(new SetBackgroundColor(new RGB(255, 255, 255)));
c.FrameSize = New Rect(0, 0, 1440 * 5, 1440 * 5)

Dim sm As New ShapeManager()
Dim m As New DefineSprite(c.NewIdentifier())

'adding line styles to linestyles list
Dim i As Integer = sm.LineStyles.Add(New SolidLine(10, New RGB(0, 0, 0)))

'select a line style from srray of line styles
sm.SelectLineStyle(i)

Dim mt As New MatrixTransform()
mt.Scale(50,50)

'array list for gradients
Dim list As New ArrayList()
list.Add(New GradientRecord(10,New RGB(100,20,20)))
list.Add(New GradientRecord(20,New RGB(0,255,0)))
list.Add(New GradientRecord(50,New RGB(0,0,255)))
list.Add(New GradientRecord(100,New RGB(0,0,0)))

'use the gradient fill
sm.Add(New GradientFill(FillStyleType.RadialGradientFill,mt, list))

'draw rounded rectangle
sm.DrawRoundedRectangle(2000, 2000, 4000, 4000, 50)


'define shape using GetDefineShape method
Dim ds As DefineShape3 = sm.GetDefineShape3(c.NewIdentifier())
c.Add(ds)


Dim po As New PlaceObject2(ds.ShapeId, 1)
po.CharacterType = PlaceType.New
m.Add(po)

c.Add(m)
po = New PlaceObject2(m.SpriteId, 1)
po.CharacterType = PlaceType.New
c.Add(po)</code></example>
    </member>
    <member name="M:Aspose.Flash.Shapes.GradientFill.Add(Aspose.Flash.Shapes.GradientRecord)">
      <summary>
            Add a gradient to the collection of gradients.
            </summary>
      <param name="gradient">New gradient to add.</param>
      <example>This example shows you how to use GradientFill.Add(GradientRecord) method<code>[C#]

FlashContainer c = new FlashContainer();
//c.Add(new SetBackgroundColor(new RGB(255, 255, 255)));
c.FrameSize = new Rect(0, 0, 1440 * 5, 1440 * 5);

ShapeManager sm = new ShapeManager();
DefineSprite m = new DefineSprite(c.NewIdentifier());

//adding line styles to linestyles list
int i = sm.LineStyles.Add(new SolidLine(10, new RGB(0, 0, 0)));

//select a line style from srray of line styles
sm.SelectLineStyle(i);

MatrixTransform mt = new MatrixTransform();
mt.Scale(50,50);

//array list for gradients
ArrayList list = new ArrayList();
list.Add(new GradientRecord(10,new RGB(100,20,20)));
list.Add(new GradientRecord(20,new RGB(0,255,0)));
list.Add(new GradientRecord(50,new RGB(0,0,255)));
list.Add(new GradientRecord(100,new RGB(0,0,0)));

GradientFill gf = new GradientFill(FillStyleType.RadialGradientFill, mt, list);
//add another gradient record
gf.Add(new GradientRecord(255, new RGB(100, 100, 100)));
//use the gradient fill
sm.Add(gf);

//draw rounded rectangle
sm.DrawRoundedRectangle(2000, 2000, 4000, 4000, 50);


//define shape using GetDefineShape method
DefineShape3 ds = sm.GetDefineShape3(c.NewIdentifier());
c.Add(ds);


PlaceObject2 po = new PlaceObject2(ds.ShapeId, 1);
po.CharacterType = PlaceType.New;
m.Add(po);

c.Add(m);
po = new PlaceObject2(m.SpriteId, 1);
po.CharacterType = PlaceType.New;
c.Add(po);</code><code>[Visual Basic]

Dim c As New FlashContainer()
'c.Add(new SetBackgroundColor(new RGB(255, 255, 255)));
c.FrameSize = New Rect(0, 0, 1440 * 5, 1440 * 5)

Dim sm As New ShapeManager()
Dim m As New DefineSprite(c.NewIdentifier())

'adding line styles to linestyles list
Dim i As Integer = sm.LineStyles.Add(New SolidLine(10, New RGB(0, 0, 0)))

'select a line style from srray of line styles
sm.SelectLineStyle(i)

Dim mt As New MatrixTransform()
mt.Scale(50,50)

'array list for gradients
Dim list As New ArrayList()
list.Add(New GradientRecord(10,New RGB(100,20,20)))
list.Add(New GradientRecord(20,New RGB(0,255,0)))
list.Add(New GradientRecord(50,New RGB(0,0,255)))
list.Add(New GradientRecord(100,New RGB(0,0,0)))

Dim gf As New GradientFill(FillStyleType.RadialGradientFill, mt, list)
'add another gradient record
gf.Add(New GradientRecord(255, New RGB(100, 100, 100)))
'use the gradient fill
sm.Add(gf)

'draw rounded rectangle
sm.DrawRoundedRectangle(2000, 2000, 4000, 4000, 50)


'define shape using GetDefineShape method
Dim ds As DefineShape3 = sm.GetDefineShape3(c.NewIdentifier())
c.Add(ds)


Dim po As New PlaceObject2(ds.ShapeId, 1)
po.CharacterType = PlaceType.New
m.Add(po)

c.Add(m)
po = New PlaceObject2(m.SpriteId, 1)
po.CharacterType = PlaceType.New
c.Add(po)</code></example>
    </member>
    <member name="P:Aspose.Flash.Shapes.GradientFill.MatrixTransform">
      <summary>
            Returns or sets the transformation matrix of a gradient.
            Read/write <see cref="P:Aspose.Flash.Shapes.GradientFill.MatrixTransform" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Shapes.GradientFill.GradientList">
      <summary>
            Returns or sets the collection of gradients.
            Read/write <see cref="T:System.Collections.ArrayList" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Shapes.GradientFill.SpreadMode">
      <summary>
            Spread mode
            </summary>
    </member>
    <member name="P:Aspose.Flash.Shapes.GradientFill.InterpolationMode">
      <summary>
            Interpolation mode between the control points
            </summary>
    </member>
    <member name="T:Aspose.Flash.Shapes.LineStyle">
      <summary>
            Abstract class which represents the width and color of a line.
            </summary>
      <example>This example shows you how to use LineStyle class<code>[C#]

//Create a flash container and set frame size and frame rate
FlashContainer fc = new FlashContainer();
fc.FrameRate = 12.0f;
fc.FrameSize = new Rect(0, 0, 4000, 4000);

//Define fill styles array
//Add two colors RED and BLUE in fill styles array
ArrayList fillStyles = new ArrayList();
fillStyles.Add(new SolidFill(new RGB(255, 0, 0)));
fillStyles.Add(new SolidFill(new RGB(0, 255, 0)));

//Define line styles array
//Add two colors GREEN and YELLOW in line styles array
ArrayList lineStyles = new ArrayList();
lineStyles.Add(new SolidLine(10, new RGB(0, 0, 255)));
lineStyles.Add(new SolidLine(50, new RGB(255, 255, 0)));

//Define Style Change Record
StyleChangeRecord scr = new StyleChangeRecord(-1000, -1000);
scr.FillStyle = 1;  //Select RED
scr.LineStyle = 2;  //Select YELLOW

//add fill tyle and line style
scr.Add(new SolidFill(Color.FromName("Red")));
scr.Add(new SolidLine(50, Color.FromName("Green")));


//Define four edges of Rectangle
StraightEdgeRecord ser1 = new StraightEdgeRecord(2000, 0);
StraightEdgeRecord ser2 = new StraightEdgeRecord(0, 2000);
StraightEdgeRecord ser3 = new StraightEdgeRecord(-2000, 0);
StraightEdgeRecord ser4 = new StraightEdgeRecord(0, -2000);

//Put all the five shape records in a Aspose.Flash.Shapes.Shape
//object, this is just a collection that will hold shape records
//for DefineShape2 tag
Shape shapeRect = new Shape();
shapeRect.Add(scr);
shapeRect.Add(ser1);
shapeRect.Add(ser2);
shapeRect.Add(ser3);
shapeRect.Add(ser4);


//At this point we have all the things to create an instance of
//DefineShape3 class
DefineShape3 defineShape = new DefineShape3(fc.NewIdentifier(),
new Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect);

//adding fill style and line style in the define shape 3 object
defineShape.Add(new SolidFill(new RGB(255, 0, 0)));

defineShape.Add(new SolidLine(50, new RGB(0, 255, 0)));

//Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape);

//Place the Rectangle Character on Display List
PlaceObject2 placeObj = new PlaceObject2(defineShape.Id, 1);
//Translate the origin of newly placed object
placeObj.MatrixTransform = new MatrixTransform(2000, 2000);

//Add CONTROL TAG created above inside the flash container
fc.Add(placeObj);
//Show the next frame using CONTROL TAG and add it inside the

//flash container
fc.Add(new ShowFrame());
//Now write the flash container on disk to show its output
fc.Write("c:\\out.swf");</code><code>[Visual Basic]

'Create a flash container and set frame size and frame rate
Dim fc As New FlashContainer()
fc.FrameRate = 12.0f
fc.FrameSize = New Rect(0, 0, 4000, 4000)

'Define fill styles array
'Add two colors RED and BLUE in fill styles array
Dim fillStyles As New ArrayList()
fillStyles.Add(New SolidFill(New RGB(255, 0, 0)))
fillStyles.Add(New SolidFill(New RGB(0, 255, 0)))

'Define line styles array
'Add two colors GREEN and YELLOW in line styles array
Dim lineStyles As New ArrayList()
lineStyles.Add(New SolidLine(10, New RGB(0, 0, 255)))
lineStyles.Add(New SolidLine(50, New RGB(255, 255, 0)))

'Define Style Change Record
Dim scr As New StyleChangeRecord(-1000, -1000)
scr.FillStyle = 1 'Select RED
scr.LineStyle = 2 'Select YELLOW

'add fill tyle and line style
scr.Add(New SolidFill(Color.FromName("Red")))
scr.Add(New SolidLine(50, Color.FromName("Green")))


'Define four edges of Rectangle
Dim ser1 As New StraightEdgeRecord(2000, 0)
Dim ser2 As New StraightEdgeRecord(0, 2000)
Dim ser3 As New StraightEdgeRecord(-2000, 0)
Dim ser4 As New StraightEdgeRecord(0, -2000)

'Put all the five shape records in a Aspose.Flash.Shapes.Shape
'object, this is just a collection that will hold shape records
'for DefineShape2 tag
Dim shapeRect As New Shape()
shapeRect.Add(scr)
shapeRect.Add(ser1)
shapeRect.Add(ser2)
shapeRect.Add(ser3)
shapeRect.Add(ser4)


'At this point we have all the things to create an instance of
'DefineShape3 class
Dim defineShape As New DefineShape3(fc.NewIdentifier(), New Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect)

'adding fill style and line style in the define shape 3 object
defineShape.Add(New SolidFill(New RGB(255, 0, 0)))

defineShape.Add(New SolidLine(50, New RGB(0, 255, 0)))

'Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape)

'Place the Rectangle Character on Display List
Dim placeObj As New PlaceObject2(defineShape.Id, 1)
'Translate the origin of newly placed object
placeObj.MatrixTransform = New MatrixTransform(2000, 2000)

'Add CONTROL TAG created above inside the flash container
fc.Add(placeObj)
'Show the next frame using CONTROL TAG and add it inside the

'flash container
fc.Add(New ShowFrame())
'Now write the flash container on disk to show its output
fc.Write("c:\out.swf")</code></example>
    </member>
    <member name="P:Aspose.Flash.Shapes.LineStyle.Width">
      <summary>
            Returns or sets the width of a line in twips.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Shapes.LineStyle.LineColorRGB">
      <summary>
            Returns or sets the color of a shape.
            Read/write <see cref="T:Aspose.Flash.Basic.RGB" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Shapes.LineStyle.LineColor">
      <summary>
            Returns or sets the color of a shape.
            Read/write <see cref="T:System.Drawing.Color" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Shapes.CapStyle">
      <summary>
            Represents line cap styles.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Shapes.CapStyle.Round">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Flash.Shapes.CapStyle.NoCap">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Flash.Shapes.CapStyle.Square">
      <summary>
      </summary>
    </member>
    <member name="T:Aspose.Flash.Shapes.JoinStyle">
      <summary>
            Represents line join styles.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Shapes.JoinStyle.Round">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Flash.Shapes.JoinStyle.Bevel">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Flash.Shapes.JoinStyle.Miter">
      <summary>
      </summary>
    </member>
    <member name="T:Aspose.Flash.Shapes.LineStyle2">
      <summary>
            LineStyle2 builds upon the capabilities of the LineStyle record by allowing the use of
            new types of joins and caps as well as scaling options and the ability to fill a stroke. In order to
            use LineStyle2, the shape must be defined with DefineShape4 — not DefineShape,
            DefineShape2, or DefineShape3.
            </summary>
      <example>This example shows you how to use LineStyle2 class<code>[C#]

//Create a flash container and set frame size and frame rate
FlashContainer fc = new FlashContainer();
fc.FrameRate = 12.0f;
fc.FrameSize = new Rect(0, 0, 4000, 4000);

//Define fill styles array
//Add two colors RED and BLUE in fill styles array
ArrayList fillStyles = new ArrayList();
fillStyles.Add(new SolidFill(new RGB(255, 0, 0)));
fillStyles.Add(new SolidFill(new RGB(0, 255, 0)));

//Define line styles array
//Add two colors GREEN and YELLOW in line styles array
ArrayList lineStyles = new ArrayList();

LineStyle2 ls2 = new LineStyle2();
ls2.Color = new RGB(0, 0, 255);
ls2.Width = 10;

lineStyles.Add(ls2);

ls2 = new LineStyle2();

ls2.Color = new RGB(255, 255, 0);
ls2.Width = 50;

lineStyles.Add(ls2);


//Define Style Change Record
StyleChangeRecord scr = new StyleChangeRecord(-1000, -1000);
scr.FillStyle = 1;  //Select RED
scr.LineStyle = 2;  //Select YELLOW

//add fill tyle and line style
scr.Add(new SolidFill(Color.FromName("Red")));
scr.Add(new SolidLine(50, Color.FromName("Green")));


//Define four edges of Rectangle
StraightEdgeRecord ser1 = new StraightEdgeRecord(2000, 0);
StraightEdgeRecord ser2 = new StraightEdgeRecord(0, 2000);
StraightEdgeRecord ser3 = new StraightEdgeRecord(-2000, 0);
StraightEdgeRecord ser4 = new StraightEdgeRecord(0, -2000);

//Put all the five shape records in a Aspose.Flash.Shapes.Shape
//object, this is just a collection that will hold shape records
//for DefineShape2 tag
Shape shapeRect = new Shape();
shapeRect.Add(scr);
shapeRect.Add(ser1);
shapeRect.Add(ser2);
shapeRect.Add(ser3);
shapeRect.Add(ser4);


//At this point we have all the things to create an instance of
//DefineShape4 class
DefineShape4 defineShape = new DefineShape4();

//(fc.NewIdentifier(),
//new Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect);

defineShape.Id = fc.NewIdentifier();
defineShape.EdgeBounds = new Rect(-1500, -1500, 1500, 1500);
defineShape.FillStyles = fillStyles;
defineShape.LineStyles = lineStyles;
defineShape.Shape = shapeRect;

//Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape);

//Place the Rectangle Character on Display List
PlaceObject2 placeObj = new PlaceObject2(defineShape.Id, 1);
//Translate the origin of newly placed object
placeObj.MatrixTransform = new MatrixTransform(2000, 2000);

//Add CONTROL TAG created above inside the flash container
fc.Add(placeObj);
//Show the next frame using CONTROL TAG and add it inside the

//flash container
fc.Add(new ShowFrame());
//Now write the flash container on disk to show its output
fc.Write("c:\\out.swf");</code><code>[Visual Basic]

'Create a flash container and set frame size and frame rate
Dim fc As New FlashContainer()
fc.FrameRate = 12.0f
fc.FrameSize = New Rect(0, 0, 4000, 4000)

'Define fill styles array
'Add two colors RED and BLUE in fill styles array
Dim fillStyles As New ArrayList()
fillStyles.Add(New SolidFill(New RGB(255, 0, 0)))
fillStyles.Add(New SolidFill(New RGB(0, 255, 0)))

'Define line styles array
'Add two colors GREEN and YELLOW in line styles array
Dim lineStyles As New ArrayList()

Dim ls2 As New LineStyle2()
ls2.Color = New RGB(0, 0, 255)
ls2.Width = 10

lineStyles.Add(ls2)

ls2 = New LineStyle2()

ls2.Color = New RGB(255, 255, 0)
ls2.Width = 50

lineStyles.Add(ls2)


'Define Style Change Record
Dim scr As New StyleChangeRecord(-1000, -1000)
scr.FillStyle = 1 'Select RED
scr.LineStyle = 2 'Select YELLOW

'add fill tyle and line style
scr.Add(New SolidFill(Color.FromName("Red")))
scr.Add(New SolidLine(50, Color.FromName("Green")))


'Define four edges of Rectangle
Dim ser1 As New StraightEdgeRecord(2000, 0)
Dim ser2 As New StraightEdgeRecord(0, 2000)
Dim ser3 As New StraightEdgeRecord(-2000, 0)
Dim ser4 As New StraightEdgeRecord(0, -2000)

'Put all the five shape records in a Aspose.Flash.Shapes.Shape
'object, this is just a collection that will hold shape records
'for DefineShape2 tag
Dim shapeRect As New Shape()
shapeRect.Add(scr)
shapeRect.Add(ser1)
shapeRect.Add(ser2)
shapeRect.Add(ser3)
shapeRect.Add(ser4)


'At this point we have all the things to create an instance of
'DefineShape4 class
Dim defineShape As New DefineShape4()

'(fc.NewIdentifier(),
'new Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect);

defineShape.Id = fc.NewIdentifier()
defineShape.EdgeBounds = New Rect(-1500, -1500, 1500, 1500)
defineShape.FillStyles = fillStyles
defineShape.LineStyles = lineStyles
defineShape.Shape = shapeRect

'Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape)

'Place the Rectangle Character on Display List
Dim placeObj As New PlaceObject2(defineShape.Id, 1)
'Translate the origin of newly placed object
placeObj.MatrixTransform = New MatrixTransform(2000, 2000)

'Add CONTROL TAG created above inside the flash container
fc.Add(placeObj)
'Show the next frame using CONTROL TAG and add it inside the

'flash container
fc.Add(New ShowFrame())
'Now write the flash container on disk to show its output
fc.Write("c:\out.swf")</code></example>
    </member>
    <member name="M:Aspose.Flash.Shapes.LineStyle2.#ctor">
      <summary>
            Default constructor.
            </summary>
      <example>This example shows you how to use LineStyle2 constructor<code>[C#]

//Create a flash container and set frame size and frame rate
FlashContainer fc = new FlashContainer();
fc.FrameRate = 12.0f;
fc.FrameSize = new Rect(0, 0, 4000, 4000);

//Define fill styles array
//Add two colors RED and BLUE in fill styles array
ArrayList fillStyles = new ArrayList();
fillStyles.Add(new SolidFill(new RGB(255, 0, 0)));
fillStyles.Add(new SolidFill(new RGB(0, 255, 0)));

//Define line styles array
//Add two colors GREEN and YELLOW in line styles array
ArrayList lineStyles = new ArrayList();

LineStyle2 ls2 = new LineStyle2();
ls2.Color = new RGB(0, 0, 255);
ls2.Width = 10;

lineStyles.Add(ls2);

ls2 = new LineStyle2();

ls2.Color = new RGB(255, 255, 0);
ls2.Width = 50;

lineStyles.Add(ls2);


//Define Style Change Record
StyleChangeRecord scr = new StyleChangeRecord(-1000, -1000);
scr.FillStyle = 1;  //Select RED
scr.LineStyle = 2;  //Select YELLOW

//add fill tyle and line style
scr.Add(new SolidFill(Color.FromName("Red")));
scr.Add(new SolidLine(50, Color.FromName("Green")));


//Define four edges of Rectangle
StraightEdgeRecord ser1 = new StraightEdgeRecord(2000, 0);
StraightEdgeRecord ser2 = new StraightEdgeRecord(0, 2000);
StraightEdgeRecord ser3 = new StraightEdgeRecord(-2000, 0);
StraightEdgeRecord ser4 = new StraightEdgeRecord(0, -2000);

//Put all the five shape records in a Aspose.Flash.Shapes.Shape
//object, this is just a collection that will hold shape records
//for DefineShape2 tag
Shape shapeRect = new Shape();
shapeRect.Add(scr);
shapeRect.Add(ser1);
shapeRect.Add(ser2);
shapeRect.Add(ser3);
shapeRect.Add(ser4);


//At this point we have all the things to create an instance of
//DefineShape4 class
DefineShape4 defineShape = new DefineShape4();

//(fc.NewIdentifier(),
//new Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect);

defineShape.Id = fc.NewIdentifier();
defineShape.EdgeBounds = new Rect(-1500, -1500, 1500, 1500);
defineShape.FillStyles = fillStyles;
defineShape.LineStyles = lineStyles;
defineShape.Shape = shapeRect;

//Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape);

//Place the Rectangle Character on Display List
PlaceObject2 placeObj = new PlaceObject2(defineShape.Id, 1);
//Translate the origin of newly placed object
placeObj.MatrixTransform = new MatrixTransform(2000, 2000);

//Add CONTROL TAG created above inside the flash container
fc.Add(placeObj);
//Show the next frame using CONTROL TAG and add it inside the

//flash container
fc.Add(new ShowFrame());
//Now write the flash container on disk to show its output
fc.Write("c:\\out.swf");</code><code>[Visual Basic]

'Create a flash container and set frame size and frame rate
Dim fc As New FlashContainer()
fc.FrameRate = 12.0f
fc.FrameSize = New Rect(0, 0, 4000, 4000)

'Define fill styles array
'Add two colors RED and BLUE in fill styles array
Dim fillStyles As New ArrayList()
fillStyles.Add(New SolidFill(New RGB(255, 0, 0)))
fillStyles.Add(New SolidFill(New RGB(0, 255, 0)))

'Define line styles array
'Add two colors GREEN and YELLOW in line styles array
Dim lineStyles As New ArrayList()

Dim ls2 As New LineStyle2()
ls2.Color = New RGB(0, 0, 255)
ls2.Width = 10

lineStyles.Add(ls2)

ls2 = New LineStyle2()

ls2.Color = New RGB(255, 255, 0)
ls2.Width = 50

lineStyles.Add(ls2)


'Define Style Change Record
Dim scr As New StyleChangeRecord(-1000, -1000)
scr.FillStyle = 1 'Select RED
scr.LineStyle = 2 'Select YELLOW

'add fill tyle and line style
scr.Add(New SolidFill(Color.FromName("Red")))
scr.Add(New SolidLine(50, Color.FromName("Green")))


'Define four edges of Rectangle
Dim ser1 As New StraightEdgeRecord(2000, 0)
Dim ser2 As New StraightEdgeRecord(0, 2000)
Dim ser3 As New StraightEdgeRecord(-2000, 0)
Dim ser4 As New StraightEdgeRecord(0, -2000)

'Put all the five shape records in a Aspose.Flash.Shapes.Shape
'object, this is just a collection that will hold shape records
'for DefineShape2 tag
Dim shapeRect As New Shape()
shapeRect.Add(scr)
shapeRect.Add(ser1)
shapeRect.Add(ser2)
shapeRect.Add(ser3)
shapeRect.Add(ser4)


'At this point we have all the things to create an instance of
'DefineShape4 class
Dim defineShape As New DefineShape4()

'(fc.NewIdentifier(),
'new Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect);

defineShape.Id = fc.NewIdentifier()
defineShape.EdgeBounds = New Rect(-1500, -1500, 1500, 1500)
defineShape.FillStyles = fillStyles
defineShape.LineStyles = lineStyles
defineShape.Shape = shapeRect

'Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape)

'Place the Rectangle Character on Display List
Dim placeObj As New PlaceObject2(defineShape.Id, 1)
'Translate the origin of newly placed object
placeObj.MatrixTransform = New MatrixTransform(2000, 2000)

'Add CONTROL TAG created above inside the flash container
fc.Add(placeObj)
'Show the next frame using CONTROL TAG and add it inside the

'flash container
fc.Add(New ShowFrame())
'Now write the flash container on disk to show its output
fc.Write("c:\out.swf")</code></example>
    </member>
    <member name="P:Aspose.Flash.Shapes.LineStyle2.Width">
      <summary>
            Width of line in twips
            </summary>
    </member>
    <member name="P:Aspose.Flash.Shapes.LineStyle2.StartCap">
      <summary>
            Start cap style
            </summary>
    </member>
    <member name="P:Aspose.Flash.Shapes.LineStyle2.JoinStyle">
      <summary>
            Join style
            </summary>
    </member>
    <member name="P:Aspose.Flash.Shapes.LineStyle2.NoHScaleFlag">
      <summary>
            If true, stroke thickness will not scale if the object is scaled horizontally.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Shapes.LineStyle2.NoVScaleFlag">
      <summary>
            If true, stroke thickness will not scale if the object is scaled vertically
            </summary>
    </member>
    <member name="P:Aspose.Flash.Shapes.LineStyle2.PixelHintingFlag">
      <summary>
            If true, all anchors will be aligned to full pixels
            </summary>
    </member>
    <member name="P:Aspose.Flash.Shapes.LineStyle2.NoClose">
      <summary>
            If true, stroke will not be closed if the stroke’s last point
            matches its first point. Flash Player will apply caps instead of a join
            </summary>
    </member>
    <member name="P:Aspose.Flash.Shapes.LineStyle2.EndCapStyle">
      <summary>
            End cap style
            </summary>
    </member>
    <member name="P:Aspose.Flash.Shapes.LineStyle2.MiterLimitFactor">
      <summary>
            Miter limit factor
            </summary>
    </member>
    <member name="P:Aspose.Flash.Shapes.LineStyle2.Color">
      <summary>
            Color value including alpha channel
            </summary>
    </member>
    <member name="P:Aspose.Flash.Shapes.LineStyle2.FillType">
      <summary>
            Fill style for this stroke
            </summary>
    </member>
    <member name="T:Aspose.Flash.Shapes.MorphBitmapFill">
      <summary>
            MorphBitmapFill class is used to fill morphing shape with a bitmap image.
            <p>The class is used with folowing FillStyleType:</p><ul><li>RepeatingBitmapFill</li><li>ClippedBitmapFill</li><li>NonSmoothedRepeatingBitmap</li><li>NonSmoothedClippedBitmap</li></ul></summary>
    </member>
    <member name="M:Aspose.Flash.Shapes.MorphBitmapFill.#ctor(Aspose.Flash.Shapes.FillStyleType,System.Int32,Aspose.Flash.Basic.MatrixTransform,Aspose.Flash.Basic.MatrixTransform)">
      <summary>
            Creates MorphBitmapFill with specified fill type, bitmap and transformation matrixes.
            </summary>
      <param name="type">Morphing fill type.</param>
      <param name="id">Bitmap Id.</param>
      <param name="startTransform">Bitmap transformation for the start shape.</param>
      <param name="endTransform">Bitmap transformation for the end shape.</param>
    </member>
    <member name="P:Aspose.Flash.Shapes.MorphBitmapFill.BitmapId">
      <summary>
            Returns or sets the Id of the bitmap used to fill an object.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Shapes.MorphBitmapFill.StartMatrixTransform">
      <summary>
            Returns or sets the transformation matrix used for bitmap which fills start shape.
            Read/write <see cref="T:Aspose.Flash.Basic.MatrixTransform" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Shapes.MorphBitmapFill.EndMatrixTransform">
      <summary>
            Returns or sets the transformation matrix used for bitmap which fills end shape.
            Read/write <see cref="T:Aspose.Flash.Basic.MatrixTransform" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Shapes.MorphGradientFill">
      <summary>
            MorphGradientFill class is used to fill morphing shape with a gradient.
            <p>Two types of gradient fill are supported:</p><ul><li>LinearGradientFill</li><li>RadialGradientFill</li></ul></summary>
    </member>
    <member name="M:Aspose.Flash.Shapes.MorphGradientFill.#ctor(Aspose.Flash.Shapes.FillStyleType,Aspose.Flash.Basic.MatrixTransform,Aspose.Flash.Basic.MatrixTransform,System.Collections.ArrayList)">
      <summary>
            MorphGradientFill constructor.
            </summary>
      <param name="type">Type of the gradient fill.</param>
      <param name="startMatrix">Gradient transformation for the start shape.</param>
      <param name="endMatrix">Gradient transformation for the end shape.</param>
      <param name="array">Collection of  MorphGradientRecord objects (up to 8 elements).</param>
    </member>
    <member name="M:Aspose.Flash.Shapes.MorphGradientFill.Add(Aspose.Flash.Shapes.MorphGradientRecord)">
      <summary>
            Add a MorphGradientRecord object to the collection.
            </summary>
      <param name="gradient">MorphGradientRecord object to add.</param>
    </member>
    <member name="P:Aspose.Flash.Shapes.MorphGradientFill.StartMatrixTransform">
      <summary>
            Returns or sets the transformation matrix used for gradient which fills start shape.
            Read/write <see cref="T:Aspose.Flash.Basic.MatrixTransform" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Shapes.MorphGradientFill.EndMatrixTransform">
      <summary>
            Returns or sets the transformation matrix used for gradient which fills end shape.
            Read/write <see cref="T:Aspose.Flash.Basic.MatrixTransform" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Shapes.MorphGradientFill.GradientList">
      <summary>
            Returns or sets the collection of MorthGradientRecord objects.
            Read/write <see cref="T:System.Collections.ArrayList" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Shapes.MorphGradientRecord">
      <summary>
            Represents morphing gradient information for a fill style.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Shapes.MorphGradientRecord.#ctor(System.Int32,System.Int32,Aspose.Flash.Basic.RGB,Aspose.Flash.Basic.RGB)">
      <summary>
            MorphGradientRecord constructor.
            </summary>
      <param name="startRatio">Ratio value for start shape.</param>
      <param name="endRatio">Ratio value for end shape.</param>
      <param name="startColor">Color of gradient for the start shape.</param>
      <param name="endColor">Color of gradient for the end shape.</param>
    </member>
    <member name="P:Aspose.Flash.Shapes.MorphGradientRecord.StartRatio">
      <summary>
            Returns or sets the ratio for the start shape.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Shapes.MorphGradientRecord.EndRatio">
      <summary>
            Returns or sets the ratio for the end shape.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Shapes.MorphGradientRecord.StartColorRGB">
      <summary>
            Returns or sets the color of gradient for the start shape.
            Read/write <see cref="T:Aspose.Flash.Basic.RGB" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Shapes.MorphGradientRecord.StartColor">
      <summary>
            Returns or sets the color of gradient for the start shape.
            Read/write <see cref="T:System.Drawing.Color" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Shapes.MorphGradientRecord.EndColorRGB">
      <summary>
            Returns or sets the color of gradient for the end shape.
            Read/write <see cref="T:Aspose.Flash.Basic.RGB" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Shapes.MorphGradientRecord.EndColor">
      <summary>
            Returns or sets the color of gradient for the end shape.
            Read/write <see cref="T:System.Drawing.Color" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Shapes.MorphLineStyle2">
      <summary>
            MorphLineStyle2 builds upon the capabilities of the MorphLineStyle record by
            allowing the use of new types of joins and caps as well as scaling options and the ability to fill
            morph strokes.
            While the MorphLineStyle record permits only rounded joins and round caps,
            MorphLineStyle2 also supports miter and bevel joins, and square caps and no caps.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Shapes.MorphLineStyle2.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Shapes.MorphLineStyle2.StartWidth">
      <summary>
            Width of line in start shape in twips.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Shapes.MorphLineStyle2.EndWidth">
      <summary>
            Width of line in end shape in twips.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Shapes.MorphLineStyle2.StartCapStyle">
      <summary>
            Start-cap style
            </summary>
    </member>
    <member name="P:Aspose.Flash.Shapes.MorphLineStyle2.JoinStyle">
      <summary>
            Join style
            </summary>
    </member>
    <member name="P:Aspose.Flash.Shapes.MorphLineStyle2.HasFillFlag">
      <summary>
            If true, fill is defined in FillType. If 0, uses StartColor and EndColor fields.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Shapes.MorphLineStyle2.NoHScaleFlag">
      <summary>
            If true, stroke thickness will not scale if the object is scaled horizontally.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Shapes.MorphLineStyle2.NoVScaleFlag">
      <summary>
            If true, stroke thickness will not scale if the object is scaled vertically.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Shapes.MorphLineStyle2.PixelHintigFlag">
      <summary>
            If true, all anchors will be aligned to full pixels.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Shapes.MorphLineStyle2.NoClose">
      <summary>
            If true, stroke will not be closed if the stroke’s last point matches
            its first point. Flash Player will apply caps instead of a join.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Shapes.MorphLineStyle2.EndCapStyle">
      <summary>
            End-cap style
            </summary>
    </member>
    <member name="P:Aspose.Flash.Shapes.MorphLineStyle2.MiterLimitFactor">
      <summary>
            Miter limit factor
            </summary>
    </member>
    <member name="P:Aspose.Flash.Shapes.MorphLineStyle2.StartColor">
      <summary>
            Color value including alpha channel information for start shape.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Shapes.MorphLineStyle2.EndColor">
      <summary>
            Color value including alpha channel information for end shape.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Shapes.MorphLineStyle2.fillType">
      <summary>
            Returns or sets the fill style.
            Read/write <see cref="T:Aspose.Flash.Shapes.FillStyle" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Shapes.MorphSolidFill">
      <summary>
            MorphSolidFill class is used to fill a morphing shape with a solid color.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Shapes.MorphSolidFill.#ctor(Aspose.Flash.Basic.RGB,Aspose.Flash.Basic.RGB)">
      <summary>
            Creates the MorphSolidFill object with specified colors for start and end shapes..
            </summary>
      <param name="startColor">Solid color for the start shape.</param>
      <param name="endColor">Solid color for the end shape.</param>
    </member>
    <member name="M:Aspose.Flash.Shapes.MorphSolidFill.#ctor(System.Drawing.Color,System.Drawing.Color)">
      <summary>
            Creates the MorphSolidFill object with specified colors for start and end shapes..
            </summary>
      <param name="startColor">Solid color for the start shape.</param>
      <param name="endColor">Solid color for the end shape.</param>
    </member>
    <member name="P:Aspose.Flash.Shapes.MorphSolidFill.StartColorRGB">
      <summary>
            Returns or sets the solid color used for the start shape.
            Read/write <see cref="T:Aspose.Flash.Basic.RGB" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Shapes.MorphSolidFill.StartColor">
      <summary>
            Returns or sets the solid color used for the start shape.
            Read/write <see cref="T:System.Drawing.Color" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Shapes.MorphSolidFill.EndColorRGB">
      <summary>
            Returns or sets the solid color used for the end shape.
            Read/write <see cref="T:Aspose.Flash.Basic.RGB" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Shapes.MorphSolidFill.EndColor">
      <summary>
            Returns or sets the solid color used for the end shape.
            Read/write <see cref="T:System.Drawing.Color" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Shapes.MorphSolidLine">
      <summary>
            MorphSolidLine class is used to define the width and colour of a line drawn for a morphing shape.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Shapes.MorphSolidLine.#ctor(System.Int32,System.Int32,Aspose.Flash.Basic.RGB,Aspose.Flash.Basic.RGB)">
      <summary>
            Creates MorphSolidLine object with specified width and color of start and end shapes.
            </summary>
      <param name="startWidth">Width used for the start shape's lines.</param>
      <param name="endWidth">Width used for the end shape's lines.</param>
      <param name="startColor">Color used for the start shape's lines.</param>
      <param name="endColor">Color used for the end shape's lines.</param>
    </member>
    <member name="M:Aspose.Flash.Shapes.MorphSolidLine.#ctor(System.Int32,System.Int32,System.Drawing.Color,System.Drawing.Color)">
      <summary>
            Creates MorphSolidLine object with specified width and color of start and end shapes.
            </summary>
      <param name="startWidth">Width used for the start shape's lines.</param>
      <param name="endWidth">Width used for the end shape's lines.</param>
      <param name="startColor">Color used for the start shape's lines.</param>
      <param name="endColor">Color used for the end shape's lines.</param>
    </member>
    <member name="P:Aspose.Flash.Shapes.MorphSolidLine.StartWidth">
      <summary>
            Returns or sets the width used for the start shape in twips.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Shapes.MorphSolidLine.EndWidth">
      <summary>
            Returns or sets the width used for the end shape in twips.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Shapes.MorphSolidLine.StartColorRGB">
      <summary>
            Returns or sets the solid color used for the start shape's lines.
            Read/write <see cref="T:Aspose.Flash.Basic.RGB" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Shapes.MorphSolidLine.StartColor">
      <summary>
            Returns or sets the solid color used for the start shape's lines.
            Read/write <see cref="T:System.Drawing.Color" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Shapes.MorphSolidLine.EndColorRGB">
      <summary>
            Returns or sets the solid color used for the end shape's lines.
            Read/write <see cref="T:Aspose.Flash.Basic.RGB" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Shapes.MorphSolidLine.EndColor">
      <summary>
            Returns or sets the solid color used for the end shape's lines.
            Read/write <see cref="T:System.Drawing.Color" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Shapes.Shape">
      <summary>
            Represents the shape and shape's glyphs.
            </summary>
      <example>This example shows you how to use Shape class<code>[C#]

//Create a flash container and set frame size and frame rate
FlashContainer fc = new FlashContainer();
fc.FrameRate = 12.0f;
fc.FrameSize = new Rect(0, 0, 4000, 4000);

//Define fill styles array
//Add two colors RED and BLUE in fill styles array
ArrayList fillStyles = new ArrayList();
fillStyles.Add(new SolidFill(new RGB(255, 0, 0)));
fillStyles.Add(new SolidFill(new RGB(0, 255, 0)));

//Define line styles array
//Add two colors GREEN and YELLOW in line styles array
ArrayList lineStyles = new ArrayList();
lineStyles.Add(new SolidLine(10, new RGB(0, 0, 255)));
lineStyles.Add(new SolidLine(50, new RGB(255, 255, 0)));

//Define Style Change Record
StyleChangeRecord scr = new StyleChangeRecord(-1000, -1000);
scr.FillStyle = 1;  //Select RED
scr.LineStyle = 2;  //Select YELLOW

//add fill tyle and line style
scr.Add(new SolidFill(Color.FromName("Red")));
scr.Add(new SolidLine(50, Color.FromName("Green")));


//Define four edges of Rectangle
StraightEdgeRecord ser1 = new StraightEdgeRecord(2000, 0);
StraightEdgeRecord ser2 = new StraightEdgeRecord(0, 2000);
StraightEdgeRecord ser3 = new StraightEdgeRecord(-2000, 0);
StraightEdgeRecord ser4 = new StraightEdgeRecord(0, -2000);

//Put all the five shape records in a Aspose.Flash.Shapes.Shape
//object, this is just a collection that will hold shape records
//for DefineShape2 tag
Shape shapeRect = new Shape();
shapeRect.Add(scr);
shapeRect.Add(ser1);
shapeRect.Add(ser2);
shapeRect.Add(ser3);
shapeRect.Add(ser4);


//At this point we have all the things to create an instance of
//DefineShape3 class
DefineShape3 defineShape = new DefineShape3(fc.NewIdentifier(),
new Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect);

//adding fill style and line style in the define shape 3 object
defineShape.Add(new SolidFill(new RGB(255, 0, 0)));

defineShape.Add(new SolidLine(50, new RGB(0, 255, 0)));

//Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape);

//Place the Rectangle Character on Display List
PlaceObject2 placeObj = new PlaceObject2(defineShape.Id, 1);
//Translate the origin of newly placed object
placeObj.MatrixTransform = new MatrixTransform(2000, 2000);

//Add CONTROL TAG created above inside the flash container
fc.Add(placeObj);
//Show the next frame using CONTROL TAG and add it inside the

//flash container
fc.Add(new ShowFrame());
//Now write the flash container on disk to show its output
fc.Write("c:\\out.swf");</code><code>[Visual Basic]

'Create a flash container and set frame size and frame rate
Dim fc As New FlashContainer()
fc.FrameRate = 12.0f
fc.FrameSize = New Rect(0, 0, 4000, 4000)

'Define fill styles array
'Add two colors RED and BLUE in fill styles array
Dim fillStyles As New ArrayList()
fillStyles.Add(New SolidFill(New RGB(255, 0, 0)))
fillStyles.Add(New SolidFill(New RGB(0, 255, 0)))

'Define line styles array
'Add two colors GREEN and YELLOW in line styles array
Dim lineStyles As New ArrayList()
lineStyles.Add(New SolidLine(10, New RGB(0, 0, 255)))
lineStyles.Add(New SolidLine(50, New RGB(255, 255, 0)))

'Define Style Change Record
Dim scr As New StyleChangeRecord(-1000, -1000)
scr.FillStyle = 1 'Select RED
scr.LineStyle = 2 'Select YELLOW

'add fill tyle and line style
scr.Add(New SolidFill(Color.FromName("Red")))
scr.Add(New SolidLine(50, Color.FromName("Green")))


'Define four edges of Rectangle
Dim ser1 As New StraightEdgeRecord(2000, 0)
Dim ser2 As New StraightEdgeRecord(0, 2000)
Dim ser3 As New StraightEdgeRecord(-2000, 0)
Dim ser4 As New StraightEdgeRecord(0, -2000)

'Put all the five shape records in a Aspose.Flash.Shapes.Shape
'object, this is just a collection that will hold shape records
'for DefineShape2 tag
Dim shapeRect As New Shape()
shapeRect.Add(scr)
shapeRect.Add(ser1)
shapeRect.Add(ser2)
shapeRect.Add(ser3)
shapeRect.Add(ser4)


'At this point we have all the things to create an instance of
'DefineShape3 class
Dim defineShape As New DefineShape3(fc.NewIdentifier(), New Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect)

'adding fill style and line style in the define shape 3 object
defineShape.Add(New SolidFill(New RGB(255, 0, 0)))

defineShape.Add(New SolidLine(50, New RGB(0, 255, 0)))

'Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape)

'Place the Rectangle Character on Display List
Dim placeObj As New PlaceObject2(defineShape.Id, 1)
'Translate the origin of newly placed object
placeObj.MatrixTransform = New MatrixTransform(2000, 2000)

'Add CONTROL TAG created above inside the flash container
fc.Add(placeObj)
'Show the next frame using CONTROL TAG and add it inside the

'flash container
fc.Add(New ShowFrame())
'Now write the flash container on disk to show its output
fc.Write("c:\out.swf")</code></example>
    </member>
    <member name="M:Aspose.Flash.Shapes.Shape.#ctor">
      <summary>
            Default constructor.
            </summary>
      <example>This example shows you how to use Shape constructor<code>[C#]

//Create a flash container and set frame size and frame rate
FlashContainer fc = new FlashContainer();
fc.FrameRate = 12.0f;
fc.FrameSize = new Rect(0, 0, 4000, 4000);

//Define fill styles array
//Add two colors RED and BLUE in fill styles array
ArrayList fillStyles = new ArrayList();
fillStyles.Add(new SolidFill(new RGB(255, 0, 0)));
fillStyles.Add(new SolidFill(new RGB(0, 255, 0)));

//Define line styles array
//Add two colors GREEN and YELLOW in line styles array
ArrayList lineStyles = new ArrayList();
lineStyles.Add(new SolidLine(10, new RGB(0, 0, 255)));
lineStyles.Add(new SolidLine(50, new RGB(255, 255, 0)));

//Define Style Change Record
StyleChangeRecord scr = new StyleChangeRecord(-1000, -1000);
scr.FillStyle = 1;  //Select RED
scr.LineStyle = 2;  //Select YELLOW

//add fill tyle and line style
scr.Add(new SolidFill(Color.FromName("Red")));
scr.Add(new SolidLine(50, Color.FromName("Green")));


//Define four edges of Rectangle
StraightEdgeRecord ser1 = new StraightEdgeRecord(2000, 0);
StraightEdgeRecord ser2 = new StraightEdgeRecord(0, 2000);
StraightEdgeRecord ser3 = new StraightEdgeRecord(-2000, 0);
StraightEdgeRecord ser4 = new StraightEdgeRecord(0, -2000);

//Put all the five shape records in a Aspose.Flash.Shapes.Shape
//object, this is just a collection that will hold shape records
//for DefineShape2 tag
Shape shapeRect = new Shape();
shapeRect.Add(scr);
shapeRect.Add(ser1);
shapeRect.Add(ser2);
shapeRect.Add(ser3);
shapeRect.Add(ser4);


//At this point we have all the things to create an instance of
//DefineShape3 class
DefineShape3 defineShape = new DefineShape3(fc.NewIdentifier(),
new Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect);

//adding fill style and line style in the define shape 3 object
defineShape.Add(new SolidFill(new RGB(255, 0, 0)));

defineShape.Add(new SolidLine(50, new RGB(0, 255, 0)));

//Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape);

//Place the Rectangle Character on Display List
PlaceObject2 placeObj = new PlaceObject2(defineShape.Id, 1);
//Translate the origin of newly placed object
placeObj.MatrixTransform = new MatrixTransform(2000, 2000);

//Add CONTROL TAG created above inside the flash container
fc.Add(placeObj);
//Show the next frame using CONTROL TAG and add it inside the

//flash container
fc.Add(new ShowFrame());
//Now write the flash container on disk to show its output
fc.Write("c:\\out.swf");</code><code>[Visual Basic]

'Create a flash container and set frame size and frame rate
Dim fc As New FlashContainer()
fc.FrameRate = 12.0f
fc.FrameSize = New Rect(0, 0, 4000, 4000)

'Define fill styles array
'Add two colors RED and BLUE in fill styles array
Dim fillStyles As New ArrayList()
fillStyles.Add(New SolidFill(New RGB(255, 0, 0)))
fillStyles.Add(New SolidFill(New RGB(0, 255, 0)))

'Define line styles array
'Add two colors GREEN and YELLOW in line styles array
Dim lineStyles As New ArrayList()
lineStyles.Add(New SolidLine(10, New RGB(0, 0, 255)))
lineStyles.Add(New SolidLine(50, New RGB(255, 255, 0)))

'Define Style Change Record
Dim scr As New StyleChangeRecord(-1000, -1000)
scr.FillStyle = 1 'Select RED
scr.LineStyle = 2 'Select YELLOW

'add fill tyle and line style
scr.Add(New SolidFill(Color.FromName("Red")))
scr.Add(New SolidLine(50, Color.FromName("Green")))


'Define four edges of Rectangle
Dim ser1 As New StraightEdgeRecord(2000, 0)
Dim ser2 As New StraightEdgeRecord(0, 2000)
Dim ser3 As New StraightEdgeRecord(-2000, 0)
Dim ser4 As New StraightEdgeRecord(0, -2000)

'Put all the five shape records in a Aspose.Flash.Shapes.Shape
'object, this is just a collection that will hold shape records
'for DefineShape2 tag
Dim shapeRect As New Shape()
shapeRect.Add(scr)
shapeRect.Add(ser1)
shapeRect.Add(ser2)
shapeRect.Add(ser3)
shapeRect.Add(ser4)


'At this point we have all the things to create an instance of
'DefineShape3 class
Dim defineShape As New DefineShape3(fc.NewIdentifier(), New Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect)

'adding fill style and line style in the define shape 3 object
defineShape.Add(New SolidFill(New RGB(255, 0, 0)))

defineShape.Add(New SolidLine(50, New RGB(0, 255, 0)))

'Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape)

'Place the Rectangle Character on Display List
Dim placeObj As New PlaceObject2(defineShape.Id, 1)
'Translate the origin of newly placed object
placeObj.MatrixTransform = New MatrixTransform(2000, 2000)

'Add CONTROL TAG created above inside the flash container
fc.Add(placeObj)
'Show the next frame using CONTROL TAG and add it inside the

'flash container
fc.Add(New ShowFrame())
'Now write the flash container on disk to show its output
fc.Write("c:\out.swf")</code></example>
    </member>
    <member name="M:Aspose.Flash.Shapes.Shape.#ctor(System.Collections.ArrayList)">
      <summary>
            Creates the Shape with specified collection of shape records.
            </summary>
      <param name="shapeList">Collection of shape records.</param>
      <example>This example shows you how to use Shape(ArrayList) constructor<code>[C#]

//Create a flash container and set frame size and frame rate
FlashContainer fc = new FlashContainer();
fc.FrameRate = 12.0f;
fc.FrameSize = new Rect(0, 0, 4000, 4000);

//Define fill styles array
//Add two colors RED and BLUE in fill styles array
ArrayList fillStyles = new ArrayList();
fillStyles.Add(new SolidFill(new RGB(255, 0, 0)));
fillStyles.Add(new SolidFill(new RGB(0, 255, 0)));

//Define line styles array
//Add two colors GREEN and YELLOW in line styles array
ArrayList lineStyles = new ArrayList();
lineStyles.Add(new SolidLine(10, new RGB(0, 0, 255)));
lineStyles.Add(new SolidLine(50, new RGB(255, 255, 0)));

//Define Style Change Record
StyleChangeRecord scr = new StyleChangeRecord(-1000, -1000);
scr.FillStyle = 1;  //Select RED
scr.LineStyle = 2;  //Select YELLOW

//add fill tyle and line style
scr.Add(new SolidFill(Color.FromName("Red")));
scr.Add(new SolidLine(50, Color.FromName("Green")));


//Define four edges of Rectangle
StraightEdgeRecord ser1 = new StraightEdgeRecord(2000, 0);
StraightEdgeRecord ser2 = new StraightEdgeRecord(0, 2000);
StraightEdgeRecord ser3 = new StraightEdgeRecord(-2000, 0);
StraightEdgeRecord ser4 = new StraightEdgeRecord(0, -2000);

//Put all the five shape records in a Aspose.Flash.Shapes.Shape
//object, this is just a collection that will hold shape records
//for DefineShape2 tag

ArrayList shapesList = new ArrayList();
shapesList.Add(scr);
shapesList.Add(ser1);
shapesList.Add(ser2);
shapesList.Add(ser3);
shapesList.Add(ser4);

Shape shapeRect = new Shape(shapesList);


//At this point we have all the things to create an instance of
//DefineShape3 class
DefineShape3 defineShape = new DefineShape3(fc.NewIdentifier(),
new Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect);

//adding fill style and line style in the define shape 3 object
defineShape.Add(new SolidFill(new RGB(255, 0, 0)));

defineShape.Add(new SolidLine(50, new RGB(0, 255, 0)));

//Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape);

//Place the Rectangle Character on Display List
PlaceObject2 placeObj = new PlaceObject2(defineShape.Id, 1);
//Translate the origin of newly placed object
placeObj.MatrixTransform = new MatrixTransform(2000, 2000);

//Add CONTROL TAG created above inside the flash container
fc.Add(placeObj);
//Show the next frame using CONTROL TAG and add it inside the

//flash container
fc.Add(new ShowFrame());
//Now write the flash container on disk to show its output
fc.Write("c:\\out.swf");</code><code>[Visual Basic]

'Create a flash container and set frame size and frame rate
Dim fc As New FlashContainer()
fc.FrameRate = 12.0f
fc.FrameSize = New Rect(0, 0, 4000, 4000)

'Define fill styles array
'Add two colors RED and BLUE in fill styles array
Dim fillStyles As New ArrayList()
fillStyles.Add(New SolidFill(New RGB(255, 0, 0)))
fillStyles.Add(New SolidFill(New RGB(0, 255, 0)))

'Define line styles array
'Add two colors GREEN and YELLOW in line styles array
Dim lineStyles As New ArrayList()
lineStyles.Add(New SolidLine(10, New RGB(0, 0, 255)))
lineStyles.Add(New SolidLine(50, New RGB(255, 255, 0)))

'Define Style Change Record
Dim scr As New StyleChangeRecord(-1000, -1000)
scr.FillStyle = 1 'Select RED
scr.LineStyle = 2 'Select YELLOW

'add fill tyle and line style
scr.Add(New SolidFill(Color.FromName("Red")))
scr.Add(New SolidLine(50, Color.FromName("Green")))


'Define four edges of Rectangle
Dim ser1 As New StraightEdgeRecord(2000, 0)
Dim ser2 As New StraightEdgeRecord(0, 2000)
Dim ser3 As New StraightEdgeRecord(-2000, 0)
Dim ser4 As New StraightEdgeRecord(0, -2000)

'Put all the five shape records in a Aspose.Flash.Shapes.Shape
'object, this is just a collection that will hold shape records
'for DefineShape2 tag

Dim shapesList As New ArrayList()
shapesList.Add(scr)
shapesList.Add(ser1)
shapesList.Add(ser2)
shapesList.Add(ser3)
shapesList.Add(ser4)

Dim shapeRect As New Shape(shapesList)


'At this point we have all the things to create an instance of
'DefineShape3 class
Dim defineShape As New DefineShape3(fc.NewIdentifier(), New Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect)

'adding fill style and line style in the define shape 3 object
defineShape.Add(New SolidFill(New RGB(255, 0, 0)))

defineShape.Add(New SolidLine(50, New RGB(0, 255, 0)))

'Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape)

'Place the Rectangle Character on Display List
Dim placeObj As New PlaceObject2(defineShape.Id, 1)
'Translate the origin of newly placed object
placeObj.MatrixTransform = New MatrixTransform(2000, 2000)

'Add CONTROL TAG created above inside the flash container
fc.Add(placeObj)
'Show the next frame using CONTROL TAG and add it inside the

'flash container
fc.Add(New ShowFrame())
'Now write the flash container on disk to show its output
fc.Write("c:\out.swf")</code></example>
    </member>
    <member name="M:Aspose.Flash.Shapes.Shape.Add(Aspose.Flash.Swf.AbstractObject)">
      <summary>
            Add a shape record to the collection.
            </summary>
      <param name="shape">Shape record.</param>
      <example>This example shows you how to use Add(AbstractObject) method<code>[C#]

//Create a flash container and set frame size and frame rate
FlashContainer fc = new FlashContainer();
fc.FrameRate = 12.0f;
fc.FrameSize = new Rect(0, 0, 4000, 4000);

//Define fill styles array
//Add two colors RED and BLUE in fill styles array
ArrayList fillStyles = new ArrayList();
fillStyles.Add(new SolidFill(new RGB(255, 0, 0)));
fillStyles.Add(new SolidFill(new RGB(0, 255, 0)));

//Define line styles array
//Add two colors GREEN and YELLOW in line styles array
ArrayList lineStyles = new ArrayList();
lineStyles.Add(new SolidLine(10, new RGB(0, 0, 255)));
lineStyles.Add(new SolidLine(50, new RGB(255, 255, 0)));

//Define Style Change Record
StyleChangeRecord scr = new StyleChangeRecord(-1000, -1000);
scr.FillStyle = 1;  //Select RED
scr.LineStyle = 2;  //Select YELLOW

//add fill tyle and line style
scr.Add(new SolidFill(Color.FromName("Red")));
scr.Add(new SolidLine(50, Color.FromName("Green")));


//Define four edges of Rectangle
StraightEdgeRecord ser1 = new StraightEdgeRecord(2000, 0);
StraightEdgeRecord ser2 = new StraightEdgeRecord(0, 2000);
StraightEdgeRecord ser3 = new StraightEdgeRecord(-2000, 0);
StraightEdgeRecord ser4 = new StraightEdgeRecord(0, -2000);

//Put all the five shape records in a Aspose.Flash.Shapes.Shape
//object, this is just a collection that will hold shape records
//for DefineShape2 tag
Shape shapeRect = new Shape();
shapeRect.Add(scr);
shapeRect.Add(ser1);
shapeRect.Add(ser2);
shapeRect.Add(ser3);
shapeRect.Add(ser4);


//At this point we have all the things to create an instance of
//DefineShape3 class
DefineShape3 defineShape = new DefineShape3(fc.NewIdentifier(),
new Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect);

//adding fill style and line style in the define shape 3 object
defineShape.Add(new SolidFill(new RGB(255, 0, 0)));

defineShape.Add(new SolidLine(50, new RGB(0, 255, 0)));

//Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape);

//Place the Rectangle Character on Display List
PlaceObject2 placeObj = new PlaceObject2(defineShape.Id, 1);
//Translate the origin of newly placed object
placeObj.MatrixTransform = new MatrixTransform(2000, 2000);

//Add CONTROL TAG created above inside the flash container
fc.Add(placeObj);
//Show the next frame using CONTROL TAG and add it inside the

//flash container
fc.Add(new ShowFrame());
//Now write the flash container on disk to show its output
fc.Write("c:\\out.swf");</code><code>[Visual Basic]

'Create a flash container and set frame size and frame rate
Dim fc As New FlashContainer()
fc.FrameRate = 12.0f
fc.FrameSize = New Rect(0, 0, 4000, 4000)

'Define fill styles array
'Add two colors RED and BLUE in fill styles array
Dim fillStyles As New ArrayList()
fillStyles.Add(New SolidFill(New RGB(255, 0, 0)))
fillStyles.Add(New SolidFill(New RGB(0, 255, 0)))

'Define line styles array
'Add two colors GREEN and YELLOW in line styles array
Dim lineStyles As New ArrayList()
lineStyles.Add(New SolidLine(10, New RGB(0, 0, 255)))
lineStyles.Add(New SolidLine(50, New RGB(255, 255, 0)))

'Define Style Change Record
Dim scr As New StyleChangeRecord(-1000, -1000)
scr.FillStyle = 1 'Select RED
scr.LineStyle = 2 'Select YELLOW

'add fill tyle and line style
scr.Add(New SolidFill(Color.FromName("Red")))
scr.Add(New SolidLine(50, Color.FromName("Green")))


'Define four edges of Rectangle
Dim ser1 As New StraightEdgeRecord(2000, 0)
Dim ser2 As New StraightEdgeRecord(0, 2000)
Dim ser3 As New StraightEdgeRecord(-2000, 0)
Dim ser4 As New StraightEdgeRecord(0, -2000)

'Put all the five shape records in a Aspose.Flash.Shapes.Shape
'object, this is just a collection that will hold shape records
'for DefineShape2 tag
Dim shapeRect As New Shape()
shapeRect.Add(scr)
shapeRect.Add(ser1)
shapeRect.Add(ser2)
shapeRect.Add(ser3)
shapeRect.Add(ser4)


'At this point we have all the things to create an instance of
'DefineShape3 class
Dim defineShape As New DefineShape3(fc.NewIdentifier(), New Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect)

'adding fill style and line style in the define shape 3 object
defineShape.Add(New SolidFill(New RGB(255, 0, 0)))

defineShape.Add(New SolidLine(50, New RGB(0, 255, 0)))

'Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape)

'Place the Rectangle Character on Display List
Dim placeObj As New PlaceObject2(defineShape.Id, 1)
'Translate the origin of newly placed object
placeObj.MatrixTransform = New MatrixTransform(2000, 2000)

'Add CONTROL TAG created above inside the flash container
fc.Add(placeObj)
'Show the next frame using CONTROL TAG and add it inside the

'flash container
fc.Add(New ShowFrame())
'Now write the flash container on disk to show its output
fc.Write("c:\out.swf")</code></example>
    </member>
    <member name="P:Aspose.Flash.Shapes.Shape.ShapeList">
      <summary>
            Returns or sets the collection of records which define a shape.
            Read/write <see cref="T:System.Collections.ArrayList" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Shapes.ShapeManager">
      <summary>
            Represents the helper class for convenient creating shapes.
            Allows to create shapes like Ellipse, Circle, Line, Polygon etc.
            </summary>
      <example>This example shows you how to use ShapeManager class<code>[C#]

FlashContainer c = new FlashContainer();
c.Add(new SetBackgroundColor(new RGB(255, 255, 255)));
c.FrameSize = new Rect(0, 0, 1440 * 5, 1440 * 5);

ShapeManager sm = new ShapeManager();
DefineSprite m = new DefineSprite(c.NewIdentifier());

int i = sm.LineStyles.Add(new SolidLine(10, new RGB(0, 0, 0)));
sm.SelectLineStyle(i);

sm.DrawCircle(1440 * 2, 1440 * 2, 1440);

DefineShape2 ds = sm.GetDefineShape(c.NewIdentifier());
c.Add(ds);

PlaceObject2 po = new PlaceObject2(ds.ShapeId, 1);
po.CharacterType = PlaceType.New;
m.Add(po);

c.Add(m);
po = new PlaceObject2(m.SpriteId, 1);
po.CharacterType = PlaceType.New;
c.Add(po);</code><code>[Visual Basic]

Dim c As New FlashContainer()
c.Add(New SetBackgroundColor(New RGB(255, 255, 255)))
c.FrameSize = New Rect(0, 0, 1440 * 5, 1440 * 5)

Dim sm As New ShapeManager()
Dim m As New DefineSprite(c.NewIdentifier())

Dim i As Integer = sm.LineStyles.Add(New SolidLine(10, New RGB(0, 0, 0)))
sm.SelectLineStyle(i)

sm.DrawCircle(1440 * 2, 1440 * 2, 1440)

Dim ds As DefineShape2 = sm.GetDefineShape(c.NewIdentifier())
c.Add(ds)

Dim po As New PlaceObject2(ds.ShapeId, 1)
po.CharacterType = PlaceType.New
m.Add(po)

c.Add(m)
po = New PlaceObject2(m.SpriteId, 1)
po.CharacterType = PlaceType.New
c.Add(po)</code></example>
    </member>
    <member name="M:Aspose.Flash.Shapes.ShapeManager.#ctor">
      <summary>
            Creates a ShapeManager object with no path defined.
            </summary>
      <example>This example shows you how to use ShapeManager constructor<code>[C#]

FlashContainer c = new FlashContainer();
c.Add(new SetBackgroundColor(new RGB(255, 255, 255)));
c.FrameSize = new Rect(0, 0, 1440 * 5, 1440 * 5);

ShapeManager sm = new ShapeManager();
DefineSprite m = new DefineSprite(c.NewIdentifier());

int i = sm.LineStyles.Add(new SolidLine(10, new RGB(0, 0, 0)));
sm.SelectLineStyle(i);

sm.DrawCircle(1440 * 2, 1440 * 2, 1440);

DefineShape2 ds = sm.GetDefineShape(c.NewIdentifier());
c.Add(ds);

PlaceObject2 po = new PlaceObject2(ds.ShapeId, 1);
po.CharacterType = PlaceType.New;
m.Add(po);

c.Add(m);
po = new PlaceObject2(m.SpriteId, 1);
po.CharacterType = PlaceType.New;
c.Add(po);</code><code>[Visual Basic]

Dim c As New FlashContainer()
c.Add(New SetBackgroundColor(New RGB(255, 255, 255)))
c.FrameSize = New Rect(0, 0, 1440 * 5, 1440 * 5)

Dim sm As New ShapeManager()
Dim m As New DefineSprite(c.NewIdentifier())

Dim i As Integer = sm.LineStyles.Add(New SolidLine(10, New RGB(0, 0, 0)))
sm.SelectLineStyle(i)

sm.DrawCircle(1440 * 2, 1440 * 2, 1440)

Dim ds As DefineShape2 = sm.GetDefineShape(c.NewIdentifier())
c.Add(ds)

Dim po As New PlaceObject2(ds.ShapeId, 1)
po.CharacterType = PlaceType.New
m.Add(po)

c.Add(m)
po = New PlaceObject2(m.SpriteId, 1)
po.CharacterType = PlaceType.New
c.Add(po)</code></example>
    </member>
    <member name="M:Aspose.Flash.Shapes.ShapeManager.Insert(System.Int32,Aspose.Flash.Shapes.LineStyle)">
      <summary>
            Insert a line style at the specified position into the collection of line styles.
            </summary>
      <param name="index">Position in the collection of line styles.</param>
      <param name="lineStyle">LineStyle object.</param>
      <example>This example shows you how to use Insert(Int32, LineStyle) method<code>[C#]

FlashContainer c = new FlashContainer();
c.Add(new SetBackgroundColor(new RGB(255, 255, 255)));
c.FrameSize = new Rect(0, 0, 1440 * 5, 1440 * 5);

ShapeManager sm = new ShapeManager();
DefineSprite m = new DefineSprite(c.NewIdentifier());

//adding line styles to linestyles list
int i = sm.LineStyles.Add(new SolidLine(10, new RGB(0, 0, 0)));
//add fill style using add method
sm.Add(new SolidFill(new RGB(0, 255, 0)));
//add line style using add method
sm.Add(new SolidLine(10, new RGB(0, 0, 0)));

//select a line style from srray of line styles
sm.SelectLineStyle(i);

//draw rounded rectangle
sm.DrawRoundedRectangle(2000, 2000, 4000, 4000,40);


//define shape using GetDefineShape method
DefineShape3 ds = sm.GetDefineShape3(c.NewIdentifier());
c.Add(ds);

//get shape containing objects for drawing current path
Shape shape = sm.GetShape();

//getting the bounds of the current path
Rect getRect = sm.GetBounds();

//insert a new fill style at the specified position
sm.Insert(1, new SolidFill(new RGB(255, 0, 0)));

//insert a new line style at the specified position
sm.Insert(1, new SolidLine(50, new RGB(255, 0, 255)));


PlaceObject2 po = new PlaceObject2(ds.ShapeId, 1);
po.CharacterType = PlaceType.New;
m.Add(po);

c.Add(m);
po = new PlaceObject2(m.SpriteId, 1);
po.CharacterType = PlaceType.New;
c.Add(po);</code><code>[Visual Basic]

Dim c As New FlashContainer()
c.Add(New SetBackgroundColor(New RGB(255, 255, 255)))
c.FrameSize = New Rect(0, 0, 1440 * 5, 1440 * 5)

Dim sm As New ShapeManager()
Dim m As New DefineSprite(c.NewIdentifier())

'adding line styles to linestyles list
Dim i As Integer = sm.LineStyles.Add(New SolidLine(10, New RGB(0, 0, 0)))
'add fill style using add method
sm.Add(New SolidFill(New RGB(0, 255, 0)))
'add line style using add method
sm.Add(New SolidLine(10, New RGB(0, 0, 0)))

'select a line style from srray of line styles
sm.SelectLineStyle(i)

'draw rounded rectangle
sm.DrawRoundedRectangle(2000, 2000, 4000, 4000,40)


'define shape using GetDefineShape method
Dim ds As DefineShape3 = sm.GetDefineShape3(c.NewIdentifier())
c.Add(ds)

'get shape containing objects for drawing current path
Dim shape As Shape = sm.GetShape()

'getting the bounds of the current path
Dim getRect As Rect = sm.GetBounds()

'insert a new fill style at the specified position
sm.Insert(1, New SolidFill(New RGB(255, 0, 0)))

'insert a new line style at the specified position
sm.Insert(1, New SolidLine(50, New RGB(255, 0, 255)))


Dim po As New PlaceObject2(ds.ShapeId, 1)
po.CharacterType = PlaceType.New
m.Add(po)

c.Add(m)
po = New PlaceObject2(m.SpriteId, 1)
po.CharacterType = PlaceType.New
c.Add(po)</code></example>
    </member>
    <member name="M:Aspose.Flash.Shapes.ShapeManager.Add(Aspose.Flash.Shapes.LineStyle)">
      <summary>
            Add a line style to the collection of line styles.
            </summary>
      <param name="lineStyle">LineStyle object.</param>
      <example>This example shows you how to use ShapeManager.Add(LineStyle) method<code>[C#]

FlashContainer c = new FlashContainer();
c.Add(new SetBackgroundColor(new RGB(255, 255, 255)));
c.FrameSize = new Rect(0, 0, 1440 * 5, 1440 * 5);

ShapeManager sm = new ShapeManager();
DefineSprite m = new DefineSprite(c.NewIdentifier());

//adding line styles to linestyles list
int i = sm.LineStyles.Add(new SolidLine(10, new RGB(0, 0, 0)));
//add fill style using add method
sm.Add(new SolidFill(new RGB(0, 255, 0)));
//add line style using add method
sm.Add(new SolidLine(10, new RGB(0, 0, 0)));

sm.SelectLineStyle(i);

sm.DrawCircle(1440 * 2, 1440 * 2, 1440);

DefineShape2 ds = sm.GetDefineShape(c.NewIdentifier());
c.Add(ds);

PlaceObject2 po = new PlaceObject2(ds.ShapeId, 1);
po.CharacterType = PlaceType.New;
m.Add(po);

c.Add(m);
po = new PlaceObject2(m.SpriteId, 1);
po.CharacterType = PlaceType.New;
c.Add(po);</code><code>[Visual Basic]

Dim c As New FlashContainer()
c.Add(New SetBackgroundColor(New RGB(255, 255, 255)))
c.FrameSize = New Rect(0, 0, 1440 * 5, 1440 * 5)

Dim sm As New ShapeManager()
Dim m As New DefineSprite(c.NewIdentifier())

'adding line styles to linestyles list
Dim i As Integer = sm.LineStyles.Add(New SolidLine(10, New RGB(0, 0, 0)))
'add fill style using add method
sm.Add(New SolidFill(New RGB(0, 255, 0)))
'add line style using add method
sm.Add(New SolidLine(10, New RGB(0, 0, 0)))

sm.SelectLineStyle(i)

sm.DrawCircle(1440 * 2, 1440 * 2, 1440)

Dim ds As DefineShape2 = sm.GetDefineShape(c.NewIdentifier())
c.Add(ds)

Dim po As New PlaceObject2(ds.ShapeId, 1)
po.CharacterType = PlaceType.New
m.Add(po)

c.Add(m)
po = New PlaceObject2(m.SpriteId, 1)
po.CharacterType = PlaceType.New
c.Add(po)</code></example>
    </member>
    <member name="M:Aspose.Flash.Shapes.ShapeManager.Insert(System.Int32,Aspose.Flash.Shapes.FillStyle)">
      <summary>
            Insert a fill style at the specified position into the collection ofo fill style.
            </summary>
      <param name="index">Position in the collection of fill styles.</param>
      <param name="fillStyle">FillStyle object.</param>
      <example>This example shows you how to use Insert(Int32, FillStyle) method<code>[C#]

FlashContainer c = new FlashContainer();
c.Add(new SetBackgroundColor(new RGB(255, 255, 255)));
c.FrameSize = new Rect(0, 0, 1440 * 5, 1440 * 5);

ShapeManager sm = new ShapeManager();
DefineSprite m = new DefineSprite(c.NewIdentifier());

//adding line styles to linestyles list
int i = sm.LineStyles.Add(new SolidLine(10, new RGB(0, 0, 0)));
//add fill style using add method
sm.Add(new SolidFill(new RGB(0, 255, 0)));
//add line style using add method
sm.Add(new SolidLine(10, new RGB(0, 0, 0)));

//select a line style from srray of line styles
sm.SelectLineStyle(i);

//draw rounded rectangle
sm.DrawRoundedRectangle(2000, 2000, 4000, 4000,40);


//define shape using GetDefineShape method
DefineShape3 ds = sm.GetDefineShape3(c.NewIdentifier());
c.Add(ds);

//get shape containing objects for drawing current path
Shape shape = sm.GetShape();

//getting the bounds of the current path
Rect getRect = sm.GetBounds();

//insert a new fill style at the specified position
sm.Insert(1, new SolidFill(new RGB(255, 0, 0)));

//insert a new line style at the specified position
sm.Insert(1, new SolidLine(50, new RGB(255, 0, 255)));


PlaceObject2 po = new PlaceObject2(ds.ShapeId, 1);
po.CharacterType = PlaceType.New;
m.Add(po);

c.Add(m);
po = new PlaceObject2(m.SpriteId, 1);
po.CharacterType = PlaceType.New;
c.Add(po);</code><code>[Visual Basic]

Dim c As New FlashContainer()
c.Add(New SetBackgroundColor(New RGB(255, 255, 255)))
c.FrameSize = New Rect(0, 0, 1440 * 5, 1440 * 5)

Dim sm As New ShapeManager()
Dim m As New DefineSprite(c.NewIdentifier())

'adding line styles to linestyles list
Dim i As Integer = sm.LineStyles.Add(New SolidLine(10, New RGB(0, 0, 0)))
'add fill style using add method
sm.Add(New SolidFill(New RGB(0, 255, 0)))
'add line style using add method
sm.Add(New SolidLine(10, New RGB(0, 0, 0)))

'select a line style from srray of line styles
sm.SelectLineStyle(i)

'draw rounded rectangle
sm.DrawRoundedRectangle(2000, 2000, 4000, 4000,40)


'define shape using GetDefineShape method
Dim ds As DefineShape3 = sm.GetDefineShape3(c.NewIdentifier())
c.Add(ds)

'get shape containing objects for drawing current path
Dim shape As Shape = sm.GetShape()

'getting the bounds of the current path
Dim getRect As Rect = sm.GetBounds()

'insert a new fill style at the specified position
sm.Insert(1, New SolidFill(New RGB(255, 0, 0)))

'insert a new line style at the specified position
sm.Insert(1, New SolidLine(50, New RGB(255, 0, 255)))


Dim po As New PlaceObject2(ds.ShapeId, 1)
po.CharacterType = PlaceType.New
m.Add(po)

c.Add(m)
po = New PlaceObject2(m.SpriteId, 1)
po.CharacterType = PlaceType.New
c.Add(po)</code></example>
    </member>
    <member name="M:Aspose.Flash.Shapes.ShapeManager.Add(Aspose.Flash.Shapes.FillStyle)">
      <summary>
            Add a fill style to the collection of fill styles.
            </summary>
      <param name="fillStyle">FillStyle object.</param>
      <example>This example shows you how to use ShapeManager.Add(FillStyle) method<code>[C#]

FlashContainer c = new FlashContainer();
c.Add(new SetBackgroundColor(new RGB(255, 255, 255)));
c.FrameSize = new Rect(0, 0, 1440 * 5, 1440 * 5);

ShapeManager sm = new ShapeManager();
DefineSprite m = new DefineSprite(c.NewIdentifier());

//adding line styles to linestyles list
int i = sm.LineStyles.Add(new SolidLine(10, new RGB(0, 0, 0)));
//add fill style using add method
sm.Add(new SolidFill(new RGB(0, 255, 0)));
//add line style using add method
sm.Add(new SolidLine(10, new RGB(0, 0, 0)));

sm.SelectLineStyle(i);

sm.DrawCircle(1440 * 2, 1440 * 2, 1440);

DefineShape2 ds = sm.GetDefineShape(c.NewIdentifier());
c.Add(ds);

PlaceObject2 po = new PlaceObject2(ds.ShapeId, 1);
po.CharacterType = PlaceType.New;
m.Add(po);

c.Add(m);
po = new PlaceObject2(m.SpriteId, 1);
po.CharacterType = PlaceType.New;
c.Add(po);</code><code>[Visual Basic]

Dim c As New FlashContainer()
c.Add(New SetBackgroundColor(New RGB(255, 255, 255)))
c.FrameSize = New Rect(0, 0, 1440 * 5, 1440 * 5)

Dim sm As New ShapeManager()
Dim m As New DefineSprite(c.NewIdentifier())

'adding line styles to linestyles list
Dim i As Integer = sm.LineStyles.Add(New SolidLine(10, New RGB(0, 0, 0)))
'add fill style using add method
sm.Add(New SolidFill(New RGB(0, 255, 0)))
'add line style using add method
sm.Add(New SolidLine(10, New RGB(0, 0, 0)))

sm.SelectLineStyle(i)

sm.DrawCircle(1440 * 2, 1440 * 2, 1440)

Dim ds As DefineShape2 = sm.GetDefineShape(c.NewIdentifier())
c.Add(ds)

Dim po As New PlaceObject2(ds.ShapeId, 1)
po.CharacterType = PlaceType.New
m.Add(po)

c.Add(m)
po = New PlaceObject2(m.SpriteId, 1)
po.CharacterType = PlaceType.New
c.Add(po)</code></example>
    </member>
    <member name="M:Aspose.Flash.Shapes.ShapeManager.SelectLineStyle(System.Int32)">
      <summary>
            Selects the line style to draw the shape.
            </summary>
      <param name="index">Index of the line style to select.</param>
    </member>
    <member name="M:Aspose.Flash.Shapes.ShapeManager.SelectFillStyle(System.Int32)">
      <summary>
            Selects the fill style to fill the shape.
            </summary>
      <param name="index">Index of the fill style to select.</param>
    </member>
    <member name="M:Aspose.Flash.Shapes.ShapeManager.SelectOverlapFillStyle(System.Int32)">
      <summary>
            Selects the fill style to fill overlapping areas of the shape.
            </summary>
      <param name="index">Index of the fill style to select.</param>
    </member>
    <member name="M:Aspose.Flash.Shapes.ShapeManager.SelectStyle(System.Int32,System.Int32)">
      <summary>
            Selects both the line and fill styles to draw and fill the shape.
            </summary>
      <param name="lineIndex">Index of the line style to select.</param>
      <param name="fillIndex">Index of the fill style to select.</param>
    </member>
    <member name="M:Aspose.Flash.Shapes.ShapeManager.SelectStyle(System.Int32,System.Int32,System.Int32)">
      <summary>
            Selects the line, fill and overlap styles.
            </summary>
      <param name="lineIndex">Index of the line style to select.</param>
      <param name="fillIndex">Index of the fill style to select.</param>
      <param name="overlapIndex">Index of the fill style to select for overlapping areas.</param>
    </member>
    <member name="M:Aspose.Flash.Shapes.ShapeManager.GetBounds">
      <summary>
            Returns the bounds of the current path.
            </summary>
      <returns>The Rect object which represents the shape's bounds.</returns>
      <example>This example shows you how to use GetBounds method<code>[C#]

FlashContainer c = new FlashContainer();
c.Add(new SetBackgroundColor(new RGB(255, 255, 255)));
c.FrameSize = new Rect(0, 0, 1440 * 5, 1440 * 5);

ShapeManager sm = new ShapeManager();
DefineSprite m = new DefineSprite(c.NewIdentifier());

//adding line styles to linestyles list
int i = sm.LineStyles.Add(new SolidLine(10, new RGB(0, 0, 0)));
//add fill style using add method
sm.Add(new SolidFill(new RGB(0, 255, 0)));
//add line style using add method
sm.Add(new SolidLine(10, new RGB(0, 0, 0)));

//select a line style from srray of line styles
sm.SelectLineStyle(i);

//draw rounded rectangle
sm.DrawRoundedRectangle(2000, 2000, 4000, 4000,40);


//define shape using GetDefineShape method
DefineShape3 ds = sm.GetDefineShape3(c.NewIdentifier());
c.Add(ds);

//get shape containing objects for drawing current path
Shape shape = sm.GetShape();

//getting the bounds of the current path
Rect getRect = sm.GetBounds();


PlaceObject2 po = new PlaceObject2(ds.ShapeId, 1);
po.CharacterType = PlaceType.New;
m.Add(po);

c.Add(m);
po = new PlaceObject2(m.SpriteId, 1);
po.CharacterType = PlaceType.New;
c.Add(po);</code><code>[Visual Basic]

Dim c As New FlashContainer()
c.Add(New SetBackgroundColor(New RGB(255, 255, 255)))
c.FrameSize = New Rect(0, 0, 1440 * 5, 1440 * 5)

Dim sm As New ShapeManager()
Dim m As New DefineSprite(c.NewIdentifier())

'adding line styles to linestyles list
Dim i As Integer = sm.LineStyles.Add(New SolidLine(10, New RGB(0, 0, 0)))
'add fill style using add method
sm.Add(New SolidFill(New RGB(0, 255, 0)))
'add line style using add method
sm.Add(New SolidLine(10, New RGB(0, 0, 0)))

'select a line style from srray of line styles
sm.SelectLineStyle(i)

'draw rounded rectangle
sm.DrawRoundedRectangle(2000, 2000, 4000, 4000,40)


'define shape using GetDefineShape method
Dim ds As DefineShape3 = sm.GetDefineShape3(c.NewIdentifier())
c.Add(ds)

'get shape containing objects for drawing current path
Dim shape As Shape = sm.GetShape()

'getting the bounds of the current path
Dim getRect As Rect = sm.GetBounds()


Dim po As New PlaceObject2(ds.ShapeId, 1)
po.CharacterType = PlaceType.New
m.Add(po)

c.Add(m)
po = New PlaceObject2(m.SpriteId, 1)
po.CharacterType = PlaceType.New
c.Add(po)</code></example>
    </member>
    <member name="M:Aspose.Flash.Shapes.ShapeManager.GetShape">
      <summary>
            Returns the Shape which contains objects for drawing the current path.
            </summary>
      <returns>Shape object which can contain StraightEdgeRecord,
            CurvedEdgeRecord and StyleChangeRecord objects.</returns>
      <example>This example shows you how to use GetShape method<code>[C#]

FlashContainer c = new FlashContainer();
c.Add(new SetBackgroundColor(new RGB(255, 255, 255)));
c.FrameSize = new Rect(0, 0, 1440 * 5, 1440 * 5);

ShapeManager sm = new ShapeManager();
DefineSprite m = new DefineSprite(c.NewIdentifier());

//adding line styles to linestyles list
int i = sm.LineStyles.Add(new SolidLine(10, new RGB(0, 0, 0)));
//add fill style using add method
sm.Add(new SolidFill(new RGB(0, 255, 0)));
//add line style using add method
sm.Add(new SolidLine(10, new RGB(0, 0, 0)));

//select a line style from srray of line styles
sm.SelectLineStyle(i);

//draw rounded rectangle
sm.DrawRoundedRectangle(2000, 2000, 4000, 4000,40);


//define shape using GetDefineShape method
DefineShape2 ds = sm.GetDefineShape(c.NewIdentifier());
c.Add(ds);

//get shape containing objects for drawing current path
Shape shape = sm.GetShape();

PlaceObject2 po = new PlaceObject2(ds.ShapeId, 1);
po.CharacterType = PlaceType.New;
m.Add(po);

c.Add(m);
po = new PlaceObject2(m.SpriteId, 1);
po.CharacterType = PlaceType.New;
c.Add(po);</code><code>[Visual Basic]

Dim c As New FlashContainer()
c.Add(New SetBackgroundColor(New RGB(255, 255, 255)))
c.FrameSize = New Rect(0, 0, 1440 * 5, 1440 * 5)

Dim sm As New ShapeManager()
Dim m As New DefineSprite(c.NewIdentifier())

'adding line styles to linestyles list
Dim i As Integer = sm.LineStyles.Add(New SolidLine(10, New RGB(0, 0, 0)))
'add fill style using add method
sm.Add(New SolidFill(New RGB(0, 255, 0)))
'add line style using add method
sm.Add(New SolidLine(10, New RGB(0, 0, 0)))

'select a line style from srray of line styles
sm.SelectLineStyle(i)

'draw rounded rectangle
sm.DrawRoundedRectangle(2000, 2000, 4000, 4000,40)


'define shape using GetDefineShape method
Dim ds As DefineShape2 = sm.GetDefineShape(c.NewIdentifier())
c.Add(ds)

'get shape containing objects for drawing current path
Dim shape As Shape = sm.GetShape()

Dim po As New PlaceObject2(ds.ShapeId, 1)
po.CharacterType = PlaceType.New
m.Add(po)

c.Add(m)
po = New PlaceObject2(m.SpriteId, 1)
po.CharacterType = PlaceType.New
c.Add(po)</code></example>
    </member>
    <member name="M:Aspose.Flash.Shapes.ShapeManager.GetDefineShape(System.Int32)">
      <summary>
            Returns the shape which contains the current path and styles.
            </summary>
      <param name="id">Id of the shape.</param>
      <returns>
        <see cref="T:Aspose.Flash.Shapes.DefineShape2" /> object.</returns>
      <example>This example shows you how to use GetDefineShape method<code>[C#]

FlashContainer c = new FlashContainer();
c.Add(new SetBackgroundColor(new RGB(255, 255, 255)));
c.FrameSize = new Rect(0, 0, 1440 * 5, 1440 * 5);

ShapeManager sm = new ShapeManager();
DefineSprite m = new DefineSprite(c.NewIdentifier());

//adding line styles to linestyles list
int i = sm.LineStyles.Add(new SolidLine(10, new RGB(0, 0, 0)));
//add fill style using add method
sm.Add(new SolidFill(new RGB(0, 255, 0)));
//add line style using add method
sm.Add(new SolidLine(10, new RGB(0, 0, 0)));

//select a line style from srray of line styles
sm.SelectLineStyle(i);

//draw rounded rectangle
sm.DrawRoundedRectangle(2000, 2000, 4000, 4000,40);


//define shape using GetDefineShape method
DefineShape2 ds = sm.GetDefineShape(c.NewIdentifier());
c.Add(ds);

PlaceObject2 po = new PlaceObject2(ds.ShapeId, 1);
po.CharacterType = PlaceType.New;
m.Add(po);

c.Add(m);
po = new PlaceObject2(m.SpriteId, 1);
po.CharacterType = PlaceType.New;
c.Add(po);</code><code>[Visual Basic]

Dim c As New FlashContainer()
c.Add(New SetBackgroundColor(New RGB(255, 255, 255)))
c.FrameSize = New Rect(0, 0, 1440 * 5, 1440 * 5)

Dim sm As New ShapeManager()
Dim m As New DefineSprite(c.NewIdentifier())

'adding line styles to linestyles list
Dim i As Integer = sm.LineStyles.Add(New SolidLine(10, New RGB(0, 0, 0)))
'add fill style using add method
sm.Add(New SolidFill(New RGB(0, 255, 0)))
'add line style using add method
sm.Add(New SolidLine(10, New RGB(0, 0, 0)))

'select a line style from srray of line styles
sm.SelectLineStyle(i)

'draw rounded rectangle
sm.DrawRoundedRectangle(2000, 2000, 4000, 4000,40)


'define shape using GetDefineShape method
Dim ds As DefineShape2 = sm.GetDefineShape(c.NewIdentifier())
c.Add(ds)

Dim po As New PlaceObject2(ds.ShapeId, 1)
po.CharacterType = PlaceType.New
m.Add(po)

c.Add(m)
po = New PlaceObject2(m.SpriteId, 1)
po.CharacterType = PlaceType.New
c.Add(po)</code></example>
    </member>
    <member name="M:Aspose.Flash.Shapes.ShapeManager.GetDefineShape3(System.Int32)">
      <summary>
            Returns the shape with transparency which contains the current path and styles.
            </summary>
      <param name="id">Id of the shape.</param>
      <returns>
        <see cref="T:Aspose.Flash.Shapes.DefineShape3" /> object.</returns>
      <example>This example shows you how to use GetDefineShape3 method<code>[C#]

FlashContainer c = new FlashContainer();
c.Add(new SetBackgroundColor(new RGB(255, 255, 255)));
c.FrameSize = new Rect(0, 0, 1440 * 5, 1440 * 5);

ShapeManager sm = new ShapeManager();
DefineSprite m = new DefineSprite(c.NewIdentifier());

//adding line styles to linestyles list
int i = sm.LineStyles.Add(new SolidLine(10, new RGB(0, 0, 0)));
//add fill style using add method
sm.Add(new SolidFill(new RGB(0, 255, 0)));
//add line style using add method
sm.Add(new SolidLine(10, new RGB(0, 0, 0)));

//select a line style from srray of line styles
sm.SelectLineStyle(i);

//draw rounded rectangle
sm.DrawRoundedRectangle(2000, 2000, 4000, 4000,40);


//define shape using GetDefineShape method
DefineShape3 ds = sm.GetDefineShape3(c.NewIdentifier());
c.Add(ds);

//get shape containing objects for drawing current path
Shape shape = sm.GetShape();

PlaceObject2 po = new PlaceObject2(ds.ShapeId, 1);
po.CharacterType = PlaceType.New;
m.Add(po);

c.Add(m);
po = new PlaceObject2(m.SpriteId, 1);
po.CharacterType = PlaceType.New;
c.Add(po);</code><code>[Visual Basic]

Dim c As New FlashContainer()
c.Add(New SetBackgroundColor(New RGB(255, 255, 255)))
c.FrameSize = New Rect(0, 0, 1440 * 5, 1440 * 5)

Dim sm As New ShapeManager()
Dim m As New DefineSprite(c.NewIdentifier())

'adding line styles to linestyles list
Dim i As Integer = sm.LineStyles.Add(New SolidLine(10, New RGB(0, 0, 0)))
'add fill style using add method
sm.Add(New SolidFill(New RGB(0, 255, 0)))
'add line style using add method
sm.Add(New SolidLine(10, New RGB(0, 0, 0)))

'select a line style from srray of line styles
sm.SelectLineStyle(i)

'draw rounded rectangle
sm.DrawRoundedRectangle(2000, 2000, 4000, 4000,40)


'define shape using GetDefineShape method
Dim ds As DefineShape3 = sm.GetDefineShape3(c.NewIdentifier())
c.Add(ds)

'get shape containing objects for drawing current path
Dim shape As Shape = sm.GetShape()

Dim po As New PlaceObject2(ds.ShapeId, 1)
po.CharacterType = PlaceType.New
m.Add(po)

c.Add(m)
po = New PlaceObject2(m.SpriteId, 1)
po.CharacterType = PlaceType.New
c.Add(po)</code></example>
    </member>
    <member name="M:Aspose.Flash.Shapes.ShapeManager.InitiatePath">
      <summary>
            Initialize the new empty path.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Shapes.ShapeManager.EndPath">
      <summary>
            Close the shape by drawing a line from the current point
            to the starting point of the path.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Shapes.ShapeManager.MoveTo(System.Int32,System.Int32,System.Boolean)">
      <summary>
            Move the current drawing point.
            </summary>
      <param name="x">X coordinate.</param>
      <param name="y">Y coordinate.</param>
      <param name="isRelative">Determines whether the coordinates are relative.</param>
      <example>This example shows you how to use MoveTo method<code>[C#]

FlashContainer c = new FlashContainer();
c.Add(new SetBackgroundColor(new RGB(255, 255, 255)));
c.FrameSize = new Rect(0, 0, 1440 * 5, 1440 * 5);

ShapeManager sm = new ShapeManager();
DefineSprite m = new DefineSprite(c.NewIdentifier());

//adding line styles to linestyles list
int i = sm.LineStyles.Add(new SolidLine(10, new RGB(0, 0, 0)));
//add fill style using add method
sm.Add(new SolidFill(new RGB(0, 255, 0)));
//add line style using add method
sm.Add(new SolidLine(10, new RGB(0, 0, 0)));

//select a line style from srray of line styles
sm.SelectLineStyle(i);

//move the current drawing point

sm.MoveTo(-1000, -1000, true);


//draw rounded rectangle
sm.DrawRoundedRectangle(2000, 2000, 4000, 4000,40);


//define shape using GetDefineShape method
DefineShape3 ds = sm.GetDefineShape3(c.NewIdentifier());
c.Add(ds);

//get shape containing objects for drawing current path
Shape shape = sm.GetShape();

//getting the bounds of the current path
Rect getRect = sm.GetBounds();

//insert a new fill style at the specified position
sm.Insert(1, new SolidFill(new RGB(255, 0, 0)));

//insert a new line style at the specified position
sm.Insert(1, new SolidLine(50, new RGB(255, 0, 255)));


PlaceObject2 po = new PlaceObject2(ds.ShapeId, 1);
po.CharacterType = PlaceType.New;
m.Add(po);

c.Add(m);
po = new PlaceObject2(m.SpriteId, 1);
po.CharacterType = PlaceType.New;
c.Add(po);</code><code>[Visual Basic]

Dim c As New FlashContainer()
c.Add(New SetBackgroundColor(New RGB(255, 255, 255)))
c.FrameSize = New Rect(0, 0, 1440 * 5, 1440 * 5)

Dim sm As New ShapeManager()
Dim m As New DefineSprite(c.NewIdentifier())

'adding line styles to linestyles list
Dim i As Integer = sm.LineStyles.Add(New SolidLine(10, New RGB(0, 0, 0)))
'add fill style using add method
sm.Add(New SolidFill(New RGB(0, 255, 0)))
'add line style using add method
sm.Add(New SolidLine(10, New RGB(0, 0, 0)))

'select a line style from srray of line styles
sm.SelectLineStyle(i)

'move the current drawing point

sm.MoveTo(-1000, -1000, True)


'draw rounded rectangle
sm.DrawRoundedRectangle(2000, 2000, 4000, 4000,40)


'define shape using GetDefineShape method
Dim ds As DefineShape3 = sm.GetDefineShape3(c.NewIdentifier())
c.Add(ds)

'get shape containing objects for drawing current path
Dim shape As Shape = sm.GetShape()

'getting the bounds of the current path
Dim getRect As Rect = sm.GetBounds()

'insert a new fill style at the specified position
sm.Insert(1, New SolidFill(New RGB(255, 0, 0)))

'insert a new line style at the specified position
sm.Insert(1, New SolidLine(50, New RGB(255, 0, 255)))


Dim po As New PlaceObject2(ds.ShapeId, 1)
po.CharacterType = PlaceType.New
m.Add(po)

c.Add(m)
po = New PlaceObject2(m.SpriteId, 1)
po.CharacterType = PlaceType.New
c.Add(po)</code></example>
    </member>
    <member name="M:Aspose.Flash.Shapes.ShapeManager.DrawLine(System.Int32,System.Int32,System.Boolean)">
      <summary>
            Draw a line from the current drawing point to the cpecified point.
            </summary>
      <param name="x">X coordinate of the end point.</param>
      <param name="y">Y coordinate of the end point.</param>
      <param name="isRelative">Determines whether the coordinates are relative.</param>
      <example>This example shows you how to use DrawLine method<code>[C#]

FlashContainer c = new FlashContainer();
c.Add(new SetBackgroundColor(new RGB(255, 255, 255)));
c.FrameSize = new Rect(0, 0, 1440 * 5, 1440 * 5);

ShapeManager sm = new ShapeManager();
DefineSprite m = new DefineSprite(c.NewIdentifier());

//adding line styles to linestyles list
int i = sm.LineStyles.Add(new SolidLine(10, new RGB(0, 0, 0)));
//add fill style using add method
sm.Add(new SolidFill(new RGB(0, 255, 0)));
//add line style using add method
sm.Add(new SolidLine(10, new RGB(0, 0, 0)));

//select a line style from srray of line styles
sm.SelectLineStyle(i);

//draw line
sm.DrawLine(2000, 2000, true);

DefineShape2 ds = sm.GetDefineShape(c.NewIdentifier());
c.Add(ds);

PlaceObject2 po = new PlaceObject2(ds.ShapeId, 1);
po.CharacterType = PlaceType.New;
m.Add(po);

c.Add(m);
po = new PlaceObject2(m.SpriteId, 1);
po.CharacterType = PlaceType.New;
c.Add(po);</code><code>[Visual Basic]

Dim c As New FlashContainer()
c.Add(New SetBackgroundColor(New RGB(255, 255, 255)))
c.FrameSize = New Rect(0, 0, 1440 * 5, 1440 * 5)

Dim sm As New ShapeManager()
Dim m As New DefineSprite(c.NewIdentifier())

'adding line styles to linestyles list
Dim i As Integer = sm.LineStyles.Add(New SolidLine(10, New RGB(0, 0, 0)))
'add fill style using add method
sm.Add(New SolidFill(New RGB(0, 255, 0)))
'add line style using add method
sm.Add(New SolidLine(10, New RGB(0, 0, 0)))

'select a line style from srray of line styles
sm.SelectLineStyle(i)

'draw line
sm.DrawLine(2000, 2000, True)

Dim ds As DefineShape2 = sm.GetDefineShape(c.NewIdentifier())
c.Add(ds)

Dim po As New PlaceObject2(ds.ShapeId, 1)
po.CharacterType = PlaceType.New
m.Add(po)

c.Add(m)
po = New PlaceObject2(m.SpriteId, 1)
po.CharacterType = PlaceType.New
c.Add(po)</code></example>
    </member>
    <member name="M:Aspose.Flash.Shapes.ShapeManager.DrawCurve(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
      <summary>
            Draw a quadratic bezier curve from the current deawing point
            to the specified point and with defined control point.
            </summary>
      <param name="ctrlX">X coordinate of the control point.</param>
      <param name="ctrlY">Y coordinate of the control point.</param>
      <param name="endX">X coordinate of the end point of the curve.</param>
      <param name="endY">Y coordinate of the end point of the curve.</param>
      <param name="isRelative">Determines whether the coordinates are relative.</param>
      <example>This example shows you how to use DrawCurve(Int32, Int32, Int32, Int32, Boolean) method<code>[C#]

FlashContainer c = new FlashContainer();
c.Add(new SetBackgroundColor(new RGB(255, 255, 255)));
c.FrameSize = new Rect(0, 0, 1440 * 5, 1440 * 5);

ShapeManager sm = new ShapeManager();
DefineSprite m = new DefineSprite(c.NewIdentifier());

//adding line styles to linestyles list
int i = sm.LineStyles.Add(new SolidLine(10, new RGB(0, 0, 0)));
//add fill style using add method
sm.Add(new SolidFill(new RGB(0, 255, 0)));
//add line style using add method
sm.Add(new SolidLine(10, new RGB(0, 0, 0)));

//select a line style from srray of line styles
sm.SelectLineStyle(i);

//draw Curve
sm.DrawCurve(1500, 1500, 2000, 2000, true);

DefineShape2 ds = sm.GetDefineShape(c.NewIdentifier());
c.Add(ds);

PlaceObject2 po = new PlaceObject2(ds.ShapeId, 1);
po.CharacterType = PlaceType.New;
m.Add(po);

c.Add(m);
po = new PlaceObject2(m.SpriteId, 1);
po.CharacterType = PlaceType.New;
c.Add(po);</code><code>[Visual Basic]

Dim c As New FlashContainer()
c.Add(New SetBackgroundColor(New RGB(255, 255, 255)))
c.FrameSize = New Rect(0, 0, 1440 * 5, 1440 * 5)

Dim sm As New ShapeManager()
Dim m As New DefineSprite(c.NewIdentifier())

'adding line styles to linestyles list
Dim i As Integer = sm.LineStyles.Add(New SolidLine(10, New RGB(0, 0, 0)))
'add fill style using add method
sm.Add(New SolidFill(New RGB(0, 255, 0)))
'add line style using add method
sm.Add(New SolidLine(10, New RGB(0, 0, 0)))

'select a line style from srray of line styles
sm.SelectLineStyle(i)

'draw Curve
sm.DrawCurve(1500, 1500, 2000, 2000, True)

Dim ds As DefineShape2 = sm.GetDefineShape(c.NewIdentifier())
c.Add(ds)

Dim po As New PlaceObject2(ds.ShapeId, 1)
po.CharacterType = PlaceType.New
m.Add(po)

c.Add(m)
po = New PlaceObject2(m.SpriteId, 1)
po.CharacterType = PlaceType.New
c.Add(po)</code></example>
    </member>
    <member name="M:Aspose.Flash.Shapes.ShapeManager.DrawCurve(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
      <summary>
            Draw a cubic bezier curve from the current drawing point
            to the specified point and with 2 defines control points.
            </summary>
      <param name="ctrlX1">X coordinate of the first control point.</param>
      <param name="ctrlY1">Y coordinate of the first control point.</param>
      <param name="ctrlX2">X coordinate of the second control point.</param>
      <param name="ctrlY2">Y coordinate of the second control point.</param>
      <param name="endX">X coordinate of the end point of the curve.</param>
      <param name="endY">Y coordinate of the end point of the curve.</param>
      <param name="isRelative">Determines whether the coordinates are relative.</param>
      <example>This example shows you how to use DrawCurve(Int32, Int32, Int32, Int32, Int32, Int32, Boolean) method<code>[C#]

FlashContainer c = new FlashContainer();
c.Add(new SetBackgroundColor(new RGB(255, 255, 255)));
c.FrameSize = new Rect(0, 0, 1440 * 5, 1440 * 5);

ShapeManager sm = new ShapeManager();
DefineSprite m = new DefineSprite(c.NewIdentifier());

//adding line styles to linestyles list
int i = sm.LineStyles.Add(new SolidLine(10, new RGB(0, 0, 0)));
//add fill style using add method
sm.Add(new SolidFill(new RGB(0, 255, 0)));
//add line style using add method
sm.Add(new SolidLine(10, new RGB(0, 0, 0)));

//select a line style from srray of line styles
sm.SelectLineStyle(i);

//draw Curve
sm.DrawCurve(1500, 1500, 1700,1700, 2000, 2000, true);

DefineShape2 ds = sm.GetDefineShape(c.NewIdentifier());
c.Add(ds);

PlaceObject2 po = new PlaceObject2(ds.ShapeId, 1);
po.CharacterType = PlaceType.New;
m.Add(po);

c.Add(m);
po = new PlaceObject2(m.SpriteId, 1);
po.CharacterType = PlaceType.New;
c.Add(po);</code><code>[Visual Basic]

Dim c As New FlashContainer()
c.Add(New SetBackgroundColor(New RGB(255, 255, 255)))
c.FrameSize = New Rect(0, 0, 1440 * 5, 1440 * 5)

Dim sm As New ShapeManager()
Dim m As New DefineSprite(c.NewIdentifier())

'adding line styles to linestyles list
Dim i As Integer = sm.LineStyles.Add(New SolidLine(10, New RGB(0, 0, 0)))
'add fill style using add method
sm.Add(New SolidFill(New RGB(0, 255, 0)))
'add line style using add method
sm.Add(New SolidLine(10, New RGB(0, 0, 0)))

'select a line style from srray of line styles
sm.SelectLineStyle(i)

'draw Curve
sm.DrawCurve(1500, 1500, 1700,1700, 2000, 2000, True)

Dim ds As DefineShape2 = sm.GetDefineShape(c.NewIdentifier())
c.Add(ds)

Dim po As New PlaceObject2(ds.ShapeId, 1)
po.CharacterType = PlaceType.New
m.Add(po)

c.Add(m)
po = New PlaceObject2(m.SpriteId, 1)
po.CharacterType = PlaceType.New
c.Add(po)</code></example>
    </member>
    <member name="M:Aspose.Flash.Shapes.ShapeManager.DrawRectangle(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Draw a rectangle.
            </summary>
      <param name="x">X coordinate of the upper-left corner of the rectangle.</param>
      <param name="y">Y coordinate of the upper-left corner of the rectangle.</param>
      <param name="width">Width of the rectangle.</param>
      <param name="height">Height of the rectangle.</param>
      <example>This example shows you how to use DrawRectangle(Int32, Int32, Int32, Int32) method<code>[C#]

FlashContainer c = new FlashContainer();
c.Add(new SetBackgroundColor(new RGB(255, 255, 255)));
c.FrameSize = new Rect(0, 0, 1440 * 5, 1440 * 5);

ShapeManager sm = new ShapeManager();
DefineSprite m = new DefineSprite(c.NewIdentifier());

//adding line styles to linestyles list
int i = sm.LineStyles.Add(new SolidLine(10, new RGB(0, 0, 0)));
//add fill style using add method
sm.Add(new SolidFill(new RGB(0, 255, 0)));
//add line style using add method
sm.Add(new SolidLine(10, new RGB(0, 0, 0)));

//select a line style from srray of line styles
sm.SelectLineStyle(i);

//draw rectangle

sm.DrawRectangle(2000, 2000, 4000, 4000);

DefineShape2 ds = sm.GetDefineShape(c.NewIdentifier());
c.Add(ds);

PlaceObject2 po = new PlaceObject2(ds.ShapeId, 1);
po.CharacterType = PlaceType.New;
m.Add(po);

c.Add(m);
po = new PlaceObject2(m.SpriteId, 1);
po.CharacterType = PlaceType.New;
c.Add(po);</code><code>[Visual Basic]

Dim c As New FlashContainer()
c.Add(New SetBackgroundColor(New RGB(255, 255, 255)))
c.FrameSize = New Rect(0, 0, 1440 * 5, 1440 * 5)

Dim sm As New ShapeManager()
Dim m As New DefineSprite(c.NewIdentifier())

'adding line styles to linestyles list
Dim i As Integer = sm.LineStyles.Add(New SolidLine(10, New RGB(0, 0, 0)))
'add fill style using add method
sm.Add(New SolidFill(New RGB(0, 255, 0)))
'add line style using add method
sm.Add(New SolidLine(10, New RGB(0, 0, 0)))

'select a line style from srray of line styles
sm.SelectLineStyle(i)

'draw rectangle

sm.DrawRectangle(2000, 2000, 4000, 4000)

Dim ds As DefineShape2 = sm.GetDefineShape(c.NewIdentifier())
c.Add(ds)

Dim po As New PlaceObject2(ds.ShapeId, 1)
po.CharacterType = PlaceType.New
m.Add(po)

c.Add(m)
po = New PlaceObject2(m.SpriteId, 1)
po.CharacterType = PlaceType.New
c.Add(po)</code></example>
    </member>
    <member name="M:Aspose.Flash.Shapes.ShapeManager.DrawRectangle(System.Drawing.Rectangle)">
      <summary>
            Draw a rectangle.
            </summary>
      <param name="rect">Rectangle coordinates. See <see cref="T:System.Drawing.Rectangle" />.</param>
      <example>This example shows you how to use DrawRectangle(Rectangle) method<code>[C#]

FlashContainer c = new FlashContainer();
c.Add(new SetBackgroundColor(new RGB(255, 255, 255)));
c.FrameSize = new Rect(0, 0, 1440 * 5, 1440 * 5);

ShapeManager sm = new ShapeManager();
DefineSprite m = new DefineSprite(c.NewIdentifier());

//adding line styles to linestyles list
int i = sm.LineStyles.Add(new SolidLine(10, new RGB(0, 0, 0)));
//add fill style using add method
sm.Add(new SolidFill(new RGB(0, 255, 0)));
//add line style using add method
sm.Add(new SolidLine(10, new RGB(0, 0, 0)));

//select a line style from srray of line styles
sm.SelectLineStyle(i);

//draw rectangle

sm.DrawRectangle(new Rectangle(2000, 2000, 4000, 4000));

DefineShape2 ds = sm.GetDefineShape(c.NewIdentifier());
c.Add(ds);

PlaceObject2 po = new PlaceObject2(ds.ShapeId, 1);
po.CharacterType = PlaceType.New;
m.Add(po);

c.Add(m);
po = new PlaceObject2(m.SpriteId, 1);
po.CharacterType = PlaceType.New;
c.Add(po);</code><code>[Visual Basic]

Dim c As New FlashContainer()
c.Add(New SetBackgroundColor(New RGB(255, 255, 255)))
c.FrameSize = New Rect(0, 0, 1440 * 5, 1440 * 5)

Dim sm As New ShapeManager()
Dim m As New DefineSprite(c.NewIdentifier())

'adding line styles to linestyles list
Dim i As Integer = sm.LineStyles.Add(New SolidLine(10, New RGB(0, 0, 0)))
'add fill style using add method
sm.Add(New SolidFill(New RGB(0, 255, 0)))
'add line style using add method
sm.Add(New SolidLine(10, New RGB(0, 0, 0)))

'select a line style from srray of line styles
sm.SelectLineStyle(i)

'draw rectangle

sm.DrawRectangle(New Rectangle(2000, 2000, 4000, 4000))

Dim ds As DefineShape2 = sm.GetDefineShape(c.NewIdentifier())
c.Add(ds)

Dim po As New PlaceObject2(ds.ShapeId, 1)
po.CharacterType = PlaceType.New
m.Add(po)

c.Add(m)
po = New PlaceObject2(m.SpriteId, 1)
po.CharacterType = PlaceType.New
c.Add(po)</code></example>
    </member>
    <member name="M:Aspose.Flash.Shapes.ShapeManager.DrawRoundedRectangle(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Draw a rectangle with rounded corners.
            </summary>
      <param name="x">X coordinate of the upper-left corner of the rectangle.</param>
      <param name="y">Y coordinate of the upper-left corner of the rectangle.</param>
      <param name="width">Width of the rectangle.</param>
      <param name="height">Height of the rectangle.</param>
      <param name="radius">Radius of the circle used to draw the corners.</param>
      <example>This example shows you how to use DrawRoundedRectangle(Int32, Int32, Int32, Int32, Int32) method<code>[C#]

FlashContainer c = new FlashContainer();
c.Add(new SetBackgroundColor(new RGB(255, 255, 255)));
c.FrameSize = new Rect(0, 0, 1440 * 5, 1440 * 5);

ShapeManager sm = new ShapeManager();
DefineSprite m = new DefineSprite(c.NewIdentifier());

//adding line styles to linestyles list
int i = sm.LineStyles.Add(new SolidLine(10, new RGB(0, 0, 0)));
//add fill style using add method
sm.Add(new SolidFill(new RGB(0, 255, 0)));
//add line style using add method
sm.Add(new SolidLine(10, new RGB(0, 0, 0)));

//select a line style from srray of line styles
sm.SelectLineStyle(i);

//draw rounded rectangle

sm.DrawRoundedRectangle(2000, 2000, 4000, 4000,40);

DefineShape2 ds = sm.GetDefineShape(c.NewIdentifier());
c.Add(ds);

PlaceObject2 po = new PlaceObject2(ds.ShapeId, 1);
po.CharacterType = PlaceType.New;
m.Add(po);

c.Add(m);
po = new PlaceObject2(m.SpriteId, 1);
po.CharacterType = PlaceType.New;
c.Add(po);</code><code>[Visual Basic]

Dim c As New FlashContainer()
c.Add(New SetBackgroundColor(New RGB(255, 255, 255)))
c.FrameSize = New Rect(0, 0, 1440 * 5, 1440 * 5)

Dim sm As New ShapeManager()
Dim m As New DefineSprite(c.NewIdentifier())

'adding line styles to linestyles list
Dim i As Integer = sm.LineStyles.Add(New SolidLine(10, New RGB(0, 0, 0)))
'add fill style using add method
sm.Add(New SolidFill(New RGB(0, 255, 0)))
'add line style using add method
sm.Add(New SolidLine(10, New RGB(0, 0, 0)))

'select a line style from srray of line styles
sm.SelectLineStyle(i)

'draw rounded rectangle

sm.DrawRoundedRectangle(2000, 2000, 4000, 4000,40)

Dim ds As DefineShape2 = sm.GetDefineShape(c.NewIdentifier())
c.Add(ds)

Dim po As New PlaceObject2(ds.ShapeId, 1)
po.CharacterType = PlaceType.New
m.Add(po)

c.Add(m)
po = New PlaceObject2(m.SpriteId, 1)
po.CharacterType = PlaceType.New
c.Add(po)</code></example>
    </member>
    <member name="M:Aspose.Flash.Shapes.ShapeManager.DrawRoundedRectangle(System.Drawing.Rectangle,System.Int32)">
      <summary>
            Draw a rectangle with rounded corners.
            </summary>
      <param name="rect">Rectangle coordinates. See <see cref="T:System.Drawing.Rectangle" />.</param>
      <param name="radius">Radius of the circle used to draw the corners.</param>
      <example>This example shows you how to use DrawRoundedRectangle(Rectangle,Int32) method<code>[C#]

FlashContainer c = new FlashContainer();
c.Add(new SetBackgroundColor(new RGB(255, 255, 255)));
c.FrameSize = new Rect(0, 0, 1440 * 5, 1440 * 5);

ShapeManager sm = new ShapeManager();
DefineSprite m = new DefineSprite(c.NewIdentifier());

//adding line styles to linestyles list
int i = sm.LineStyles.Add(new SolidLine(10, new RGB(0, 0, 0)));
//add fill style using add method
sm.Add(new SolidFill(new RGB(0, 255, 0)));
//add line style using add method
sm.Add(new SolidLine(10, new RGB(0, 0, 0)));

//select a line style from srray of line styles
sm.SelectLineStyle(i);

//draw rounded rectangle

sm.DrawRoundedRectangle(new Rectangle(2000, 2000, 4000, 4000),40);

DefineShape2 ds = sm.GetDefineShape(c.NewIdentifier());
c.Add(ds);

PlaceObject2 po = new PlaceObject2(ds.ShapeId, 1);
po.CharacterType = PlaceType.New;
m.Add(po);

c.Add(m);
po = new PlaceObject2(m.SpriteId, 1);
po.CharacterType = PlaceType.New;
c.Add(po);</code><code>[Visual Basic]

Dim c As New FlashContainer()
c.Add(New SetBackgroundColor(New RGB(255, 255, 255)))
c.FrameSize = New Rect(0, 0, 1440 * 5, 1440 * 5)

Dim sm As New ShapeManager()
Dim m As New DefineSprite(c.NewIdentifier())

'adding line styles to linestyles list
Dim i As Integer = sm.LineStyles.Add(New SolidLine(10, New RGB(0, 0, 0)))
'add fill style using add method
sm.Add(New SolidFill(New RGB(0, 255, 0)))
'add line style using add method
sm.Add(New SolidLine(10, New RGB(0, 0, 0)))

'select a line style from srray of line styles
sm.SelectLineStyle(i)

'draw rounded rectangle

sm.DrawRoundedRectangle(New Rectangle(2000, 2000, 4000, 4000),40)

Dim ds As DefineShape2 = sm.GetDefineShape(c.NewIdentifier())
c.Add(ds)

Dim po As New PlaceObject2(ds.ShapeId, 1)
po.CharacterType = PlaceType.New
m.Add(po)

c.Add(m)
po = New PlaceObject2(m.SpriteId, 1)
po.CharacterType = PlaceType.New
c.Add(po)</code></example>
    </member>
    <member name="M:Aspose.Flash.Shapes.ShapeManager.DrawEllipse(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Draw an ellipse. 
            </summary>
      <param name="x">X coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.</param>
      <param name="y">Y coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.</param>
      <param name="width">Width of the bounding rectangle that defines the ellipse.</param>
      <param name="height">Height of the bounding rectangle that defines the ellipse.</param>
      <example>This example shows you how to use DrawEllipse(Int32, Int32, Int32, Int32) method<code>[C#]

FlashContainer c = new FlashContainer();
c.Add(new SetBackgroundColor(new RGB(255, 255, 255)));
c.FrameSize = new Rect(0, 0, 1440 * 5, 1440 * 5);

ShapeManager sm = new ShapeManager();
DefineSprite m = new DefineSprite(c.NewIdentifier());

//adding line styles to linestyles list
int i = sm.LineStyles.Add(new SolidLine(10, new RGB(0, 0, 0)));
//add fill style using add method
sm.Add(new SolidFill(new RGB(0, 255, 0)));
//add line style using add method
sm.Add(new SolidLine(10, new RGB(0, 0, 0)));

//select a line style from srray of line styles
sm.SelectLineStyle(i);

//draw Ellipse
sm.DrawEllipse(2000, 2000, 1000, 2000);

DefineShape2 ds = sm.GetDefineShape(c.NewIdentifier());
c.Add(ds);

PlaceObject2 po = new PlaceObject2(ds.ShapeId, 1);
po.CharacterType = PlaceType.New;
m.Add(po);

c.Add(m);
po = new PlaceObject2(m.SpriteId, 1);
po.CharacterType = PlaceType.New;
c.Add(po);</code><code>[Visual Basic]

Dim c As New FlashContainer()
c.Add(New SetBackgroundColor(New RGB(255, 255, 255)))
c.FrameSize = New Rect(0, 0, 1440 * 5, 1440 * 5)

Dim sm As New ShapeManager()
Dim m As New DefineSprite(c.NewIdentifier())

'adding line styles to linestyles list
Dim i As Integer = sm.LineStyles.Add(New SolidLine(10, New RGB(0, 0, 0)))
'add fill style using add method
sm.Add(New SolidFill(New RGB(0, 255, 0)))
'add line style using add method
sm.Add(New SolidLine(10, New RGB(0, 0, 0)))

'select a line style from srray of line styles
sm.SelectLineStyle(i)

'draw Ellipse
sm.DrawEllipse(2000, 2000, 1000, 2000)

Dim ds As DefineShape2 = sm.GetDefineShape(c.NewIdentifier())
c.Add(ds)

Dim po As New PlaceObject2(ds.ShapeId, 1)
po.CharacterType = PlaceType.New
m.Add(po)

c.Add(m)
po = New PlaceObject2(m.SpriteId, 1)
po.CharacterType = PlaceType.New
c.Add(po)</code></example>
    </member>
    <member name="M:Aspose.Flash.Shapes.ShapeManager.DrawEllipse(System.Drawing.Rectangle)">
      <summary>
            Draw an ellipse.
            </summary>
      <param name="rect">Bounding rectangle that defines the ellipse.</param>
      <example>This example shows you how to use DrawEllipse(Rectangle) method<code>[C#]

FlashContainer c = new FlashContainer();
c.Add(new SetBackgroundColor(new RGB(255, 255, 255)));
c.FrameSize = new Rect(0, 0, 1440 * 5, 1440 * 5);

ShapeManager sm = new ShapeManager();
DefineSprite m = new DefineSprite(c.NewIdentifier());

//adding line styles to linestyles list
int i = sm.LineStyles.Add(new SolidLine(10, new RGB(0, 0, 0)));
//add fill style using add method
sm.Add(new SolidFill(new RGB(0, 255, 0)));
//add line style using add method
sm.Add(new SolidLine(10, new RGB(0, 0, 0)));

//select a line style from srray of line styles
sm.SelectLineStyle(i);

//draw Ellipse
Rectangle rect = new Rectangle (2000, 2000, 1000, 2000);
sm.DrawEllipse(rect);

DefineShape2 ds = sm.GetDefineShape(c.NewIdentifier());
c.Add(ds);

PlaceObject2 po = new PlaceObject2(ds.ShapeId, 1);
po.CharacterType = PlaceType.New;
m.Add(po);

c.Add(m);
po = new PlaceObject2(m.SpriteId, 1);
po.CharacterType = PlaceType.New;
c.Add(po);</code><code>[Visual Basic]

Dim c As New FlashContainer()
c.Add(New SetBackgroundColor(New RGB(255, 255, 255)))
c.FrameSize = New Rect(0, 0, 1440 * 5, 1440 * 5)

Dim sm As New ShapeManager()
Dim m As New DefineSprite(c.NewIdentifier())

'adding line styles to linestyles list
Dim i As Integer = sm.LineStyles.Add(New SolidLine(10, New RGB(0, 0, 0)))
'add fill style using add method
sm.Add(New SolidFill(New RGB(0, 255, 0)))
'add line style using add method
sm.Add(New SolidLine(10, New RGB(0, 0, 0)))

'select a line style from srray of line styles
sm.SelectLineStyle(i)

'draw Ellipse
Dim rect As New Rectangle(2000, 2000, 1000, 2000)
sm.DrawEllipse(rect)

Dim ds As DefineShape2 = sm.GetDefineShape(c.NewIdentifier())
c.Add(ds)

Dim po As New PlaceObject2(ds.ShapeId, 1)
po.CharacterType = PlaceType.New
m.Add(po)

c.Add(m)
po = New PlaceObject2(m.SpriteId, 1)
po.CharacterType = PlaceType.New
c.Add(po)</code></example>
    </member>
    <member name="M:Aspose.Flash.Shapes.ShapeManager.DrawCircle(System.Int32,System.Int32,System.Int32)">
      <summary>
            Draw a circle.
            </summary>
      <param name="x">X coordinate of the center of the circle.</param>
      <param name="y">Y coordinate of the center of the circle.</param>
      <param name="r">Radius of the circle.</param>
      <example>This example shows you how to use DrawCircle method<code>[C#]

FlashContainer c = new FlashContainer();
c.Add(new SetBackgroundColor(new RGB(255, 255, 255)));
c.FrameSize = new Rect(0, 0, 1440 * 5, 1440 * 5);

ShapeManager sm = new ShapeManager();
DefineSprite m = new DefineSprite(c.NewIdentifier());

//adding line styles to linestyles list
int i = sm.LineStyles.Add(new SolidLine(10, new RGB(0, 0, 0)));
//add fill style using add method
sm.Add(new SolidFill(new RGB(0, 255, 0)));
//add line style using add method
sm.Add(new SolidLine(10, new RGB(0, 0, 0)));

//select a line style from srray of line styles
sm.SelectLineStyle(i);

//draw circle
sm.DrawCircle(1440 * 2, 1440 * 2, 1440);

DefineShape2 ds = sm.GetDefineShape(c.NewIdentifier());
c.Add(ds);

PlaceObject2 po = new PlaceObject2(ds.ShapeId, 1);
po.CharacterType = PlaceType.New;
m.Add(po);

c.Add(m);
po = new PlaceObject2(m.SpriteId, 1);
po.CharacterType = PlaceType.New;
c.Add(po);</code><code>[Visual Basic]

Dim c As New FlashContainer()
c.Add(New SetBackgroundColor(New RGB(255, 255, 255)))
c.FrameSize = New Rect(0, 0, 1440 * 5, 1440 * 5)

Dim sm As New ShapeManager()
Dim m As New DefineSprite(c.NewIdentifier())

'adding line styles to linestyles list
Dim i As Integer = sm.LineStyles.Add(New SolidLine(10, New RGB(0, 0, 0)))
'add fill style using add method
sm.Add(New SolidFill(New RGB(0, 255, 0)))
'add line style using add method
sm.Add(New SolidLine(10, New RGB(0, 0, 0)))

'select a line style from srray of line styles
sm.SelectLineStyle(i)

'draw circle
sm.DrawCircle(1440 * 2, 1440 * 2, 1440)

Dim ds As DefineShape2 = sm.GetDefineShape(c.NewIdentifier())
c.Add(ds)

Dim po As New PlaceObject2(ds.ShapeId, 1)
po.CharacterType = PlaceType.New
m.Add(po)

c.Add(m)
po = New PlaceObject2(m.SpriteId, 1)
po.CharacterType = PlaceType.New
c.Add(po)</code></example>
    </member>
    <member name="M:Aspose.Flash.Shapes.ShapeManager.DrawPolygon(System.Int32[])">
      <summary>
            Draw a polygon.
            </summary>
      <param name="points">Array of coordinate pairs.</param>
      <example>This example shows you how to use DrawPolygon(Int32[]) method<code>[C#]

FlashContainer c = new FlashContainer();
c.Add(new SetBackgroundColor(new RGB(255, 255, 255)));
c.FrameSize = new Rect(0, 0, 1440 * 5, 1440 * 5);

ShapeManager sm = new ShapeManager();
DefineSprite m = new DefineSprite(c.NewIdentifier());

//adding line styles to linestyles list
int i = sm.LineStyles.Add(new SolidLine(10, new RGB(0, 0, 0)));
//add fill style using add method
sm.Add(new SolidFill(new RGB(0, 255, 0)));
//add line style using add method
sm.Add(new SolidLine(10, new RGB(0, 0, 0)));

//select a line style from srray of line styles
sm.SelectLineStyle(i);

//draw pollygon


sm.DrawPolygon(new Int32[6] { 2000, 2000, 3000, 3000, 15000, 1500 });

DefineShape2 ds = sm.GetDefineShape(c.NewIdentifier());
c.Add(ds);

PlaceObject2 po = new PlaceObject2(ds.ShapeId, 1);
po.CharacterType = PlaceType.New;
m.Add(po);

c.Add(m);
po = new PlaceObject2(m.SpriteId, 1);
po.CharacterType = PlaceType.New;
c.Add(po);</code><code>[Visual Basic]

Dim c As New FlashContainer()
c.Add(New SetBackgroundColor(New RGB(255, 255, 255)))
c.FrameSize = New Rect(0, 0, 1440 * 5, 1440 * 5)

Dim sm As New ShapeManager()
Dim m As New DefineSprite(c.NewIdentifier())

'adding line styles to linestyles list
Dim i As Integer = sm.LineStyles.Add(New SolidLine(10, New RGB(0, 0, 0)))
'add fill style using add method
sm.Add(New SolidFill(New RGB(0, 255, 0)))
'add line style using add method
sm.Add(New SolidLine(10, New RGB(0, 0, 0)))

'select a line style from srray of line styles
sm.SelectLineStyle(i)

'draw pollygon


sm.DrawPolygon(New Int32(5) { 2000, 2000, 3000, 3000, 15000, 1500 })

Dim ds As DefineShape2 = sm.GetDefineShape(c.NewIdentifier())
c.Add(ds)

Dim po As New PlaceObject2(ds.ShapeId, 1)
po.CharacterType = PlaceType.New
m.Add(po)

c.Add(m)
po = New PlaceObject2(m.SpriteId, 1)
po.CharacterType = PlaceType.New
c.Add(po)</code></example>
    </member>
    <member name="M:Aspose.Flash.Shapes.ShapeManager.DrawPolygon(System.Drawing.Point[])">
      <summary>
            Draw a polygon.
            </summary>
      <param name="points">Array of points. See <see cref="T:System.Drawing.Point" />.</param>
      <example>This example shows you how to use DrawPolygon(Point[]) method<code>[C#]

FlashContainer c = new FlashContainer();
c.Add(new SetBackgroundColor(new RGB(255, 255, 255)));
c.FrameSize = new Rect(0, 0, 1440 * 5, 1440 * 5);

ShapeManager sm = new ShapeManager();
DefineSprite m = new DefineSprite(c.NewIdentifier());

//adding line styles to linestyles list
int i = sm.LineStyles.Add(new SolidLine(10, new RGB(0, 0, 0)));
//add fill style using add method
sm.Add(new SolidFill(new RGB(0, 255, 0)));
//add line style using add method
sm.Add(new SolidLine(10, new RGB(0, 0, 0)));

//select a line style from srray of line styles
sm.SelectLineStyle(i);

//draw pollygon
Point p;
Point[] pts = new Point[3];
p = new Point(2000, 2000);
pts[0] = p;
p = new Point(3000, 3000);
pts[1] = p;
p = new Point(1500, 1500);
pts[2] = p;

sm.DrawPolygon(pts);

DefineShape2 ds = sm.GetDefineShape(c.NewIdentifier());
c.Add(ds);

PlaceObject2 po = new PlaceObject2(ds.ShapeId, 1);
po.CharacterType = PlaceType.New;
m.Add(po);

c.Add(m);
po = new PlaceObject2(m.SpriteId, 1);
po.CharacterType = PlaceType.New;
c.Add(po);</code><code>[Visual Basic]

Dim c As New FlashContainer()
c.Add(New SetBackgroundColor(New RGB(255, 255, 255)))
c.FrameSize = New Rect(0, 0, 1440 * 5, 1440 * 5)

Dim sm As New ShapeManager()
Dim m As New DefineSprite(c.NewIdentifier())

'adding line styles to linestyles list
Dim i As Integer = sm.LineStyles.Add(New SolidLine(10, New RGB(0, 0, 0)))
'add fill style using add method
sm.Add(New SolidFill(New RGB(0, 255, 0)))
'add line style using add method
sm.Add(New SolidLine(10, New RGB(0, 0, 0)))

'select a line style from srray of line styles
sm.SelectLineStyle(i)

'draw pollygon
Dim p As Point
Dim pts(2) As Point
p = New Point(2000, 2000)
pts(0) = p
p = New Point(3000, 3000)
pts(1) = p
p = New Point(1500, 1500)
pts(2) = p

sm.DrawPolygon(pts)

Dim ds As DefineShape2 = sm.GetDefineShape(c.NewIdentifier())
c.Add(ds)

Dim po As New PlaceObject2(ds.ShapeId, 1)
po.CharacterType = PlaceType.New
m.Add(po)

c.Add(m)
po = New PlaceObject2(m.SpriteId, 1)
po.CharacterType = PlaceType.New
c.Add(po)</code></example>
    </member>
    <member name="P:Aspose.Flash.Shapes.ShapeManager.LineStyles">
      <summary>
            Returns or sets the collection of line styles.
            Read/write <see cref="T:System.Collections.ArrayList" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Shapes.ShapeManager.FillStyles">
      <summary>
            Returns or sets the collection of fill styles.
            Read/write <see cref="T:System.Collections.ArrayList" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Shapes.ShapeRecordType">
      <summary>
            Defines possible shape record types.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Shapes.ShapeRecordType.StyleChangeRecord">
      <summary>
            Record is a <see cref="T:Aspose.Flash.Shapes.StyleChangeRecord" />.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Shapes.ShapeRecordType.StraightEdgeRecord">
      <summary>
            Record is a <see cref="T:Aspose.Flash.Shapes.StraightEdgeRecord" />.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Shapes.ShapeRecordType.CurvedEdgeRecord">
      <summary>
            Record is a <see cref="T:Aspose.Flash.Shapes.CurvedEdgeRecord" />.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Shapes.ShapeRecordType.Custom">
      <summary>
            This type is intended for internal usage.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Shapes.SolidFill">
      <summary>
            Represents fill style with a solid color.
            </summary>
      <example>This example shows you how to use SolidFill class<code>[Visual Basic]

'Create a flash container and set frame size and frame rate
Dim fc As New FlashContainer()
fc.FrameRate = 12.0f
fc.FrameSize = New Rect(0, 0, 4000, 4000)

'Define fill styles array
'Add two colors RED and BLUE in fill styles array
Dim fillStyles As New ArrayList()
fillStyles.Add(New SolidFill(New RGB(255, 0, 0)))
fillStyles.Add(New SolidFill(New RGB(0, 255, 0)))

'Define line styles array
'Add two colors GREEN and YELLOW in line styles array
Dim lineStyles As New ArrayList()
lineStyles.Add(New SolidLine(10, New RGB(0, 0, 255)))
lineStyles.Add(New SolidLine(50, New RGB(255, 255, 0)))

'Define Style Change Record
Dim scr As New StyleChangeRecord(-1000, -1000)
scr.FillStyle = 1 'Select RED
scr.LineStyle = 2 'Select YELLOW

'add fill tyle and line style
scr.Add(New SolidFill(New RGB(255, 0, 0)))
scr.Add(New SolidLine(50,Color.FromName("Green")))


'Define four edges of Rectangle
Dim ser1 As New StraightEdgeRecord(2000, 0)
Dim ser2 As New StraightEdgeRecord(0, 2000)
Dim ser3 As New StraightEdgeRecord(-2000, 0)
Dim ser4 As New StraightEdgeRecord(0, -2000)

'Put all the five shape records in a Aspose.Flash.Shapes.Shape
'object, this is just a collection that will hold shape records
'for DefineShape2 tag
Dim shapeRect As New Shape()
shapeRect.Add(scr)
shapeRect.Add(ser1)
shapeRect.Add(ser2)
shapeRect.Add(ser3)
shapeRect.Add(ser4)


'At this point we have all the things to create an instance of
'DefineShape2 class
Dim defineShape As New DefineShape2(fc.NewIdentifier(), New Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect)

'Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape)

'Place the Rectangle Character on Display List
Dim placeObj As New PlaceObject2(defineShape.Id, 1)
'Translate the origin of newly placed object
placeObj.MatrixTransform = New MatrixTransform(2000, 2000)

'Add CONTROL TAG created above inside the flash container
fc.Add(placeObj)
'Show the next frame using CONTROL TAG and add it inside the

'flash container
fc.Add(New ShowFrame())
'Now write the flash container on disk to show its output
fc.Write("c:\out.swf")</code></example>
    </member>
    <member name="M:Aspose.Flash.Shapes.SolidFill.#ctor(Aspose.Flash.Basic.RGB)">
      <summary>
            SolidFill constructor.
            </summary>
      <param name="color">Solid color.</param>
      <example>This example shows you how to use SolidFill(RGB) constructor<code>[C#]

//Create a flash container and set frame size and frame rate
FlashContainer fc = new FlashContainer();
fc.FrameRate = 12.0f;
fc.FrameSize = new Rect(0, 0, 4000, 4000);

//Define fill styles array
//Add two colors RED and BLUE in fill styles array
ArrayList fillStyles = new ArrayList();
fillStyles.Add(new SolidFill(new RGB(255, 0, 0)));
fillStyles.Add(new SolidFill(new RGB(0, 255, 0)));

//Define line styles array
//Add two colors GREEN and YELLOW in line styles array
ArrayList lineStyles = new ArrayList();
lineStyles.Add(new SolidLine(10, new RGB(0, 0, 255)));
lineStyles.Add(new SolidLine(50, new RGB(255, 255, 0)));

//Define Style Change Record
StyleChangeRecord scr = new StyleChangeRecord(-1000, -1000);
scr.FillStyle = 1;  //Select RED
scr.LineStyle = 2;  //Select YELLOW

//add fill tyle and line style
scr.Add(new SolidFill(new RGB(255, 0, 0)));
scr.Add(new SolidLine(50,Color.FromName("Green")));


//Define four edges of Rectangle
StraightEdgeRecord ser1 = new StraightEdgeRecord(2000, 0);
StraightEdgeRecord ser2 = new StraightEdgeRecord(0, 2000);
StraightEdgeRecord ser3 = new StraightEdgeRecord(-2000, 0);
StraightEdgeRecord ser4 = new StraightEdgeRecord(0, -2000);

//Put all the five shape records in a Aspose.Flash.Shapes.Shape
//object, this is just a collection that will hold shape records
//for DefineShape2 tag
Shape shapeRect = new Shape();
shapeRect.Add(scr);
shapeRect.Add(ser1);
shapeRect.Add(ser2);
shapeRect.Add(ser3);
shapeRect.Add(ser4);


//At this point we have all the things to create an instance of
//DefineShape2 class
DefineShape2 defineShape = new DefineShape2(fc.NewIdentifier(),
new Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect);

//Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape);

//Place the Rectangle Character on Display List
PlaceObject2 placeObj = new PlaceObject2(defineShape.Id, 1);
//Translate the origin of newly placed object
placeObj.MatrixTransform = new MatrixTransform(2000, 2000);

//Add CONTROL TAG created above inside the flash container
fc.Add(placeObj);
//Show the next frame using CONTROL TAG and add it inside the

//flash container
fc.Add(new ShowFrame());
//Now write the flash container on disk to show its output
fc.Write("c:\\out.swf");</code><code>[Visual Basic]

'Create a flash container and set frame size and frame rate
Dim fc As New FlashContainer()
fc.FrameRate = 12.0f
fc.FrameSize = New Rect(0, 0, 4000, 4000)

'Define fill styles array
'Add two colors RED and BLUE in fill styles array
Dim fillStyles As New ArrayList()
fillStyles.Add(New SolidFill(New RGB(255, 0, 0)))
fillStyles.Add(New SolidFill(New RGB(0, 255, 0)))

'Define line styles array
'Add two colors GREEN and YELLOW in line styles array
Dim lineStyles As New ArrayList()
lineStyles.Add(New SolidLine(10, New RGB(0, 0, 255)))
lineStyles.Add(New SolidLine(50, New RGB(255, 255, 0)))

'Define Style Change Record
Dim scr As New StyleChangeRecord(-1000, -1000)
scr.FillStyle = 1 'Select RED
scr.LineStyle = 2 'Select YELLOW

'add fill tyle and line style
scr.Add(New SolidFill(New RGB(255, 0, 0)))
scr.Add(New SolidLine(50,Color.FromName("Green")))


'Define four edges of Rectangle
Dim ser1 As New StraightEdgeRecord(2000, 0)
Dim ser2 As New StraightEdgeRecord(0, 2000)
Dim ser3 As New StraightEdgeRecord(-2000, 0)
Dim ser4 As New StraightEdgeRecord(0, -2000)

'Put all the five shape records in a Aspose.Flash.Shapes.Shape
'object, this is just a collection that will hold shape records
'for DefineShape2 tag
Dim shapeRect As New Shape()
shapeRect.Add(scr)
shapeRect.Add(ser1)
shapeRect.Add(ser2)
shapeRect.Add(ser3)
shapeRect.Add(ser4)


'At this point we have all the things to create an instance of
'DefineShape2 class
Dim defineShape As New DefineShape2(fc.NewIdentifier(), New Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect)

'Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape)

'Place the Rectangle Character on Display List
Dim placeObj As New PlaceObject2(defineShape.Id, 1)
'Translate the origin of newly placed object
placeObj.MatrixTransform = New MatrixTransform(2000, 2000)

'Add CONTROL TAG created above inside the flash container
fc.Add(placeObj)
'Show the next frame using CONTROL TAG and add it inside the

'flash container
fc.Add(New ShowFrame())
'Now write the flash container on disk to show its output
fc.Write("c:\out.swf")</code></example>
    </member>
    <member name="M:Aspose.Flash.Shapes.SolidFill.#ctor(System.Drawing.Color)">
      <summary>
            SolidFill constructor.
            </summary>
      <param name="color">Solid color.</param>
      <example>This example shows you how to use SolidFill(Color) constructor<code>[C#]

//Create a flash container and set frame size and frame rate
FlashContainer fc = new FlashContainer();
fc.FrameRate = 12.0f;
fc.FrameSize = new Rect(0, 0, 4000, 4000);

//Define fill styles array
//Add two colors RED and BLUE in fill styles array
ArrayList fillStyles = new ArrayList();
fillStyles.Add(new SolidFill(new RGB(255, 0, 0)));
fillStyles.Add(new SolidFill(new RGB(0, 255, 0)));

//Define line styles array
//Add two colors GREEN and YELLOW in line styles array
ArrayList lineStyles = new ArrayList();
lineStyles.Add(new SolidLine(10, new RGB(0, 0, 255)));
lineStyles.Add(new SolidLine(50, new RGB(255, 255, 0)));

//Define Style Change Record
StyleChangeRecord scr = new StyleChangeRecord(-1000, -1000);
scr.FillStyle = 1;  //Select RED
scr.LineStyle = 2;  //Select YELLOW

//add fill tyle and line style
scr.Add(new SolidFill(Color.FromName("Red")));
scr.Add(new SolidLine(50,Color.FromName("Green")));


//Define four edges of Rectangle
StraightEdgeRecord ser1 = new StraightEdgeRecord(2000, 0);
StraightEdgeRecord ser2 = new StraightEdgeRecord(0, 2000);
StraightEdgeRecord ser3 = new StraightEdgeRecord(-2000, 0);
StraightEdgeRecord ser4 = new StraightEdgeRecord(0, -2000);

//Put all the five shape records in a Aspose.Flash.Shapes.Shape
//object, this is just a collection that will hold shape records
//for DefineShape2 tag
Shape shapeRect = new Shape();
shapeRect.Add(scr);
shapeRect.Add(ser1);
shapeRect.Add(ser2);
shapeRect.Add(ser3);
shapeRect.Add(ser4);


//At this point we have all the things to create an instance of
//DefineShape2 class
DefineShape2 defineShape = new DefineShape2(fc.NewIdentifier(),
new Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect);

//Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape);

//Place the Rectangle Character on Display List
PlaceObject2 placeObj = new PlaceObject2(defineShape.Id, 1);
//Translate the origin of newly placed object
placeObj.MatrixTransform = new MatrixTransform(2000, 2000);

//Add CONTROL TAG created above inside the flash container
fc.Add(placeObj);
//Show the next frame using CONTROL TAG and add it inside the

//flash container
fc.Add(new ShowFrame());
//Now write the flash container on disk to show its output
fc.Write("c:\\out.swf");</code><code>[Visual Basic]

'Create a flash container and set frame size and frame rate
Dim fc As New FlashContainer()
fc.FrameRate = 12.0f
fc.FrameSize = New Rect(0, 0, 4000, 4000)

'Define fill styles array
'Add two colors RED and BLUE in fill styles array
Dim fillStyles As New ArrayList()
fillStyles.Add(New SolidFill(New RGB(255, 0, 0)))
fillStyles.Add(New SolidFill(New RGB(0, 255, 0)))

'Define line styles array
'Add two colors GREEN and YELLOW in line styles array
Dim lineStyles As New ArrayList()
lineStyles.Add(New SolidLine(10, New RGB(0, 0, 255)))
lineStyles.Add(New SolidLine(50, New RGB(255, 255, 0)))

'Define Style Change Record
Dim scr As New StyleChangeRecord(-1000, -1000)
scr.FillStyle = 1 'Select RED
scr.LineStyle = 2 'Select YELLOW

'add fill tyle and line style
scr.Add(New SolidFill(Color.FromName("Red")))
scr.Add(New SolidLine(50,Color.FromName("Green")))


'Define four edges of Rectangle
Dim ser1 As New StraightEdgeRecord(2000, 0)
Dim ser2 As New StraightEdgeRecord(0, 2000)
Dim ser3 As New StraightEdgeRecord(-2000, 0)
Dim ser4 As New StraightEdgeRecord(0, -2000)

'Put all the five shape records in a Aspose.Flash.Shapes.Shape
'object, this is just a collection that will hold shape records
'for DefineShape2 tag
Dim shapeRect As New Shape()
shapeRect.Add(scr)
shapeRect.Add(ser1)
shapeRect.Add(ser2)
shapeRect.Add(ser3)
shapeRect.Add(ser4)


'At this point we have all the things to create an instance of
'DefineShape2 class
Dim defineShape As New DefineShape2(fc.NewIdentifier(), New Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect)

'Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape)

'Place the Rectangle Character on Display List
Dim placeObj As New PlaceObject2(defineShape.Id, 1)
'Translate the origin of newly placed object
placeObj.MatrixTransform = New MatrixTransform(2000, 2000)

'Add CONTROL TAG created above inside the flash container
fc.Add(placeObj)
'Show the next frame using CONTROL TAG and add it inside the

'flash container
fc.Add(New ShowFrame())
'Now write the flash container on disk to show its output
fc.Write("c:\out.swf")</code></example>
    </member>
    <member name="P:Aspose.Flash.Shapes.SolidFill.SolidColorRGB">
      <summary>
            Returns or sets the color of a fill style.
            Read/write <see cref="T:Aspose.Flash.Basic.RGB" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Shapes.SolidFill.SolidColor">
      <summary>
            Returns or sets the color of a fill style.
            Read/write <see cref="T:System.Drawing.Color" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Shapes.SolidLine">
      <summary>
            Represents the line with specified width and color.
            </summary>
      <example>This example shows you how to use SolidLine class<code>[C#]

//Create a flash container and set frame size and frame rate
FlashContainer fc = new FlashContainer();
fc.FrameRate = 12.0f;
fc.FrameSize = new Rect(0, 0, 4000, 4000);

//Define fill styles array
//Add two colors RED and BLUE in fill styles array
ArrayList fillStyles = new ArrayList();
fillStyles.Add(new SolidFill(new RGB(255, 0, 0)));
fillStyles.Add(new SolidFill(new RGB(0, 255, 0)));

//Define line styles array
//Add two colors GREEN and YELLOW in line styles array
ArrayList lineStyles = new ArrayList();
lineStyles.Add(new SolidLine(10, new RGB(0, 0, 255)));
lineStyles.Add(new SolidLine(50, new RGB(255, 255, 0)));

//Define Style Change Record
StyleChangeRecord scr = new StyleChangeRecord(-1000, -1000);
scr.FillStyle = 1;  //Select RED
scr.LineStyle = 2;  //Select YELLOW

//add fill tyle and line style
scr.Add(new SolidFill(new RGB(255, 0, 0)));
scr.Add(new SolidLine(new RGB(0, 255, 0)));


//Define four edges of Rectangle
StraightEdgeRecord ser1 = new StraightEdgeRecord(2000, 0);
StraightEdgeRecord ser2 = new StraightEdgeRecord(0, 2000);
StraightEdgeRecord ser3 = new StraightEdgeRecord(-2000, 0);
StraightEdgeRecord ser4 = new StraightEdgeRecord(0, -2000);

//Put all the five shape records in a Aspose.Flash.Shapes.Shape
//object, this is just a collection that will hold shape records
//for DefineShape2 tag
Shape shapeRect = new Shape();
shapeRect.Add(scr);
shapeRect.Add(ser1);
shapeRect.Add(ser2);
shapeRect.Add(ser3);
shapeRect.Add(ser4);


//At this point we have all the things to create an instance of
//DefineShape2 class
DefineShape2 defineShape = new DefineShape2(fc.NewIdentifier(),
new Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect);

//Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape);

//Place the Rectangle Character on Display List
PlaceObject2 placeObj = new PlaceObject2(defineShape.Id, 1);
//Translate the origin of newly placed object
placeObj.MatrixTransform = new MatrixTransform(2000, 2000);

//Add CONTROL TAG created above inside the flash container
fc.Add(placeObj);
//Show the next frame using CONTROL TAG and add it inside the

//flash container
fc.Add(new ShowFrame());
//Now write the flash container on disk to show its output
fc.Write("c:\\out.swf");</code><code>[Visual Basic]

'Create a flash container and set frame size and frame rate
Dim fc As New FlashContainer()
fc.FrameRate = 12.0f
fc.FrameSize = New Rect(0, 0, 4000, 4000)

'Define fill styles array
'Add two colors RED and BLUE in fill styles array
Dim fillStyles As New ArrayList()
fillStyles.Add(New SolidFill(New RGB(255, 0, 0)))
fillStyles.Add(New SolidFill(New RGB(0, 255, 0)))

'Define line styles array
'Add two colors GREEN and YELLOW in line styles array
Dim lineStyles As New ArrayList()
lineStyles.Add(New SolidLine(10, New RGB(0, 0, 255)))
lineStyles.Add(New SolidLine(50, New RGB(255, 255, 0)))

'Define Style Change Record
Dim scr As New StyleChangeRecord(-1000, -1000)
scr.FillStyle = 1 'Select RED
scr.LineStyle = 2 'Select YELLOW

'add fill tyle and line style
scr.Add(New SolidFill(New RGB(255, 0, 0)))
scr.Add(New SolidLine(New RGB(0, 255, 0)))


'Define four edges of Rectangle
Dim ser1 As New StraightEdgeRecord(2000, 0)
Dim ser2 As New StraightEdgeRecord(0, 2000)
Dim ser3 As New StraightEdgeRecord(-2000, 0)
Dim ser4 As New StraightEdgeRecord(0, -2000)

'Put all the five shape records in a Aspose.Flash.Shapes.Shape
'object, this is just a collection that will hold shape records
'for DefineShape2 tag
Dim shapeRect As New Shape()
shapeRect.Add(scr)
shapeRect.Add(ser1)
shapeRect.Add(ser2)
shapeRect.Add(ser3)
shapeRect.Add(ser4)


'At this point we have all the things to create an instance of
'DefineShape2 class
Dim defineShape As New DefineShape2(fc.NewIdentifier(), New Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect)

'Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape)

'Place the Rectangle Character on Display List
Dim placeObj As New PlaceObject2(defineShape.Id, 1)
'Translate the origin of newly placed object
placeObj.MatrixTransform = New MatrixTransform(2000, 2000)

'Add CONTROL TAG created above inside the flash container
fc.Add(placeObj)
'Show the next frame using CONTROL TAG and add it inside the

'flash container
fc.Add(New ShowFrame())
'Now write the flash container on disk to show its output
fc.Write("c:\out.swf")</code></example>
    </member>
    <member name="M:Aspose.Flash.Shapes.SolidLine.#ctor(System.Int32,Aspose.Flash.Basic.RGB)">
      <summary>
            Creates SolidLine with specified width and color.
            </summary>
      <param name="width">Width of the line.</param>
      <param name="rgb">Color of the line.</param>
      <example>This example shows you how to use SolidLine(Int32, RGB) constructor<code>[C#]

//Create a flash container and set frame size and frame rate
FlashContainer fc = new FlashContainer();
fc.FrameRate = 12.0f;
fc.FrameSize = new Rect(0, 0, 4000, 4000);

//Define fill styles array
//Add two colors RED and BLUE in fill styles array
ArrayList fillStyles = new ArrayList();
fillStyles.Add(new SolidFill(new RGB(255, 0, 0)));
fillStyles.Add(new SolidFill(new RGB(0, 255, 0)));

//Define line styles array
//Add two colors GREEN and YELLOW in line styles array
ArrayList lineStyles = new ArrayList();
lineStyles.Add(new SolidLine(10, new RGB(0, 0, 255)));
lineStyles.Add(new SolidLine(50, new RGB(255, 255, 0)));

//Define Style Change Record
StyleChangeRecord scr = new StyleChangeRecord(-1000, -1000);
scr.FillStyle = 1;  //Select RED
scr.LineStyle = 2;  //Select YELLOW

//add fill tyle and line style
scr.Add(new SolidFill(new RGB(255, 0, 0)));
scr.Add(new SolidLine(50,new RGB(0, 255, 0)));


//Define four edges of Rectangle
StraightEdgeRecord ser1 = new StraightEdgeRecord(2000, 0);
StraightEdgeRecord ser2 = new StraightEdgeRecord(0, 2000);
StraightEdgeRecord ser3 = new StraightEdgeRecord(-2000, 0);
StraightEdgeRecord ser4 = new StraightEdgeRecord(0, -2000);

//Put all the five shape records in a Aspose.Flash.Shapes.Shape
//object, this is just a collection that will hold shape records
//for DefineShape2 tag
Shape shapeRect = new Shape();
shapeRect.Add(scr);
shapeRect.Add(ser1);
shapeRect.Add(ser2);
shapeRect.Add(ser3);
shapeRect.Add(ser4);


//At this point we have all the things to create an instance of
//DefineShape2 class
DefineShape2 defineShape = new DefineShape2(fc.NewIdentifier(),
new Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect);

//Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape);

//Place the Rectangle Character on Display List
PlaceObject2 placeObj = new PlaceObject2(defineShape.Id, 1);
//Translate the origin of newly placed object
placeObj.MatrixTransform = new MatrixTransform(2000, 2000);

//Add CONTROL TAG created above inside the flash container
fc.Add(placeObj);
//Show the next frame using CONTROL TAG and add it inside the

//flash container
fc.Add(new ShowFrame());
//Now write the flash container on disk to show its output
fc.Write("c:\\out.swf");</code><code>[Visual Basic]

'Create a flash container and set frame size and frame rate
Dim fc As New FlashContainer()
fc.FrameRate = 12.0f
fc.FrameSize = New Rect(0, 0, 4000, 4000)

'Define fill styles array
'Add two colors RED and BLUE in fill styles array
Dim fillStyles As New ArrayList()
fillStyles.Add(New SolidFill(New RGB(255, 0, 0)))
fillStyles.Add(New SolidFill(New RGB(0, 255, 0)))

'Define line styles array
'Add two colors GREEN and YELLOW in line styles array
Dim lineStyles As New ArrayList()
lineStyles.Add(New SolidLine(10, New RGB(0, 0, 255)))
lineStyles.Add(New SolidLine(50, New RGB(255, 255, 0)))

'Define Style Change Record
Dim scr As New StyleChangeRecord(-1000, -1000)
scr.FillStyle = 1 'Select RED
scr.LineStyle = 2 'Select YELLOW

'add fill tyle and line style
scr.Add(New SolidFill(New RGB(255, 0, 0)))
scr.Add(New SolidLine(50,New RGB(0, 255, 0)))


'Define four edges of Rectangle
Dim ser1 As New StraightEdgeRecord(2000, 0)
Dim ser2 As New StraightEdgeRecord(0, 2000)
Dim ser3 As New StraightEdgeRecord(-2000, 0)
Dim ser4 As New StraightEdgeRecord(0, -2000)

'Put all the five shape records in a Aspose.Flash.Shapes.Shape
'object, this is just a collection that will hold shape records
'for DefineShape2 tag
Dim shapeRect As New Shape()
shapeRect.Add(scr)
shapeRect.Add(ser1)
shapeRect.Add(ser2)
shapeRect.Add(ser3)
shapeRect.Add(ser4)


'At this point we have all the things to create an instance of
'DefineShape2 class
Dim defineShape As New DefineShape2(fc.NewIdentifier(), New Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect)

'Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape)

'Place the Rectangle Character on Display List
Dim placeObj As New PlaceObject2(defineShape.Id, 1)
'Translate the origin of newly placed object
placeObj.MatrixTransform = New MatrixTransform(2000, 2000)

'Add CONTROL TAG created above inside the flash container
fc.Add(placeObj)
'Show the next frame using CONTROL TAG and add it inside the

'flash container
fc.Add(New ShowFrame())
'Now write the flash container on disk to show its output
fc.Write("c:\out.swf")</code></example>
    </member>
    <member name="M:Aspose.Flash.Shapes.SolidLine.#ctor(System.Int32,System.Drawing.Color)">
      <summary>
            Creates SolidLine with specified width and color.
            </summary>
      <param name="width">Width of the line.</param>
      <param name="color">Color of the line.</param>
      <example>This example shows you how to use SolidLine(Int32, Color) constructor<code>[C#]

//Create a flash container and set frame size and frame rate
FlashContainer fc = new FlashContainer();
fc.FrameRate = 12.0f;
fc.FrameSize = new Rect(0, 0, 4000, 4000);

//Define fill styles array
//Add two colors RED and BLUE in fill styles array
ArrayList fillStyles = new ArrayList();
fillStyles.Add(new SolidFill(new RGB(255, 0, 0)));
fillStyles.Add(new SolidFill(new RGB(0, 255, 0)));

//Define line styles array
//Add two colors GREEN and YELLOW in line styles array
ArrayList lineStyles = new ArrayList();
lineStyles.Add(new SolidLine(10, new RGB(0, 0, 255)));
lineStyles.Add(new SolidLine(50, new RGB(255, 255, 0)));

//Define Style Change Record
StyleChangeRecord scr = new StyleChangeRecord(-1000, -1000);
scr.FillStyle = 1;  //Select RED
scr.LineStyle = 2;  //Select YELLOW

//add fill tyle and line style
scr.Add(new SolidFill(new RGB(255, 0, 0)));
scr.Add(new SolidLine(50,Color.FromName("Green")));


//Define four edges of Rectangle
StraightEdgeRecord ser1 = new StraightEdgeRecord(2000, 0);
StraightEdgeRecord ser2 = new StraightEdgeRecord(0, 2000);
StraightEdgeRecord ser3 = new StraightEdgeRecord(-2000, 0);
StraightEdgeRecord ser4 = new StraightEdgeRecord(0, -2000);

//Put all the five shape records in a Aspose.Flash.Shapes.Shape
//object, this is just a collection that will hold shape records
//for DefineShape2 tag
Shape shapeRect = new Shape();
shapeRect.Add(scr);
shapeRect.Add(ser1);
shapeRect.Add(ser2);
shapeRect.Add(ser3);
shapeRect.Add(ser4);


//At this point we have all the things to create an instance of
//DefineShape2 class
DefineShape2 defineShape = new DefineShape2(fc.NewIdentifier(),
new Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect);

//Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape);

//Place the Rectangle Character on Display List
PlaceObject2 placeObj = new PlaceObject2(defineShape.Id, 1);
//Translate the origin of newly placed object
placeObj.MatrixTransform = new MatrixTransform(2000, 2000);

//Add CONTROL TAG created above inside the flash container
fc.Add(placeObj);
//Show the next frame using CONTROL TAG and add it inside the

//flash container
fc.Add(new ShowFrame());
//Now write the flash container on disk to show its output
fc.Write("c:\\out.swf");</code><code>[Visual Basic]

'Create a flash container and set frame size and frame rate
Dim fc As New FlashContainer()
fc.FrameRate = 12.0f
fc.FrameSize = New Rect(0, 0, 4000, 4000)

'Define fill styles array
'Add two colors RED and BLUE in fill styles array
Dim fillStyles As New ArrayList()
fillStyles.Add(New SolidFill(New RGB(255, 0, 0)))
fillStyles.Add(New SolidFill(New RGB(0, 255, 0)))

'Define line styles array
'Add two colors GREEN and YELLOW in line styles array
Dim lineStyles As New ArrayList()
lineStyles.Add(New SolidLine(10, New RGB(0, 0, 255)))
lineStyles.Add(New SolidLine(50, New RGB(255, 255, 0)))

'Define Style Change Record
Dim scr As New StyleChangeRecord(-1000, -1000)
scr.FillStyle = 1 'Select RED
scr.LineStyle = 2 'Select YELLOW

'add fill tyle and line style
scr.Add(New SolidFill(New RGB(255, 0, 0)))
scr.Add(New SolidLine(50,Color.FromName("Green")))


'Define four edges of Rectangle
Dim ser1 As New StraightEdgeRecord(2000, 0)
Dim ser2 As New StraightEdgeRecord(0, 2000)
Dim ser3 As New StraightEdgeRecord(-2000, 0)
Dim ser4 As New StraightEdgeRecord(0, -2000)

'Put all the five shape records in a Aspose.Flash.Shapes.Shape
'object, this is just a collection that will hold shape records
'for DefineShape2 tag
Dim shapeRect As New Shape()
shapeRect.Add(scr)
shapeRect.Add(ser1)
shapeRect.Add(ser2)
shapeRect.Add(ser3)
shapeRect.Add(ser4)


'At this point we have all the things to create an instance of
'DefineShape2 class
Dim defineShape As New DefineShape2(fc.NewIdentifier(), New Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect)

'Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape)

'Place the Rectangle Character on Display List
Dim placeObj As New PlaceObject2(defineShape.Id, 1)
'Translate the origin of newly placed object
placeObj.MatrixTransform = New MatrixTransform(2000, 2000)

'Add CONTROL TAG created above inside the flash container
fc.Add(placeObj)
'Show the next frame using CONTROL TAG and add it inside the

'flash container
fc.Add(New ShowFrame())
'Now write the flash container on disk to show its output
fc.Write("c:\out.swf")</code></example>
    </member>
    <member name="P:Aspose.Flash.Shapes.SolidLine.LineColorRGB">
      <summary>
            Returns or sets the color of a line.
            Read/write <see cref="T:Aspose.Flash.Basic.RGB" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Shapes.SolidLine.LineColor">
      <summary>
            Returns or sets the color of a line.
            Read/write <see cref="T:System.Drawing.Color" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Shapes.StraightEdgeRecord">
      <summary>
            Represents the straight line from the current drawing position to the point
            specified in relative coordinates as delta of X and Y. This last point becomes
            current drawing position after the line was drawn.
            </summary>
      <example>This example shows you how to use StraightEdgeRecord class<code>[C#]

//Create a flash container and set frame size and frame rate
FlashContainer fc = new FlashContainer();
fc.FrameRate = 12.0f;
fc.FrameSize = new Rect(0, 0, 4000, 4000);

//Define fill styles array
//Add two colors RED and BLUE in fill styles array
ArrayList fillStyles = new ArrayList();
fillStyles.Add(new SolidFill(new RGB(255, 0, 0)));
fillStyles.Add(new SolidFill(new RGB(0, 255, 0)));

//Define line styles array
//Add two colors GREEN and YELLOW in line styles array
ArrayList lineStyles = new ArrayList();
lineStyles.Add(new SolidLine(10, new RGB(0, 0, 255)));
lineStyles.Add(new SolidLine(50, new RGB(255, 255, 0)));

//Define Style Change Record
StyleChangeRecord scr = new StyleChangeRecord(-1000, -1000);
scr.FillStyle = 1;  //Select RED
scr.LineStyle = 2;  //Select YELLOW

//add fill tyle and line style
scr.Add(new SolidFill(new RGB(255, 0, 0)));
scr.Add(new SolidLine(new RGB(0, 255, 0)));


//Define four edges of Rectangle
StraightEdgeRecord ser1 = new StraightEdgeRecord(2000, 0);
StraightEdgeRecord ser2 = new StraightEdgeRecord(0, 2000);
StraightEdgeRecord ser3 = new StraightEdgeRecord(-2000, 0);
StraightEdgeRecord ser4 = new StraightEdgeRecord(0, -2000);

//Put all the five shape records in a Aspose.Flash.Shapes.Shape
//object, this is just a collection that will hold shape records
//for DefineShape2 tag
Shape shapeRect = new Shape();
shapeRect.Add(scr);
shapeRect.Add(ser1);
shapeRect.Add(ser2);
shapeRect.Add(ser3);
shapeRect.Add(ser4);


//At this point we have all the things to create an instance of
//DefineShape2 class
DefineShape2 defineShape = new DefineShape2(fc.NewIdentifier(),
new Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect);

//Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape);

//Place the Rectangle Character on Display List
PlaceObject2 placeObj = new PlaceObject2(defineShape.Id, 1);
//Translate the origin of newly placed object
placeObj.MatrixTransform = new MatrixTransform(2000, 2000);

//Add CONTROL TAG created above inside the flash container
fc.Add(placeObj);
//Show the next frame using CONTROL TAG and add it inside the

//flash container
fc.Add(new ShowFrame());
//Now write the flash container on disk to show its output
fc.Write("c:\\out.swf");</code><code>[Visual Basic]

'Create a flash container and set frame size and frame rate
Dim fc As New FlashContainer()
fc.FrameRate = 12.0f
fc.FrameSize = New Rect(0, 0, 4000, 4000)

'Define fill styles array
'Add two colors RED and BLUE in fill styles array
Dim fillStyles As New ArrayList()
fillStyles.Add(New SolidFill(New RGB(255, 0, 0)))
fillStyles.Add(New SolidFill(New RGB(0, 255, 0)))

'Define line styles array
'Add two colors GREEN and YELLOW in line styles array
Dim lineStyles As New ArrayList()
lineStyles.Add(New SolidLine(10, New RGB(0, 0, 255)))
lineStyles.Add(New SolidLine(50, New RGB(255, 255, 0)))

'Define Style Change Record
Dim scr As New StyleChangeRecord(-1000, -1000)
scr.FillStyle = 1 'Select RED
scr.LineStyle = 2 'Select YELLOW

'add fill tyle and line style
scr.Add(New SolidFill(New RGB(255, 0, 0)))
scr.Add(New SolidLine(New RGB(0, 255, 0)))


'Define four edges of Rectangle
Dim ser1 As New StraightEdgeRecord(2000, 0)
Dim ser2 As New StraightEdgeRecord(0, 2000)
Dim ser3 As New StraightEdgeRecord(-2000, 0)
Dim ser4 As New StraightEdgeRecord(0, -2000)

'Put all the five shape records in a Aspose.Flash.Shapes.Shape
'object, this is just a collection that will hold shape records
'for DefineShape2 tag
Dim shapeRect As New Shape()
shapeRect.Add(scr)
shapeRect.Add(ser1)
shapeRect.Add(ser2)
shapeRect.Add(ser3)
shapeRect.Add(ser4)


'At this point we have all the things to create an instance of
'DefineShape2 class
Dim defineShape As New DefineShape2(fc.NewIdentifier(), New Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect)

'Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape)

'Place the Rectangle Character on Display List
Dim placeObj As New PlaceObject2(defineShape.Id, 1)
'Translate the origin of newly placed object
placeObj.MatrixTransform = New MatrixTransform(2000, 2000)

'Add CONTROL TAG created above inside the flash container
fc.Add(placeObj)
'Show the next frame using CONTROL TAG and add it inside the

'flash container
fc.Add(New ShowFrame())
'Now write the flash container on disk to show its output
fc.Write("c:\out.swf")</code></example>
    </member>
    <member name="M:Aspose.Flash.Shapes.StraightEdgeRecord.#ctor(System.Int32,System.Int32)">
      <summary>
            Creates the StraightEdgeRecord with specified relative coordinates.
            </summary>
      <param name="deltaX">X coordinate of the end point.</param>
      <param name="deltaY">Y coordinate of the end point.</param>
      <example>This example shows you how to use StraightEdgeRecord constructor<code>[C#]

//Create a flash container and set frame size and frame rate
FlashContainer fc = new FlashContainer();
fc.FrameRate = 12.0f;
fc.FrameSize = new Rect(0, 0, 4000, 4000);

//Define fill styles array
//Add two colors RED and BLUE in fill styles array
ArrayList fillStyles = new ArrayList();
fillStyles.Add(new SolidFill(new RGB(255, 0, 0)));
fillStyles.Add(new SolidFill(new RGB(0, 255, 0)));

//Define line styles array
//Add two colors GREEN and YELLOW in line styles array
ArrayList lineStyles = new ArrayList();
lineStyles.Add(new SolidLine(10, new RGB(0, 0, 255)));
lineStyles.Add(new SolidLine(50, new RGB(255, 255, 0)));

//Define Style Change Record
StyleChangeRecord scr = new StyleChangeRecord(-1000, -1000);
scr.FillStyle = 1;  //Select RED
scr.LineStyle = 2;  //Select YELLOW

//add fill tyle and line style
scr.Add(new SolidFill(new RGB(255, 0, 0)));
scr.Add(new SolidLine(new RGB(0, 255, 0)));


//Define four edges of Rectangle
StraightEdgeRecord ser1 = new StraightEdgeRecord(2000, 0);
StraightEdgeRecord ser2 = new StraightEdgeRecord(0, 2000);
StraightEdgeRecord ser3 = new StraightEdgeRecord(-2000, 0);
StraightEdgeRecord ser4 = new StraightEdgeRecord(0, -2000);

//Put all the five shape records in a Aspose.Flash.Shapes.Shape
//object, this is just a collection that will hold shape records
//for DefineShape2 tag
Shape shapeRect = new Shape();
shapeRect.Add(scr);
shapeRect.Add(ser1);
shapeRect.Add(ser2);
shapeRect.Add(ser3);
shapeRect.Add(ser4);


//At this point we have all the things to create an instance of
//DefineShape2 class
DefineShape2 defineShape = new DefineShape2(fc.NewIdentifier(),
new Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect);

//Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape);

//Place the Rectangle Character on Display List
PlaceObject2 placeObj = new PlaceObject2(defineShape.Id, 1);
//Translate the origin of newly placed object
placeObj.MatrixTransform = new MatrixTransform(2000, 2000);

//Add CONTROL TAG created above inside the flash container
fc.Add(placeObj);
//Show the next frame using CONTROL TAG and add it inside the

//flash container
fc.Add(new ShowFrame());
//Now write the flash container on disk to show its output
fc.Write("c:\\out.swf");</code><code>[Visual Basic]

'Create a flash container and set frame size and frame rate
Dim fc As New FlashContainer()
fc.FrameRate = 12.0f
fc.FrameSize = New Rect(0, 0, 4000, 4000)

'Define fill styles array
'Add two colors RED and BLUE in fill styles array
Dim fillStyles As New ArrayList()
fillStyles.Add(New SolidFill(New RGB(255, 0, 0)))
fillStyles.Add(New SolidFill(New RGB(0, 255, 0)))

'Define line styles array
'Add two colors GREEN and YELLOW in line styles array
Dim lineStyles As New ArrayList()
lineStyles.Add(New SolidLine(10, New RGB(0, 0, 255)))
lineStyles.Add(New SolidLine(50, New RGB(255, 255, 0)))

'Define Style Change Record
Dim scr As New StyleChangeRecord(-1000, -1000)
scr.FillStyle = 1 'Select RED
scr.LineStyle = 2 'Select YELLOW

'add fill tyle and line style
scr.Add(New SolidFill(New RGB(255, 0, 0)))
scr.Add(New SolidLine(New RGB(0, 255, 0)))


'Define four edges of Rectangle
Dim ser1 As New StraightEdgeRecord(2000, 0)
Dim ser2 As New StraightEdgeRecord(0, 2000)
Dim ser3 As New StraightEdgeRecord(-2000, 0)
Dim ser4 As New StraightEdgeRecord(0, -2000)

'Put all the five shape records in a Aspose.Flash.Shapes.Shape
'object, this is just a collection that will hold shape records
'for DefineShape2 tag
Dim shapeRect As New Shape()
shapeRect.Add(scr)
shapeRect.Add(ser1)
shapeRect.Add(ser2)
shapeRect.Add(ser3)
shapeRect.Add(ser4)


'At this point we have all the things to create an instance of
'DefineShape2 class
Dim defineShape As New DefineShape2(fc.NewIdentifier(), New Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect)

'Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape)

'Place the Rectangle Character on Display List
Dim placeObj As New PlaceObject2(defineShape.Id, 1)
'Translate the origin of newly placed object
placeObj.MatrixTransform = New MatrixTransform(2000, 2000)

'Add CONTROL TAG created above inside the flash container
fc.Add(placeObj)
'Show the next frame using CONTROL TAG and add it inside the

'flash container
fc.Add(New ShowFrame())
'Now write the flash container on disk to show its output
fc.Write("c:\out.swf")</code></example>
    </member>
    <member name="P:Aspose.Flash.Shapes.StraightEdgeRecord.DeltaX">
      <summary>
            Returns or sets the delta of X coordinate.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Shapes.StraightEdgeRecord.DeltaY">
      <summary>
            Returns or sets the delta of Y coordinate.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Shapes.StyleChangeRecord">
      <summary>
            Represents the record which can be applied in the next situations:
            <ol><li>Select a fill or line style of drawing.</li><li>Move the current drawing position.</li><li>Replace the current fill and line style arrays with a new set of styles.</li></ol></summary>
      <example>This example shows you how to use StyleChangeRecord class<code>[C#]

//Create a flash container and set frame size and frame rate
FlashContainer fc = new FlashContainer();
fc.FrameRate = 12.0f;
fc.FrameSize = new Rect(0, 0, 4000, 4000);


//Define Style Change Record
StyleChangeRecord scr = new StyleChangeRecord(-1000, -1000);
scr.FillStyle = 1;  //Select RED    see Below
scr.LineStyle = 2;  //Select YELLOW see Below

//Define four edges of Rectangle
StraightEdgeRecord ser1 = new StraightEdgeRecord(2000, 0);
StraightEdgeRecord ser2 = new StraightEdgeRecord(0, 2000);
StraightEdgeRecord ser3 = new StraightEdgeRecord(-2000, 0);
StraightEdgeRecord ser4 = new StraightEdgeRecord(0, -2000);

//Put all the five shape records in a Aspose.Flash.Shapes.Shape
//object, this is just a collection that will hold shape records
//for DefineShape2 tag
Shape shapeRect = new Shape();
shapeRect.Add(scr);
shapeRect.Add(ser1);
shapeRect.Add(ser2);
shapeRect.Add(ser3);
shapeRect.Add(ser4);

//Define fill styles array
//Add two colors RED and BLUE in fill styles array
ArrayList fillStyles = new ArrayList();
fillStyles.Add(new SolidFill(new RGB(255, 0, 0)));
fillStyles.Add(new SolidFill(new RGB(0, 255, 0)));

//Define line styles array
//Add two colors GREEN and YELLOW in line styles array
ArrayList lineStyles = new ArrayList();
lineStyles.Add(new SolidLine(10, new RGB(0, 0, 255)));
lineStyles.Add(new SolidLine(50, new RGB(255, 255, 0)));

//At this point we have all the things to create an instance of
//DefineShape2 class
DefineShape2 defineShape = new DefineShape2(fc.NewIdentifier(),
new Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect);

//Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape);

//Place the Rectangle Character on Display List
PlaceObject2 placeObj = new PlaceObject2(defineShape.Id, 1);
//Translate the origin of newly placed object
placeObj.MatrixTransform = new MatrixTransform(2000, 2000);

//Add CONTROL TAG created above inside the flash container
fc.Add(placeObj);
//Show the next frame using CONTROL TAG and add it inside the

//flash container
fc.Add(new ShowFrame());
//Now write the flash container on disk to show its output
fc.Write("c:\\out.swf");</code><code>[Visual Basic]

'Create a flash container and set frame size and frame rate
Dim fc As New FlashContainer()
fc.FrameRate = 12.0f
fc.FrameSize = New Rect(0, 0, 4000, 4000)


'Define Style Change Record
Dim scr As New StyleChangeRecord(-1000, -1000)
scr.FillStyle = 1 'Select RED see Below
scr.LineStyle = 2 'Select YELLOW see Below

'Define four edges of Rectangle
Dim ser1 As New StraightEdgeRecord(2000, 0)
Dim ser2 As New StraightEdgeRecord(0, 2000)
Dim ser3 As New StraightEdgeRecord(-2000, 0)
Dim ser4 As New StraightEdgeRecord(0, -2000)

'Put all the five shape records in a Aspose.Flash.Shapes.Shape
'object, this is just a collection that will hold shape records
'for DefineShape2 tag
Dim shapeRect As New Shape()
shapeRect.Add(scr)
shapeRect.Add(ser1)
shapeRect.Add(ser2)
shapeRect.Add(ser3)
shapeRect.Add(ser4)

'Define fill styles array
'Add two colors RED and BLUE in fill styles array
Dim fillStyles As New ArrayList()
fillStyles.Add(New SolidFill(New RGB(255, 0, 0)))
fillStyles.Add(New SolidFill(New RGB(0, 255, 0)))

'Define line styles array
'Add two colors GREEN and YELLOW in line styles array
Dim lineStyles As New ArrayList()
lineStyles.Add(New SolidLine(10, New RGB(0, 0, 255)))
lineStyles.Add(New SolidLine(50, New RGB(255, 255, 0)))

'At this point we have all the things to create an instance of
'DefineShape2 class
Dim defineShape As New DefineShape2(fc.NewIdentifier(), New Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect)

'Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape)

'Place the Rectangle Character on Display List
Dim placeObj As New PlaceObject2(defineShape.Id, 1)
'Translate the origin of newly placed object
placeObj.MatrixTransform = New MatrixTransform(2000, 2000)

'Add CONTROL TAG created above inside the flash container
fc.Add(placeObj)
'Show the next frame using CONTROL TAG and add it inside the

'flash container
fc.Add(New ShowFrame())
'Now write the flash container on disk to show its output
fc.Write("c:\out.swf")</code></example>
    </member>
    <member name="M:Aspose.Flash.Shapes.StyleChangeRecord.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>
            StyleChangeRecord constructor.
            </summary>
      <param name="lineStyleIndex">Line style index.</param>
      <param name="fillStyleIndex">Fill style index.</param>
      <param name="altFillStyleIndex">Overlap fill style index.</param>
      <example>This example shows you how to use StyleChangeRecord(Int32, Int32, Int32) constructor<code>[C#]

//Create a flash container and set frame size and frame rate
FlashContainer fc = new FlashContainer();
fc.FrameRate = 12.0f;
fc.FrameSize = new Rect(0, 0, 4000, 4000);


//Define Style Change Record
StyleChangeRecord scr = new StyleChangeRecord(2,1,1);
//scr.FillStyle = 1;  //Select RED    see Below
//scr.LineStyle = 2;  //Select YELLOW see Below

//Define four edges of Rectangle
StraightEdgeRecord ser1 = new StraightEdgeRecord(2000, 0);
StraightEdgeRecord ser2 = new StraightEdgeRecord(0, 2000);
StraightEdgeRecord ser3 = new StraightEdgeRecord(-2000, 0);
StraightEdgeRecord ser4 = new StraightEdgeRecord(0, -2000);

//Put all the five shape records in a Aspose.Flash.Shapes.Shape
//object, this is just a collection that will hold shape records
//for DefineShape2 tag
Shape shapeRect = new Shape();
shapeRect.Add(scr);
shapeRect.Add(ser1);
shapeRect.Add(ser2);
shapeRect.Add(ser3);
shapeRect.Add(ser4);

//Define fill styles array
//Add two colors RED and BLUE in fill styles array
ArrayList fillStyles = new ArrayList();
fillStyles.Add(new SolidFill(new RGB(255, 0, 0)));
fillStyles.Add(new SolidFill(new RGB(0, 255, 0)));

//Define line styles array
//Add two colors GREEN and YELLOW in line styles array
ArrayList lineStyles = new ArrayList();
lineStyles.Add(new SolidLine(10, new RGB(0, 0, 255)));
lineStyles.Add(new SolidLine(50, new RGB(255, 255, 0)));

//At this point we have all the things to create an instance of
//DefineShape2 class
DefineShape2 defineShape = new DefineShape2(fc.NewIdentifier(),
new Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect);

//Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape);

//Place the Rectangle Character on Display List
PlaceObject2 placeObj = new PlaceObject2(defineShape.Id, 1);
//Translate the origin of newly placed object
placeObj.MatrixTransform = new MatrixTransform(2000, 2000);

//Add CONTROL TAG created above inside the flash container
fc.Add(placeObj);
//Show the next frame using CONTROL TAG and add it inside the

//flash container
fc.Add(new ShowFrame());
//Now write the flash container on disk to show its output
fc.Write("c:\\out.swf");</code><code>[Visual Basic]

'Create a flash container and set frame size and frame rate
Dim fc As New FlashContainer()
fc.FrameRate = 12.0f
fc.FrameSize = New Rect(0, 0, 4000, 4000)


'Define Style Change Record
Dim scr As New StyleChangeRecord(2,1,1)
'scr.FillStyle = 1;  //Select RED    see Below
'scr.LineStyle = 2;  //Select YELLOW see Below

'Define four edges of Rectangle
Dim ser1 As New StraightEdgeRecord(2000, 0)
Dim ser2 As New StraightEdgeRecord(0, 2000)
Dim ser3 As New StraightEdgeRecord(-2000, 0)
Dim ser4 As New StraightEdgeRecord(0, -2000)

'Put all the five shape records in a Aspose.Flash.Shapes.Shape
'object, this is just a collection that will hold shape records
'for DefineShape2 tag
Dim shapeRect As New Shape()
shapeRect.Add(scr)
shapeRect.Add(ser1)
shapeRect.Add(ser2)
shapeRect.Add(ser3)
shapeRect.Add(ser4)

'Define fill styles array
'Add two colors RED and BLUE in fill styles array
Dim fillStyles As New ArrayList()
fillStyles.Add(New SolidFill(New RGB(255, 0, 0)))
fillStyles.Add(New SolidFill(New RGB(0, 255, 0)))

'Define line styles array
'Add two colors GREEN and YELLOW in line styles array
Dim lineStyles As New ArrayList()
lineStyles.Add(New SolidLine(10, New RGB(0, 0, 255)))
lineStyles.Add(New SolidLine(50, New RGB(255, 255, 0)))

'At this point we have all the things to create an instance of
'DefineShape2 class
Dim defineShape As New DefineShape2(fc.NewIdentifier(), New Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect)

'Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape)

'Place the Rectangle Character on Display List
Dim placeObj As New PlaceObject2(defineShape.Id, 1)
'Translate the origin of newly placed object
placeObj.MatrixTransform = New MatrixTransform(2000, 2000)

'Add CONTROL TAG created above inside the flash container
fc.Add(placeObj)
'Show the next frame using CONTROL TAG and add it inside the

'flash container
fc.Add(New ShowFrame())
'Now write the flash container on disk to show its output
fc.Write("c:\out.swf")</code></example>
    </member>
    <member name="M:Aspose.Flash.Shapes.StyleChangeRecord.#ctor(System.Int32,System.Int32)">
      <summary>
            StyleChangeRecord constructor.
            </summary>
      <param name="deltaX">Delta X coordinate from the current drawing point.</param>
      <param name="deltaY">Delta Y coordinate from the current drawing point.</param>
      <example>This example shows you how to use StyleChangeRecord(Int32, Int32) constructor<code>[C#]

//Create a flash container and set frame size and frame rate
FlashContainer fc = new FlashContainer();
fc.FrameRate = 12.0f;
fc.FrameSize = new Rect(0, 0, 4000, 4000);


//Define Style Change Record
StyleChangeRecord scr = new StyleChangeRecord(-1000, -1000);
scr.FillStyle = 1;  //Select RED    see Below
scr.LineStyle = 2;  //Select YELLOW see Below

//Define four edges of Rectangle
StraightEdgeRecord ser1 = new StraightEdgeRecord(2000, 0);
StraightEdgeRecord ser2 = new StraightEdgeRecord(0, 2000);
StraightEdgeRecord ser3 = new StraightEdgeRecord(-2000, 0);
StraightEdgeRecord ser4 = new StraightEdgeRecord(0, -2000);

//Put all the five shape records in a Aspose.Flash.Shapes.Shape
//object, this is just a collection that will hold shape records
//for DefineShape2 tag
Shape shapeRect = new Shape();
shapeRect.Add(scr);
shapeRect.Add(ser1);
shapeRect.Add(ser2);
shapeRect.Add(ser3);
shapeRect.Add(ser4);

//Define fill styles array
//Add two colors RED and BLUE in fill styles array
ArrayList fillStyles = new ArrayList();
fillStyles.Add(new SolidFill(new RGB(255, 0, 0)));
fillStyles.Add(new SolidFill(new RGB(0, 255, 0)));

//Define line styles array
//Add two colors GREEN and YELLOW in line styles array
ArrayList lineStyles = new ArrayList();
lineStyles.Add(new SolidLine(10, new RGB(0, 0, 255)));
lineStyles.Add(new SolidLine(50, new RGB(255, 255, 0)));

//At this point we have all the things to create an instance of
//DefineShape2 class
DefineShape2 defineShape = new DefineShape2(fc.NewIdentifier(),
new Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect);

//Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape);

//Place the Rectangle Character on Display List
PlaceObject2 placeObj = new PlaceObject2(defineShape.Id, 1);
//Translate the origin of newly placed object
placeObj.MatrixTransform = new MatrixTransform(2000, 2000);

//Add CONTROL TAG created above inside the flash container
fc.Add(placeObj);
//Show the next frame using CONTROL TAG and add it inside the

//flash container
fc.Add(new ShowFrame());
//Now write the flash container on disk to show its output
fc.Write("c:\\out.swf");</code><code>[Visual Basic]

'Create a flash container and set frame size and frame rate
Dim fc As New FlashContainer()
fc.FrameRate = 12.0f
fc.FrameSize = New Rect(0, 0, 4000, 4000)


'Define Style Change Record
Dim scr As New StyleChangeRecord(-1000, -1000)
scr.FillStyle = 1 'Select RED see Below
scr.LineStyle = 2 'Select YELLOW see Below

'Define four edges of Rectangle
Dim ser1 As New StraightEdgeRecord(2000, 0)
Dim ser2 As New StraightEdgeRecord(0, 2000)
Dim ser3 As New StraightEdgeRecord(-2000, 0)
Dim ser4 As New StraightEdgeRecord(0, -2000)

'Put all the five shape records in a Aspose.Flash.Shapes.Shape
'object, this is just a collection that will hold shape records
'for DefineShape2 tag
Dim shapeRect As New Shape()
shapeRect.Add(scr)
shapeRect.Add(ser1)
shapeRect.Add(ser2)
shapeRect.Add(ser3)
shapeRect.Add(ser4)

'Define fill styles array
'Add two colors RED and BLUE in fill styles array
Dim fillStyles As New ArrayList()
fillStyles.Add(New SolidFill(New RGB(255, 0, 0)))
fillStyles.Add(New SolidFill(New RGB(0, 255, 0)))

'Define line styles array
'Add two colors GREEN and YELLOW in line styles array
Dim lineStyles As New ArrayList()
lineStyles.Add(New SolidLine(10, New RGB(0, 0, 255)))
lineStyles.Add(New SolidLine(50, New RGB(255, 255, 0)))

'At this point we have all the things to create an instance of
'DefineShape2 class
Dim defineShape As New DefineShape2(fc.NewIdentifier(), New Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect)

'Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape)

'Place the Rectangle Character on Display List
Dim placeObj As New PlaceObject2(defineShape.Id, 1)
'Translate the origin of newly placed object
placeObj.MatrixTransform = New MatrixTransform(2000, 2000)

'Add CONTROL TAG created above inside the flash container
fc.Add(placeObj)
'Show the next frame using CONTROL TAG and add it inside the

'flash container
fc.Add(New ShowFrame())
'Now write the flash container on disk to show its output
fc.Write("c:\out.swf")</code></example>
    </member>
    <member name="M:Aspose.Flash.Shapes.StyleChangeRecord.#ctor(System.Collections.ArrayList,System.Collections.ArrayList)">
      <summary>
            StyleChangeRecord constructor.
            </summary>
      <param name="lineStylesArray">Collection of line styles.</param>
      <param name="fillStylesArray">Collection of fill styles.</param>
      <example>This example shows you how to use StyleChangeRecord(ArrayList, ArrayList) constructor<code>[C#]

//Create a flash container and set frame size and frame rate
FlashContainer fc = new FlashContainer();
fc.FrameRate = 12.0f;
fc.FrameSize = new Rect(0, 0, 4000, 4000);

//Define fill styles array
//Add two colors RED and BLUE in fill styles array
ArrayList fillStyles = new ArrayList();
fillStyles.Add(new SolidFill(new RGB(255, 0, 0)));
fillStyles.Add(new SolidFill(new RGB(0, 255, 0)));

//Define line styles array
//Add two colors GREEN and YELLOW in line styles array
ArrayList lineStyles = new ArrayList();
lineStyles.Add(new SolidLine(10, new RGB(0, 0, 255)));
lineStyles.Add(new SolidLine(50, new RGB(255, 255, 0)));

//Define Style Change Record
StyleChangeRecord scr = new StyleChangeRecord(lineStyles,fillStyles);
scr.FillStyle = 1;  //Select RED
scr.LineStyle = 2;  //Select YELLOW

scr.DeltaX = -1000;
scr.DeltaY = -1000;

//Define four edges of Rectangle
StraightEdgeRecord ser1 = new StraightEdgeRecord(2000, 0);
StraightEdgeRecord ser2 = new StraightEdgeRecord(0, 2000);
StraightEdgeRecord ser3 = new StraightEdgeRecord(-2000, 0);
StraightEdgeRecord ser4 = new StraightEdgeRecord(0, -2000);

//Put all the five shape records in a Aspose.Flash.Shapes.Shape
//object, this is just a collection that will hold shape records
//for DefineShape2 tag
Shape shapeRect = new Shape();
shapeRect.Add(scr);
shapeRect.Add(ser1);
shapeRect.Add(ser2);
shapeRect.Add(ser3);
shapeRect.Add(ser4);


//At this point we have all the things to create an instance of
//DefineShape2 class
DefineShape2 defineShape = new DefineShape2(fc.NewIdentifier(),
new Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect);

//Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape);

//Place the Rectangle Character on Display List
PlaceObject2 placeObj = new PlaceObject2(defineShape.Id, 1);
//Translate the origin of newly placed object
placeObj.MatrixTransform = new MatrixTransform(2000, 2000);

//Add CONTROL TAG created above inside the flash container
fc.Add(placeObj);
//Show the next frame using CONTROL TAG and add it inside the

//flash container
fc.Add(new ShowFrame());
//Now write the flash container on disk to show its output
fc.Write("c:\\out.swf");</code><code>[Visual Basic]

'Create a flash container and set frame size and frame rate
Dim fc As New FlashContainer()
fc.FrameRate = 12.0f
fc.FrameSize = New Rect(0, 0, 4000, 4000)

'Define fill styles array
'Add two colors RED and BLUE in fill styles array
Dim fillStyles As New ArrayList()
fillStyles.Add(New SolidFill(New RGB(255, 0, 0)))
fillStyles.Add(New SolidFill(New RGB(0, 255, 0)))

'Define line styles array
'Add two colors GREEN and YELLOW in line styles array
Dim lineStyles As New ArrayList()
lineStyles.Add(New SolidLine(10, New RGB(0, 0, 255)))
lineStyles.Add(New SolidLine(50, New RGB(255, 255, 0)))

'Define Style Change Record
Dim scr As New StyleChangeRecord(lineStyles,fillStyles)
scr.FillStyle = 1 'Select RED
scr.LineStyle = 2 'Select YELLOW

scr.DeltaX = -1000
scr.DeltaY = -1000

'Define four edges of Rectangle
Dim ser1 As New StraightEdgeRecord(2000, 0)
Dim ser2 As New StraightEdgeRecord(0, 2000)
Dim ser3 As New StraightEdgeRecord(-2000, 0)
Dim ser4 As New StraightEdgeRecord(0, -2000)

'Put all the five shape records in a Aspose.Flash.Shapes.Shape
'object, this is just a collection that will hold shape records
'for DefineShape2 tag
Dim shapeRect As New Shape()
shapeRect.Add(scr)
shapeRect.Add(ser1)
shapeRect.Add(ser2)
shapeRect.Add(ser3)
shapeRect.Add(ser4)


'At this point we have all the things to create an instance of
'DefineShape2 class
Dim defineShape As New DefineShape2(fc.NewIdentifier(), New Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect)

'Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape)

'Place the Rectangle Character on Display List
Dim placeObj As New PlaceObject2(defineShape.Id, 1)
'Translate the origin of newly placed object
placeObj.MatrixTransform = New MatrixTransform(2000, 2000)

'Add CONTROL TAG created above inside the flash container
fc.Add(placeObj)
'Show the next frame using CONTROL TAG and add it inside the

'flash container
fc.Add(New ShowFrame())
'Now write the flash container on disk to show its output
fc.Write("c:\out.swf")</code></example>
    </member>
    <member name="M:Aspose.Flash.Shapes.StyleChangeRecord.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            StyleChangeRecord constructor.
            </summary>
      <param name="lineStyleIndex">Line style index.</param>
      <param name="fillStyleIndex">Fill style index.</param>
      <param name="altFillStyleIndex">Overlap fill style index.</param>
      <param name="deltaX">Delta X coordinate from the current drawing point.</param>
      <param name="deltaY">Delta Y coordinate from the current drawing point.</param>
      <example>This example shows you how to use StyleChangeRecord(Int32, Int32, Int32, Int32, Int32) constructor<code>[C#]

//Create a flash container and set frame size and frame rate
FlashContainer fc = new FlashContainer();
fc.FrameRate = 12.0f;
fc.FrameSize = new Rect(0, 0, 4000, 4000);


//Define Style Change Record
StyleChangeRecord scr = new StyleChangeRecord(2,1,1,-1000,-1000);
//scr.FillStyle = 1;  //Select RED    see Below
//scr.LineStyle = 2;  //Select YELLOW see Below

//Define four edges of Rectangle
StraightEdgeRecord ser1 = new StraightEdgeRecord(2000, 0);
StraightEdgeRecord ser2 = new StraightEdgeRecord(0, 2000);
StraightEdgeRecord ser3 = new StraightEdgeRecord(-2000, 0);
StraightEdgeRecord ser4 = new StraightEdgeRecord(0, -2000);

//Put all the five shape records in a Aspose.Flash.Shapes.Shape
//object, this is just a collection that will hold shape records
//for DefineShape2 tag
Shape shapeRect = new Shape();
shapeRect.Add(scr);
shapeRect.Add(ser1);
shapeRect.Add(ser2);
shapeRect.Add(ser3);
shapeRect.Add(ser4);

//Define fill styles array
//Add two colors RED and BLUE in fill styles array
ArrayList fillStyles = new ArrayList();
fillStyles.Add(new SolidFill(new RGB(255, 0, 0)));
fillStyles.Add(new SolidFill(new RGB(0, 255, 0)));

//Define line styles array
//Add two colors GREEN and YELLOW in line styles array
ArrayList lineStyles = new ArrayList();
lineStyles.Add(new SolidLine(10, new RGB(0, 0, 255)));
lineStyles.Add(new SolidLine(50, new RGB(255, 255, 0)));

//At this point we have all the things to create an instance of
//DefineShape2 class
DefineShape2 defineShape = new DefineShape2(fc.NewIdentifier(),
new Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect);

//Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape);

//Place the Rectangle Character on Display List
PlaceObject2 placeObj = new PlaceObject2(defineShape.Id, 1);
//Translate the origin of newly placed object
placeObj.MatrixTransform = new MatrixTransform(2000, 2000);

//Add CONTROL TAG created above inside the flash container
fc.Add(placeObj);
//Show the next frame using CONTROL TAG and add it inside the

//flash container
fc.Add(new ShowFrame());
//Now write the flash container on disk to show its output
fc.Write("c:\\out.swf");</code><code>[Visual Basic]

'Create a flash container and set frame size and frame rate
Dim fc As New FlashContainer()
fc.FrameRate = 12.0f
fc.FrameSize = New Rect(0, 0, 4000, 4000)


'Define Style Change Record
Dim scr As New StyleChangeRecord(2,1,1,-1000,-1000)
'scr.FillStyle = 1;  //Select RED    see Below
'scr.LineStyle = 2;  //Select YELLOW see Below

'Define four edges of Rectangle
Dim ser1 As New StraightEdgeRecord(2000, 0)
Dim ser2 As New StraightEdgeRecord(0, 2000)
Dim ser3 As New StraightEdgeRecord(-2000, 0)
Dim ser4 As New StraightEdgeRecord(0, -2000)

'Put all the five shape records in a Aspose.Flash.Shapes.Shape
'object, this is just a collection that will hold shape records
'for DefineShape2 tag
Dim shapeRect As New Shape()
shapeRect.Add(scr)
shapeRect.Add(ser1)
shapeRect.Add(ser2)
shapeRect.Add(ser3)
shapeRect.Add(ser4)

'Define fill styles array
'Add two colors RED and BLUE in fill styles array
Dim fillStyles As New ArrayList()
fillStyles.Add(New SolidFill(New RGB(255, 0, 0)))
fillStyles.Add(New SolidFill(New RGB(0, 255, 0)))

'Define line styles array
'Add two colors GREEN and YELLOW in line styles array
Dim lineStyles As New ArrayList()
lineStyles.Add(New SolidLine(10, New RGB(0, 0, 255)))
lineStyles.Add(New SolidLine(50, New RGB(255, 255, 0)))

'At this point we have all the things to create an instance of
'DefineShape2 class
Dim defineShape As New DefineShape2(fc.NewIdentifier(), New Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect)

'Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape)

'Place the Rectangle Character on Display List
Dim placeObj As New PlaceObject2(defineShape.Id, 1)
'Translate the origin of newly placed object
placeObj.MatrixTransform = New MatrixTransform(2000, 2000)

'Add CONTROL TAG created above inside the flash container
fc.Add(placeObj)
'Show the next frame using CONTROL TAG and add it inside the

'flash container
fc.Add(New ShowFrame())
'Now write the flash container on disk to show its output
fc.Write("c:\out.swf")</code></example>
    </member>
    <member name="M:Aspose.Flash.Shapes.StyleChangeRecord.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Collections.ArrayList,System.Collections.ArrayList)">
      <summary>
            StyleChangeRecord constructor.
            </summary>
      <param name="lineStyleIndex">Line style index.</param>
      <param name="fillStyleIndex">Fill style index.</param>
      <param name="altFillStyleIndex">Overlap fill style index.</param>
      <param name="deltaX">Delta X coordinate from the current drawing point.</param>
      <param name="deltaY">Delta Y coordinate from the current drawing point.</param>
      <param name="lineStylesArray">Collection of line styles.</param>
      <param name="fillStylesArray">Collection of fill styles.</param>
      <example>This example shows you how to use StyleChangeRecord(Int32, Int32, Int32, Int32, Int32, ArrayList, ArrayList) constructor<code>[C#]

//Create a flash container and set frame size and frame rate
FlashContainer fc = new FlashContainer();
fc.FrameRate = 12.0f;
fc.FrameSize = new Rect(0, 0, 4000, 4000);

//Define fill styles array
//Add two colors RED and BLUE in fill styles array
ArrayList fillStyles = new ArrayList();
fillStyles.Add(new SolidFill(new RGB(255, 0, 0)));
fillStyles.Add(new SolidFill(new RGB(0, 255, 0)));

//Define line styles array
//Add two colors GREEN and YELLOW in line styles array
ArrayList lineStyles = new ArrayList();
lineStyles.Add(new SolidLine(10, new RGB(0, 0, 255)));
lineStyles.Add(new SolidLine(50, new RGB(255, 255, 0)));

//Define Style Change Record
StyleChangeRecord scr = new StyleChangeRecord(2,1,1,-1000,-1000,lineStyles,fillStyles);
//scr.FillStyle = 1;  //Select RED    see Below
//scr.LineStyle = 2;  //Select YELLOW see Below

//Define four edges of Rectangle
StraightEdgeRecord ser1 = new StraightEdgeRecord(2000, 0);
StraightEdgeRecord ser2 = new StraightEdgeRecord(0, 2000);
StraightEdgeRecord ser3 = new StraightEdgeRecord(-2000, 0);
StraightEdgeRecord ser4 = new StraightEdgeRecord(0, -2000);

//Put all the five shape records in a Aspose.Flash.Shapes.Shape
//object, this is just a collection that will hold shape records
//for DefineShape2 tag
Shape shapeRect = new Shape();
shapeRect.Add(scr);
shapeRect.Add(ser1);
shapeRect.Add(ser2);
shapeRect.Add(ser3);
shapeRect.Add(ser4);


//At this point we have all the things to create an instance of
//DefineShape2 class
DefineShape2 defineShape = new DefineShape2(fc.NewIdentifier(),
new Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect);

//Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape);

//Place the Rectangle Character on Display List
PlaceObject2 placeObj = new PlaceObject2(defineShape.Id, 1);
//Translate the origin of newly placed object
placeObj.MatrixTransform = new MatrixTransform(2000, 2000);

//Add CONTROL TAG created above inside the flash container
fc.Add(placeObj);
//Show the next frame using CONTROL TAG and add it inside the

//flash container
fc.Add(new ShowFrame());
//Now write the flash container on disk to show its output
fc.Write("c:\\out.swf");</code><code>[Visual Basic]

'Create a flash container and set frame size and frame rate
Dim fc As New FlashContainer()
fc.FrameRate = 12.0f
fc.FrameSize = New Rect(0, 0, 4000, 4000)

'Define fill styles array
'Add two colors RED and BLUE in fill styles array
Dim fillStyles As New ArrayList()
fillStyles.Add(New SolidFill(New RGB(255, 0, 0)))
fillStyles.Add(New SolidFill(New RGB(0, 255, 0)))

'Define line styles array
'Add two colors GREEN and YELLOW in line styles array
Dim lineStyles As New ArrayList()
lineStyles.Add(New SolidLine(10, New RGB(0, 0, 255)))
lineStyles.Add(New SolidLine(50, New RGB(255, 255, 0)))

'Define Style Change Record
Dim scr As New StyleChangeRecord(2,1,1,-1000,-1000,lineStyles,fillStyles)
'scr.FillStyle = 1;  //Select RED    see Below
'scr.LineStyle = 2;  //Select YELLOW see Below

'Define four edges of Rectangle
Dim ser1 As New StraightEdgeRecord(2000, 0)
Dim ser2 As New StraightEdgeRecord(0, 2000)
Dim ser3 As New StraightEdgeRecord(-2000, 0)
Dim ser4 As New StraightEdgeRecord(0, -2000)

'Put all the five shape records in a Aspose.Flash.Shapes.Shape
'object, this is just a collection that will hold shape records
'for DefineShape2 tag
Dim shapeRect As New Shape()
shapeRect.Add(scr)
shapeRect.Add(ser1)
shapeRect.Add(ser2)
shapeRect.Add(ser3)
shapeRect.Add(ser4)


'At this point we have all the things to create an instance of
'DefineShape2 class
Dim defineShape As New DefineShape2(fc.NewIdentifier(), New Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect)

'Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape)

'Place the Rectangle Character on Display List
Dim placeObj As New PlaceObject2(defineShape.Id, 1)
'Translate the origin of newly placed object
placeObj.MatrixTransform = New MatrixTransform(2000, 2000)

'Add CONTROL TAG created above inside the flash container
fc.Add(placeObj)
'Show the next frame using CONTROL TAG and add it inside the

'flash container
fc.Add(New ShowFrame())
'Now write the flash container on disk to show its output
fc.Write("c:\out.swf")</code></example>
    </member>
    <member name="M:Aspose.Flash.Shapes.StyleChangeRecord.Add(Aspose.Flash.Shapes.LineStyle)">
      <summary>
            Add a new LineStyle object to the collection of line styles.
            </summary>
      <param name="lineStyle">
        <see cref="P:Aspose.Flash.Shapes.StyleChangeRecord.LineStyle" /> object.</param>
      <example>This example shows you how to use StyleChangeRecord.Add(LineStyle) method<code>[C#]

//Create a flash container and set frame size and frame rate
FlashContainer fc = new FlashContainer();
fc.FrameRate = 12.0f;
fc.FrameSize = new Rect(0, 0, 4000, 4000);

//Define fill styles array
//Add two colors RED and BLUE in fill styles array
ArrayList fillStyles = new ArrayList();
fillStyles.Add(new SolidFill(new RGB(255, 0, 0)));
fillStyles.Add(new SolidFill(new RGB(0, 255, 0)));

//Define line styles array
//Add two colors GREEN and YELLOW in line styles array
ArrayList lineStyles = new ArrayList();
lineStyles.Add(new SolidLine(10, new RGB(0, 0, 255)));
lineStyles.Add(new SolidLine(50, new RGB(255, 255, 0)));

//Define Style Change Record
StyleChangeRecord scr = new StyleChangeRecord(-1000, -1000);
scr.FillStyle = 1;  //Select RED
scr.LineStyle = 2;  //Select YELLOW

//add fill tyle and line style
scr.Add(new SolidFill(new RGB(255, 0, 0)));
scr.Add(new SolidLine(new RGB(0, 255, 0)));


//Define four edges of Rectangle
StraightEdgeRecord ser1 = new StraightEdgeRecord(2000, 0);
StraightEdgeRecord ser2 = new StraightEdgeRecord(0, 2000);
StraightEdgeRecord ser3 = new StraightEdgeRecord(-2000, 0);
StraightEdgeRecord ser4 = new StraightEdgeRecord(0, -2000);

//Put all the five shape records in a Aspose.Flash.Shapes.Shape
//object, this is just a collection that will hold shape records
//for DefineShape2 tag
Shape shapeRect = new Shape();
shapeRect.Add(scr);
shapeRect.Add(ser1);
shapeRect.Add(ser2);
shapeRect.Add(ser3);
shapeRect.Add(ser4);


//At this point we have all the things to create an instance of
//DefineShape2 class
DefineShape2 defineShape = new DefineShape2(fc.NewIdentifier(),
new Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect);

//Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape);

//Place the Rectangle Character on Display List
PlaceObject2 placeObj = new PlaceObject2(defineShape.Id, 1);
//Translate the origin of newly placed object
placeObj.MatrixTransform = new MatrixTransform(2000, 2000);

//Add CONTROL TAG created above inside the flash container
fc.Add(placeObj);
//Show the next frame using CONTROL TAG and add it inside the

//flash container
fc.Add(new ShowFrame());
//Now write the flash container on disk to show its output
fc.Write("c:\\out.swf");</code><code>[Visual Basic]

'Create a flash container and set frame size and frame rate
Dim fc As New FlashContainer()
fc.FrameRate = 12.0f
fc.FrameSize = New Rect(0, 0, 4000, 4000)

'Define fill styles array
'Add two colors RED and BLUE in fill styles array
Dim fillStyles As New ArrayList()
fillStyles.Add(New SolidFill(New RGB(255, 0, 0)))
fillStyles.Add(New SolidFill(New RGB(0, 255, 0)))

'Define line styles array
'Add two colors GREEN and YELLOW in line styles array
Dim lineStyles As New ArrayList()
lineStyles.Add(New SolidLine(10, New RGB(0, 0, 255)))
lineStyles.Add(New SolidLine(50, New RGB(255, 255, 0)))

'Define Style Change Record
Dim scr As New StyleChangeRecord(-1000, -1000)
scr.FillStyle = 1 'Select RED
scr.LineStyle = 2 'Select YELLOW

'add fill tyle and line style
scr.Add(New SolidFill(New RGB(255, 0, 0)))
scr.Add(New SolidLine(New RGB(0, 255, 0)))


'Define four edges of Rectangle
Dim ser1 As New StraightEdgeRecord(2000, 0)
Dim ser2 As New StraightEdgeRecord(0, 2000)
Dim ser3 As New StraightEdgeRecord(-2000, 0)
Dim ser4 As New StraightEdgeRecord(0, -2000)

'Put all the five shape records in a Aspose.Flash.Shapes.Shape
'object, this is just a collection that will hold shape records
'for DefineShape2 tag
Dim shapeRect As New Shape()
shapeRect.Add(scr)
shapeRect.Add(ser1)
shapeRect.Add(ser2)
shapeRect.Add(ser3)
shapeRect.Add(ser4)


'At this point we have all the things to create an instance of
'DefineShape2 class
Dim defineShape As New DefineShape2(fc.NewIdentifier(), New Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect)

'Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape)

'Place the Rectangle Character on Display List
Dim placeObj As New PlaceObject2(defineShape.Id, 1)
'Translate the origin of newly placed object
placeObj.MatrixTransform = New MatrixTransform(2000, 2000)

'Add CONTROL TAG created above inside the flash container
fc.Add(placeObj)
'Show the next frame using CONTROL TAG and add it inside the

'flash container
fc.Add(New ShowFrame())
'Now write the flash container on disk to show its output
fc.Write("c:\out.swf")</code></example>
    </member>
    <member name="M:Aspose.Flash.Shapes.StyleChangeRecord.Add(Aspose.Flash.Shapes.FillStyle)">
      <summary>
            Add a new FillStyle object to the collection of fill styles.
            </summary>
      <param name="fillStyle">
        <see cref="P:Aspose.Flash.Shapes.StyleChangeRecord.FillStyle" /> object.</param>
      <example>This example shows you how to use StyleChangeRecord.Add(FillStyle) method<code>[C#]

//Create a flash container and set frame size and frame rate
FlashContainer fc = new FlashContainer();
fc.FrameRate = 12.0f;
fc.FrameSize = new Rect(0, 0, 4000, 4000);

//Define fill styles array
//Add two colors RED and BLUE in fill styles array
ArrayList fillStyles = new ArrayList();
fillStyles.Add(new SolidFill(new RGB(255, 0, 0)));
fillStyles.Add(new SolidFill(new RGB(0, 255, 0)));

//Define line styles array
//Add two colors GREEN and YELLOW in line styles array
ArrayList lineStyles = new ArrayList();
lineStyles.Add(new SolidLine(10, new RGB(0, 0, 255)));
lineStyles.Add(new SolidLine(50, new RGB(255, 255, 0)));

//Define Style Change Record
StyleChangeRecord scr = new StyleChangeRecord(-1000, -1000);
scr.FillStyle = 1;  //Select RED
scr.LineStyle = 2;  //Select YELLOW

//add fill tyle and line style
scr.Add(new SolidFill(new RGB(255, 0, 0)));
scr.Add(new SolidLine(new RGB(0, 255, 0)));


//Define four edges of Rectangle
StraightEdgeRecord ser1 = new StraightEdgeRecord(2000, 0);
StraightEdgeRecord ser2 = new StraightEdgeRecord(0, 2000);
StraightEdgeRecord ser3 = new StraightEdgeRecord(-2000, 0);
StraightEdgeRecord ser4 = new StraightEdgeRecord(0, -2000);

//Put all the five shape records in a Aspose.Flash.Shapes.Shape
//object, this is just a collection that will hold shape records
//for DefineShape2 tag
Shape shapeRect = new Shape();
shapeRect.Add(scr);
shapeRect.Add(ser1);
shapeRect.Add(ser2);
shapeRect.Add(ser3);
shapeRect.Add(ser4);


//At this point we have all the things to create an instance of
//DefineShape2 class
DefineShape2 defineShape = new DefineShape2(fc.NewIdentifier(),
new Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect);

//Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape);

//Place the Rectangle Character on Display List
PlaceObject2 placeObj = new PlaceObject2(defineShape.Id, 1);
//Translate the origin of newly placed object
placeObj.MatrixTransform = new MatrixTransform(2000, 2000);

//Add CONTROL TAG created above inside the flash container
fc.Add(placeObj);
//Show the next frame using CONTROL TAG and add it inside the

//flash container
fc.Add(new ShowFrame());
//Now write the flash container on disk to show its output
fc.Write("c:\\out.swf");</code><code>[Visual Basic]

'Create a flash container and set frame size and frame rate
Dim fc As New FlashContainer()
fc.FrameRate = 12.0f
fc.FrameSize = New Rect(0, 0, 4000, 4000)

'Define fill styles array
'Add two colors RED and BLUE in fill styles array
Dim fillStyles As New ArrayList()
fillStyles.Add(New SolidFill(New RGB(255, 0, 0)))
fillStyles.Add(New SolidFill(New RGB(0, 255, 0)))

'Define line styles array
'Add two colors GREEN and YELLOW in line styles array
Dim lineStyles As New ArrayList()
lineStyles.Add(New SolidLine(10, New RGB(0, 0, 255)))
lineStyles.Add(New SolidLine(50, New RGB(255, 255, 0)))

'Define Style Change Record
Dim scr As New StyleChangeRecord(-1000, -1000)
scr.FillStyle = 1 'Select RED
scr.LineStyle = 2 'Select YELLOW

'add fill tyle and line style
scr.Add(New SolidFill(New RGB(255, 0, 0)))
scr.Add(New SolidLine(New RGB(0, 255, 0)))


'Define four edges of Rectangle
Dim ser1 As New StraightEdgeRecord(2000, 0)
Dim ser2 As New StraightEdgeRecord(0, 2000)
Dim ser3 As New StraightEdgeRecord(-2000, 0)
Dim ser4 As New StraightEdgeRecord(0, -2000)

'Put all the five shape records in a Aspose.Flash.Shapes.Shape
'object, this is just a collection that will hold shape records
'for DefineShape2 tag
Dim shapeRect As New Shape()
shapeRect.Add(scr)
shapeRect.Add(ser1)
shapeRect.Add(ser2)
shapeRect.Add(ser3)
shapeRect.Add(ser4)


'At this point we have all the things to create an instance of
'DefineShape2 class
Dim defineShape As New DefineShape2(fc.NewIdentifier(), New Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect)

'Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape)

'Place the Rectangle Character on Display List
Dim placeObj As New PlaceObject2(defineShape.Id, 1)
'Translate the origin of newly placed object
placeObj.MatrixTransform = New MatrixTransform(2000, 2000)

'Add CONTROL TAG created above inside the flash container
fc.Add(placeObj)
'Show the next frame using CONTROL TAG and add it inside the

'flash container
fc.Add(New ShowFrame())
'Now write the flash container on disk to show its output
fc.Write("c:\out.swf")</code></example>
    </member>
    <member name="P:Aspose.Flash.Shapes.StyleChangeRecord.DeltaX">
      <summary>
            Returns or sets the delta of X coordinate.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Shapes.StyleChangeRecord.DeltaY">
      <summary>
            Returns or sets the delta of Y coordinate.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Shapes.StyleChangeRecord.LineStyle">
      <summary>
            Returns or sets the line style to draw shapes.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Shapes.StyleChangeRecord.FillStyle">
      <summary>
            Returns or sets the fill style to fill shapes.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Shapes.StyleChangeRecord.OverlapFillStyle">
      <summary>
            Returns oro sets the fill style to fill overlapping areas of shape.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Shapes.StyleChangeRecord.LineStyles">
      <summary>
            Returns or sets the collection of line styles.
            Read/write <see cref="T:System.Collections.ArrayList" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Shapes.StyleChangeRecord.FillStyles">
      <summary>
            Returns or sets the collection of fill styles.
            Read/write <see cref="T:System.Collections.ArrayList" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Sound.StartSound2">
      <summary>
            Represents sound control tag it either start or stop playing sound defined by class name.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Sound.StartSound2.#ctor(System.String,Aspose.Flash.Sound.SoundInfo)">
      <summary>
            StartSound2 constructor.
            </summary>
      <param name="className">Name of the  sound class.</param>
      <param name="sound">Sound information. See <see cref="P:Aspose.Flash.Sound.StartSound2.SoundInfo" />.</param>
    </member>
    <member name="P:Aspose.Flash.Sound.StartSound2.SoundInfo">
      <summary>
            Gets or sets the sound information.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Sound.StartSound2.SoundClassName">
      <summary>
            Gets or sets the name of the sound class.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Sound.DefineSound">
      <summary>
            Represents the sound. It includes the sampling rate, size of each
            sample (8 or 16 bit), a stereo/mono flag, and an array of audio samples.
            The audio data may be stored in four ways:
            <ul><li>As uncompressed raw samples.</li><li>Compressed using an ADPCM algorithm.</li><li>Compressed using MP3 compression (SWF 4 or later only).</li><li>Compressed using the Nellymoser Asao codec (SWF 6 or later only).</li></ul></summary>
      <example>This example shows you how to use DefineSound class<code>[C#]

//create flash container object
FlashContainer flash = new FlashContainer();

//read contents of a sound file into file stream and convert to byte array
FileStream f = new FileStream("sound.mp3", FileMode.Open);
f.Position = 0;
System.IO.BinaryReader reader = new System.IO.BinaryReader(f);
int length = (int)f.Length;
byte[] sndBytes = reader.ReadBytes(length);
reader.Close();
f.Close();

//create a sound stream block
SoundStreamBlock sndD = new SoundStreamBlock(sndBytes);

//define sound
DefineSound snd = new DefineSound(flash.NewIdentifier(), SoundFormat.MP3, SampleRate.SampleRate44khz , true, SampleSize.SampleSize16bits ,183600,     sndD.StreamSoundData);

//set sound control
SoundControl sndC = SoundControl.Start;

//create a sound envelope
SoundEnvelope se = new SoundEnvelope(132, 50, 60);
ArrayList list = new ArrayList();
list.Add(se);

//set sound info
SoundInfo sndI = new SoundInfo(snd.SoundId, sndC);

//set sound evelope property of sound info object
sndI.Envelopes = list;

//add sound to flash
flash.Add(snd);

//define start sound control
StartSound s = new StartSound(sndI);

//add start sound control to flash container
flash.Add(s);</code><code>[Visual Basic]

'create flash container object
Dim flash As New FlashContainer()

'read contents of a sound file into file stream and convert to byte array
Dim f As New FileStream("sound.mp3", FileMode.Open)
f.Position = 0
Dim reader As New System.IO.BinaryReader(f)
Dim length As Integer = CInt(Fix(f.Length))
Dim sndBytes() As Byte = reader.ReadBytes(length)
reader.Close()
f.Close()

'create a sound stream block
Dim sndD As New SoundStreamBlock(sndBytes)

'define sound
Dim snd As New DefineSound(flash.NewIdentifier(), SoundFormat.MP3, SampleRate.SampleRate44khz, True, SampleSize.SampleSize16bits,183600, sndD.StreamSoundData)

'set sound control
Dim sndC As SoundControl = SoundControl.Start

'create a sound envelope
Dim se As New SoundEnvelope(132, 50, 60)
Dim list As New ArrayList()
list.Add(se)

'set sound info
Dim sndI As New SoundInfo(snd.SoundId, sndC)

'set sound evelope property of sound info object
sndI.Envelopes = list

'add sound to flash
flash.Add(snd)

'define start sound control
Dim s As New StartSound(sndI)

'add start sound control to flash container
flash.Add(s)</code></example>
    </member>
    <member name="M:Aspose.Flash.Sound.DefineSound.#ctor(System.Int32,Aspose.Flash.Sound.SoundFormat,Aspose.Flash.Sound.SampleRate,System.Boolean,Aspose.Flash.Sound.SampleSize,System.Int32,System.Byte[])">
      <summary>
            DefineSound constructor.
            </summary>
      <param name="id">Sound Id.</param>
      <param name="format">Sound format. See <see cref="P:Aspose.Flash.Sound.DefineSound.SoundFormat" />.</param>
      <param name="rate">Sound samples rate. See <see cref="P:Aspose.Flash.Sound.DefineSound.SampleRate" />.</param>
      <param name="stereo">Determines whether the sound has stereo format.</param>
      <param name="size">Size of uncompressed sound samples in bits. See <see cref="P:Aspose.Flash.Sound.DefineSound.SampleSize" />.</param>
      <param name="count">Number of sound samples.</param>
      <param name="bytes">Sound data.</param>
      <example>This example shows you how to use DefineSound constructor<code>[C#]

//create flash container object
FlashContainer flash = new FlashContainer();

//read contents of a sound file into file stream and convert to byte array
FileStream f = new FileStream("sound.mp3", FileMode.Open);
f.Position = 0;
System.IO.BinaryReader reader = new System.IO.BinaryReader(f);
int length = (int)f.Length;
byte[] sndBytes = reader.ReadBytes(length);
reader.Close();
f.Close();

//create a sound stream block
SoundStreamBlock sndD = new SoundStreamBlock(sndBytes);

//define sound
DefineSound snd = new DefineSound(flash.NewIdentifier(), SoundFormat.MP3, SampleRate.SampleRate44khz , true, SampleSize.SampleSize16bits ,183600,     sndD.StreamSoundData);

//set sound control
SoundControl sndC = SoundControl.Start;

//create a sound envelope
SoundEnvelope se = new SoundEnvelope(132, 50, 60);
ArrayList list = new ArrayList();
list.Add(se);

//set sound info
SoundInfo sndI = new SoundInfo(snd.SoundId, sndC);

//set sound evelope property of sound info object
sndI.Envelopes = list;

//add sound to flash
flash.Add(snd);

//define start sound control
StartSound s = new StartSound(sndI);

//add start sound control to flash container
flash.Add(s);</code><code>[Visual Basic]

'create flash container object
Dim flash As New FlashContainer()

'read contents of a sound file into file stream and convert to byte array
Dim f As New FileStream("sound.mp3", FileMode.Open)
f.Position = 0
Dim reader As New System.IO.BinaryReader(f)
Dim length As Integer = CInt(Fix(f.Length))
Dim sndBytes() As Byte = reader.ReadBytes(length)
reader.Close()
f.Close()

'create a sound stream block
Dim sndD As New SoundStreamBlock(sndBytes)

'define sound
Dim snd As New DefineSound(flash.NewIdentifier(), SoundFormat.MP3, SampleRate.SampleRate44khz, True, SampleSize.SampleSize16bits,183600, sndD.StreamSoundData)

'set sound control
Dim sndC As SoundControl = SoundControl.Start

'create a sound envelope
Dim se As New SoundEnvelope(132, 50, 60)
Dim list As New ArrayList()
list.Add(se)

'set sound info
Dim sndI As New SoundInfo(snd.SoundId, sndC)

'set sound evelope property of sound info object
sndI.Envelopes = list

'add sound to flash
flash.Add(snd)

'define start sound control
Dim s As New StartSound(sndI)

'add start sound control to flash container
flash.Add(s)</code></example>
    </member>
    <member name="P:Aspose.Flash.Sound.DefineSound.SoundId">
      <summary>
            Returns or sets the Id of a sound.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Sound.DefineSound.SoundFormat">
      <summary>
            Returns or sets the format of SoundData.
            Read/write <see cref="P:Aspose.Flash.Sound.DefineSound.SoundFormat" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Sound.DefineSound.SampleRate">
      <summary>
            Returns or sets the sound samples rate.
            Read/write <see cref="P:Aspose.Flash.Sound.DefineSound.SampleRate" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Sound.DefineSound.IsStereo">
      <summary>
            Determines whether the sound has stereo format.
            Read/write <see cref="T:System.Boolean" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Sound.DefineSound.SampleSize">
      <summary>
            Returns or sets the size of sound sample.
            Read/write <see cref="P:Aspose.Flash.Sound.DefineSound.SampleSize" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Sound.DefineSound.SoundSampleCount">
      <summary>
            Returns or sets the number of sound samples.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Sound.DefineSound.SoundData">
      <summary>
            Returns or sets the sound data.
            Read/write <see cref="T:System.Byte" />[].
            </summary>
    </member>
    <member name="T:Aspose.Flash.Sound.SampleRate">
      <summary>
            Represents samples rate of a sound data.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Sound.SampleRate.SampleRate5khz">
      <summary>
            5.5.khz. Not allowed for MP3 sound.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Sound.SampleRate.SampleRate11khz">
      <summary>
            11 khz.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Sound.SampleRate.SampleRate22khz">
      <summary>
            22 khz
            </summary>
    </member>
    <member name="F:Aspose.Flash.Sound.SampleRate.SampleRate44khz">
      <summary>
            44 khz.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Sound.SampleSize">
      <summary>
            Represents samples size.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Sound.SampleSize.SampleSize8bits">
      <summary>
            8 bit samples. Can be used for uncompressed sound only.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Sound.SampleSize.SampleSize16bits">
      <summary>
            16 bits samples.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Sound.SoundControl">
      <summary>
            Represents constants to determine how the sound is played.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Sound.SoundControl.Start">
      <summary>
            Start playing the sound.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Sound.SoundControl.Continue">
      <summary>
            Start playing the sound or continues if it is already playing.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Sound.SoundControl.Stop">
      <summary>
            Stop playing the sound.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Sound.SoundEnvelope">
      <summary>
            Represents the envelope which controls how a particular sound is played over time.
            </summary>
      <example>This example shows you how to use SoundEnvelope class<code>[C#]

//create flash container object
FlashContainer flash = new FlashContainer();

//read contents of a sound file into file stream and convert to byte array
FileStream f = new FileStream("sound.mp3", FileMode.Open);
f.Position = 0;
System.IO.BinaryReader reader = new System.IO.BinaryReader(f);
int length = (int)f.Length;
byte[] sndBytes = reader.ReadBytes(length);
reader.Close();
f.Close();

//create a sound stream block
SoundStreamBlock sndD = new SoundStreamBlock(sndBytes);

//define sound
DefineSound snd = new DefineSound(flash.NewIdentifier(), SoundFormat.MP3, SampleRate.SampleRate44khz , true, SampleSize.SampleSize16bits ,183600,     sndD.StreamSoundData);

//set sound control
SoundControl sndC = SoundControl.Start;

//create a sound envelope
SoundEnvelope se = new SoundEnvelope(132, 50, 60);
ArrayList list = new ArrayList();
list.Add(se);

//set sound info
SoundInfo sndI = new SoundInfo(snd.SoundId, sndC);

//set sound evelope property of sound info object
sndI.Envelopes = list;

//add sound to flash
flash.Add(snd);

//define start sound control
StartSound s = new StartSound(sndI);

//add start sound control to flash container
flash.Add(s);</code><code>[Visual Basic]

'create flash container object
Dim flash As New FlashContainer()

'read contents of a sound file into file stream and convert to byte array
Dim f As New FileStream("sound.mp3", FileMode.Open)
f.Position = 0
Dim reader As New System.IO.BinaryReader(f)
Dim length As Integer = CInt(Fix(f.Length))
Dim sndBytes() As Byte = reader.ReadBytes(length)
reader.Close()
f.Close()

'create a sound stream block
Dim sndD As New SoundStreamBlock(sndBytes)

'define sound
Dim snd As New DefineSound(flash.NewIdentifier(), SoundFormat.MP3, SampleRate.SampleRate44khz, True, SampleSize.SampleSize16bits,183600, sndD.StreamSoundData)

'set sound control
Dim sndC As SoundControl = SoundControl.Start

'create a sound envelope
Dim se As New SoundEnvelope(132, 50, 60)
Dim list As New ArrayList()
list.Add(se)

'set sound info
Dim sndI As New SoundInfo(snd.SoundId, sndC)

'set sound evelope property of sound info object
sndI.Envelopes = list

'add sound to flash
flash.Add(snd)

'define start sound control
Dim s As New StartSound(sndI)

'add start sound control to flash container
flash.Add(s)</code></example>
    </member>
    <member name="M:Aspose.Flash.Sound.SoundEnvelope.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>
            SoundEnvelope constructor.
            </summary>
      <param name="envPosition">Envelope point in the data stream.</param>
      <param name="leftVolume">Volume level for the left sound channel.</param>
      <param name="rightVolume">Volume level for the right sound channel.</param>
      <example>This example shows you how to use DefineEnvelope constructor<code>[C#]

//create flash container object
FlashContainer flash = new FlashContainer();

//read contents of a sound file into file stream and convert to byte array
FileStream f = new FileStream("sound.mp3", FileMode.Open);
f.Position = 0;
System.IO.BinaryReader reader = new System.IO.BinaryReader(f);
int length = (int)f.Length;
byte[] sndBytes = reader.ReadBytes(length);
reader.Close();
f.Close();

//create a sound stream block
SoundStreamBlock sndD = new SoundStreamBlock(sndBytes);

//define sound
DefineSound snd = new DefineSound(flash.NewIdentifier(), SoundFormat.MP3, SampleRate.SampleRate44khz , true, SampleSize.SampleSize16bits ,183600,     sndD.StreamSoundData);

//set sound control
SoundControl sndC = SoundControl.Start;

//create a sound envelope
SoundEnvelope se = new SoundEnvelope(132, 50, 60);
ArrayList list = new ArrayList();
list.Add(se);

//set sound info
SoundInfo sndI = new SoundInfo(snd.SoundId, sndC);

//set sound evelope property of sound info object
sndI.Envelopes = list;

//add sound to flash
flash.Add(snd);

//define start sound control
StartSound s = new StartSound(sndI);

//add start sound control to flash container
flash.Add(s);</code><code>[Visual Basic]

'create flash container object
Dim flash As New FlashContainer()

'read contents of a sound file into file stream and convert to byte array
Dim f As New FileStream("sound.mp3", FileMode.Open)
f.Position = 0
Dim reader As New System.IO.BinaryReader(f)
Dim length As Integer = CInt(Fix(f.Length))
Dim sndBytes() As Byte = reader.ReadBytes(length)
reader.Close()
f.Close()

'create a sound stream block
Dim sndD As New SoundStreamBlock(sndBytes)

'define sound
Dim snd As New DefineSound(flash.NewIdentifier(), SoundFormat.MP3, SampleRate.SampleRate44khz, True, SampleSize.SampleSize16bits,183600, sndD.StreamSoundData)

'set sound control
Dim sndC As SoundControl = SoundControl.Start

'create a sound envelope
Dim se As New SoundEnvelope(132, 50, 60)
Dim list As New ArrayList()
list.Add(se)

'set sound info
Dim sndI As New SoundInfo(snd.SoundId, sndC)

'set sound evelope property of sound info object
sndI.Envelopes = list

'add sound to flash
flash.Add(snd)

'define start sound control
Dim s As New StartSound(sndI)

'add start sound control to flash container
flash.Add(s)</code></example>
    </member>
    <member name="P:Aspose.Flash.Sound.SoundEnvelope.EnvelopePosition">
      <summary>
            Returns the position of envelope point as the number of 44kHz samples.
            Value should be multiplied accordingly if use a sample rate less than 44kHz.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Sound.SoundEnvelope.LeftVolume">
      <summary>
            Returns or sets the volume level (0..32768) of the left channel.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Sound.SoundEnvelope.RightVolume">
      <summary>
            Returns or sets the volume level (0..32768) of the right channel.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Sound.SoundFormat">
      <summary>
            Represents format of a sound data.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Sound.SoundFormat.NATIVE_PCM">
      <summary>
            Uncompressed PCM format, big-endian byte order.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Sound.SoundFormat.ADPCM">
      <summary>
            Compressed ADPCM format.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Sound.SoundFormat.MP3">
      <summary>
            Compressed MP3 format (SWF 4 or later only).
            </summary>
    </member>
    <member name="F:Aspose.Flash.Sound.SoundFormat.PCM">
      <summary>
            Uncompressed PCM format, little-endian byte order.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Sound.SoundFormat.NELLYMOSER8KHZ">
      <summary>
            Compressed Nellymoser 8kHz mono format (SWF 6 or later only).
            </summary>
    </member>
    <member name="F:Aspose.Flash.Sound.SoundFormat.NELLYMOSER">
      <summary>
            Compressed Nellymoser Asao format (SWF 6 or later only).
            </summary>
    </member>
    <member name="F:Aspose.Flash.Sound.SoundFormat.SPEEX">
      <summary>
            Speex-encoded sound data.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Sound.SoundInfo">
      <summary>
            Represents how an event sound is played.
            </summary>
      <example>This example shows you how to use SoundInfo class<code>[C#]

//create flash container object
FlashContainer flash = new FlashContainer();

//read contents of a sound file into file stream and convert to byte array
FileStream f = new FileStream("sound.mp3", FileMode.Open);
f.Position = 0;
System.IO.BinaryReader reader = new System.IO.BinaryReader(f);
int length = (int)f.Length;
byte[] sndBytes = reader.ReadBytes(length);
reader.Close();
f.Close();

//create a sound stream block
SoundStreamBlock sndD = new SoundStreamBlock(sndBytes);

//define sound
DefineSound snd = new DefineSound(flash.NewIdentifier(), SoundFormat.MP3, SampleRate.SampleRate44khz , true, SampleSize.SampleSize16bits ,183600,     sndD.StreamSoundData);

//set sound control
SoundControl sndC = SoundControl.Start;

//create a sound envelope
SoundEnvelope se = new SoundEnvelope(132, 50, 60);
ArrayList list = new ArrayList();
list.Add(se);

//set sound info
SoundInfo sndI = new SoundInfo(snd.SoundId, sndC);

//set sound evelope property of sound info object
sndI.Envelopes = list;

//add sound to flash
flash.Add(snd);

//define start sound control
StartSound s = new StartSound(sndI);

//add start sound control to flash container
flash.Add(s);</code><code>[Visual Basic]

'create flash container object
Dim flash As New FlashContainer()

'read contents of a sound file into file stream and convert to byte array
Dim f As New FileStream("sound.mp3", FileMode.Open)
f.Position = 0
Dim reader As New System.IO.BinaryReader(f)
Dim length As Integer = CInt(Fix(f.Length))
Dim sndBytes() As Byte = reader.ReadBytes(length)
reader.Close()
f.Close()

'create a sound stream block
Dim sndD As New SoundStreamBlock(sndBytes)

'define sound
Dim snd As New DefineSound(flash.NewIdentifier(), SoundFormat.MP3, SampleRate.SampleRate44khz, True, SampleSize.SampleSize16bits,183600, sndD.StreamSoundData)

'set sound control
Dim sndC As SoundControl = SoundControl.Start

'create a sound envelope
Dim se As New SoundEnvelope(132, 50, 60)
Dim list As New ArrayList()
list.Add(se)

'set sound info
Dim sndI As New SoundInfo(snd.SoundId, sndC)

'set sound evelope property of sound info object
sndI.Envelopes = list

'add sound to flash
flash.Add(snd)

'define start sound control
Dim s As New StartSound(sndI)

'add start sound control to flash container
flash.Add(s)</code></example>
    </member>
    <member name="M:Aspose.Flash.Sound.SoundInfo.#ctor(System.Int32,Aspose.Flash.Sound.SoundControl)">
      <summary>
            SoundInfo constructor.
            </summary>
      <param name="id">The sound identifier.</param>
      <param name="control">Determines how the sound is played. See <see cref="T:Aspose.Flash.Sound.SoundControl" />.</param>
      <example>This example shows you how to use SoundInfo constructor<code>[C#]

//create flash container object
FlashContainer flash = new FlashContainer();

//read contents of a sound file into file stream and convert to byte array
FileStream f = new FileStream("sound.mp3", FileMode.Open);
f.Position = 0;
System.IO.BinaryReader reader = new System.IO.BinaryReader(f);
int length = (int)f.Length;
byte[] sndBytes = reader.ReadBytes(length);
reader.Close();
f.Close();

//create a sound stream block
SoundStreamBlock sndD = new SoundStreamBlock(sndBytes);

//define sound
DefineSound snd = new DefineSound(flash.NewIdentifier(), SoundFormat.MP3, SampleRate.SampleRate44khz , true, SampleSize.SampleSize16bits ,183600,     sndD.StreamSoundData);

//set sound control
SoundControl sndC = SoundControl.Start;

//create a sound envelope
SoundEnvelope se = new SoundEnvelope(132, 50, 60);
ArrayList list = new ArrayList();
list.Add(se);

//set sound info
SoundInfo sndI = new SoundInfo(snd.SoundId, sndC);

//set sound evelope property of sound info object
sndI.Envelopes = list;

//add sound to flash
flash.Add(snd);

//define start sound control
StartSound s = new StartSound(sndI);

//add start sound control to flash container
flash.Add(s);</code><code>[Visual Basic]

'create flash container object
Dim flash As New FlashContainer()

'read contents of a sound file into file stream and convert to byte array
Dim f As New FileStream("sound.mp3", FileMode.Open)
f.Position = 0
Dim reader As New System.IO.BinaryReader(f)
Dim length As Integer = CInt(Fix(f.Length))
Dim sndBytes() As Byte = reader.ReadBytes(length)
reader.Close()
f.Close()

'create a sound stream block
Dim sndD As New SoundStreamBlock(sndBytes)

'define sound
Dim snd As New DefineSound(flash.NewIdentifier(), SoundFormat.MP3, SampleRate.SampleRate44khz, True, SampleSize.SampleSize16bits,183600, sndD.StreamSoundData)

'set sound control
Dim sndC As SoundControl = SoundControl.Start

'create a sound envelope
Dim se As New SoundEnvelope(132, 50, 60)
Dim list As New ArrayList()
list.Add(se)

'set sound info
Dim sndI As New SoundInfo(snd.SoundId, sndC)

'set sound evelope property of sound info object
sndI.Envelopes = list

'add sound to flash
flash.Add(snd)

'define start sound control
Dim s As New StartSound(sndI)

'add start sound control to flash container
flash.Add(s)</code></example>
    </member>
    <member name="M:Aspose.Flash.Sound.SoundInfo.Add(Aspose.Flash.Sound.SoundEnvelope)">
      <summary>
            Add a SoundEnvelope object to the array of envelope objects.
            </summary>
      <param name="envelope">
        <see cref="T:Aspose.Flash.Sound.SoundEnvelope" /> object.</param>
    </member>
    <member name="P:Aspose.Flash.Sound.SoundInfo.SoundId">
      <summary>
            Returns or sets the ID of the sound to play.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Sound.SoundInfo.Mode">
      <summary>
            Determines or sets how the sound is played.
            Read/write <see cref="T:Aspose.Flash.Sound.SoundControl" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Sound.SoundInfo.FadeInPoint">
      <summary>
            Returns or sets the sample number that the sound increases in volume to
            until full volume is reached. Set to 0 if the sound does not fade in.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Sound.SoundInfo.FadeOutPoint">
      <summary>
            Returns or sets the sample number at which the sound starts to fades
            until the sound has finished playing. Set to 0 if the sound does not fade out.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Sound.SoundInfo.LoopCount">
      <summary>
            Returns or sets the number of times the sound is repeated.
            Must be at least 1 if the sound is being played.
            Set to 0 if the sound is being stopped.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Sound.SoundInfo.Envelopes">
      <summary>
            Returns or sets the collection of <see cref="T:Aspose.Flash.Sound.SoundEnvelope" /> records.
            Read/write <see cref="T:System.Collections.ArrayList" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Sound.SoundStreamBlock">
      <summary>
            Represents the sound data that is interleaved with frame data so that sounds
            can be played as the movie is streamed over a network connection. The tag
            must be preceded by a SoundStreamHead or SoundStreamHead2 tag.
            There is may be only one SoundStreamBlock tag per SWF frame.
            </summary>
      <example>This example shows you how to use SoundStreamBlock class<code>[C#]

//create flash container object
FlashContainer flash = new FlashContainer();

//read contents of a sound file into file stream and convert to byte array
FileStream f = new FileStream("sound.mp3", FileMode.Open);
f.Position = 0;
System.IO.BinaryReader reader = new System.IO.BinaryReader(f);
int length = (int)f.Length;
byte[] sndBytes = reader.ReadBytes(length);
reader.Close();
f.Close();

//create a sound stream block
SoundStreamBlock sndD = new SoundStreamBlock(sndBytes);

//define sound
DefineSound snd = new DefineSound(flash.NewIdentifier(), SoundFormat.MP3, SampleRate.SampleRate44khz , true, SampleSize.SampleSize16bits ,183600,     sndD.StreamSoundData);

//set sound control
SoundControl sndC = SoundControl.Start;

//create a sound envelope
SoundEnvelope se = new SoundEnvelope(132, 50, 60);
ArrayList list = new ArrayList();
list.Add(se);

//set sound info
SoundInfo sndI = new SoundInfo(snd.SoundId, sndC);

//set sound evelope property of sound info object
sndI.Envelopes = list;

//add sound to flash
flash.Add(snd);

//define start sound control
StartSound s = new StartSound(sndI);

//add start sound control to flash container
flash.Add(s);</code><code>[Visual Basic]

'create flash container object
Dim flash As New FlashContainer()

'read contents of a sound file into file stream and convert to byte array
Dim f As New FileStream("sound.mp3", FileMode.Open)
f.Position = 0
Dim reader As New System.IO.BinaryReader(f)
Dim length As Integer = CInt(Fix(f.Length))
Dim sndBytes() As Byte = reader.ReadBytes(length)
reader.Close()
f.Close()

'create a sound stream block
Dim sndD As New SoundStreamBlock(sndBytes)

'define sound
Dim snd As New DefineSound(flash.NewIdentifier(), SoundFormat.MP3, SampleRate.SampleRate44khz, True, SampleSize.SampleSize16bits,183600, sndD.StreamSoundData)

'set sound control
Dim sndC As SoundControl = SoundControl.Start

'create a sound envelope
Dim se As New SoundEnvelope(132, 50, 60)
Dim list As New ArrayList()
list.Add(se)

'set sound info
Dim sndI As New SoundInfo(snd.SoundId, sndC)

'set sound evelope property of sound info object
sndI.Envelopes = list

'add sound to flash
flash.Add(snd)

'define start sound control
Dim s As New StartSound(sndI)

'add start sound control to flash container
flash.Add(s)</code></example>
    </member>
    <member name="M:Aspose.Flash.Sound.SoundStreamBlock.#ctor(System.Byte[])">
      <summary>
            SoundStreamBlock constructor.
            </summary>
      <param name="bytes">Array of bytes containing the sound data.</param>
      <example>This example shows you how to use SoundStreamBlock constructor<code>[C#]

//create flash container object
FlashContainer flash = new FlashContainer();

//read contents of a sound file into file stream and convert to byte array
FileStream f = new FileStream("sound.mp3", FileMode.Open);
f.Position = 0;
System.IO.BinaryReader reader = new System.IO.BinaryReader(f);
int length = (int)f.Length;
byte[] sndBytes = reader.ReadBytes(length);
reader.Close();
f.Close();

//create a sound stream block
SoundStreamBlock sndD = new SoundStreamBlock(sndBytes);

//define sound
DefineSound snd = new DefineSound(flash.NewIdentifier(), SoundFormat.MP3, SampleRate.SampleRate44khz , true, SampleSize.SampleSize16bits ,183600,     sndD.StreamSoundData);

//set sound control
SoundControl sndC = SoundControl.Start;

//create a sound envelope
SoundEnvelope se = new SoundEnvelope(132, 50, 60);
ArrayList list = new ArrayList();
list.Add(se);

//set sound info
SoundInfo sndI = new SoundInfo(snd.SoundId, sndC);

//set sound evelope property of sound info object
sndI.Envelopes = list;

//add sound to flash
flash.Add(snd);

//define start sound control
StartSound s = new StartSound(sndI);

//add start sound control to flash container
flash.Add(s);</code><code>[Visual Basic]

'create flash container object
Dim flash As New FlashContainer()

'read contents of a sound file into file stream and convert to byte array
Dim f As New FileStream("sound.mp3", FileMode.Open)
f.Position = 0
Dim reader As New System.IO.BinaryReader(f)
Dim length As Integer = CInt(Fix(f.Length))
Dim sndBytes() As Byte = reader.ReadBytes(length)
reader.Close()
f.Close()

'create a sound stream block
Dim sndD As New SoundStreamBlock(sndBytes)

'define sound
Dim snd As New DefineSound(flash.NewIdentifier(), SoundFormat.MP3, SampleRate.SampleRate44khz, True, SampleSize.SampleSize16bits,183600, sndD.StreamSoundData)

'set sound control
Dim sndC As SoundControl = SoundControl.Start

'create a sound envelope
Dim se As New SoundEnvelope(132, 50, 60)
Dim list As New ArrayList()
list.Add(se)

'set sound info
Dim sndI As New SoundInfo(snd.SoundId, sndC)

'set sound evelope property of sound info object
sndI.Envelopes = list

'add sound to flash
flash.Add(snd)

'define start sound control
Dim s As New StartSound(sndI)

'add start sound control to flash container
flash.Add(s)</code></example>
    </member>
    <member name="P:Aspose.Flash.Sound.SoundStreamBlock.StreamSoundData">
      <summary>
            Returns or sets the compressed sound data.
            Read/write <see cref="T:System.Byte" />[].
            </summary>
    </member>
    <member name="T:Aspose.Flash.Sound.SoundStreamHead">
      <summary>
        <p>Represents the data format of the sound data, the recommended playback
            format and the average number of samples per SoundStreamBlock.</p>
        <p>SoundStreamHead tag is used when a timeline contains streaming sound data.
            The tag should be defined before the first sound data block
            (see <see cref="T:Aspose.Flash.Sound.SoundStreamBlock" />).</p>
      </summary>
    </member>
    <member name="M:Aspose.Flash.Sound.SoundStreamHead.#ctor(Aspose.Flash.Sound.SoundFormat,Aspose.Flash.Sound.SampleRate,System.Boolean,Aspose.Flash.Sound.SampleSize,Aspose.Flash.Sound.SampleRate,System.Boolean,Aspose.Flash.Sound.SampleSize,System.Int32,System.Int32)">
      <summary>
            SoundStreamHead constructor.
            </summary>
      <param name="format">Sound format.</param>
      <param name="playSampleRate">Sample rate which should be used to play sound.</param>
      <param name="isStereoPlayback">Whether the sound should be played in stereo format.</param>
      <param name="playSampleSize">Sample size which should be used to play sound.</param>
      <param name="streamSampleRate">Sample rate of the sound stream.</param>
      <param name="isStereoStream">Whether the sound stream has stereo format.</param>
      <param name="streamSampleSize">Sample size of the sound stream.</param>
      <param name="streamSampleCount">Average number of samples in each SoundStreamBlock.</param>
      <param name="latency">Number of samples to skip when starting to play a sound.</param>
    </member>
    <member name="P:Aspose.Flash.Sound.SoundStreamHead.SoundFormat">
      <summary>
            Returns or sets the sound format.
            Read/write <see cref="P:Aspose.Flash.Sound.SoundStreamHead.SoundFormat" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Sound.SoundStreamHead.SampleRatePlayback">
      <summary>
             Returns or sets the sound sample rate which should be used to play sound.
             Read/write <see cref="T:Aspose.Flash.Sound.SampleRate" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Sound.SoundStreamHead.IsStereoPlayback">
      <summary>
            Determines or sets whether the sound should be played in stereo format.
            Read/write <see cref="T:System.Boolean" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Sound.SoundStreamHead.SampleSizePlayback">
      <summary>
            Returns or sets the sample size which should be used to play sound.
            Read/write <see cref="T:Aspose.Flash.Sound.SampleSize" /></summary>
    </member>
    <member name="P:Aspose.Flash.Sound.SoundStreamHead.SampleRateStream">
      <summary>
            Returns or sets the sample rate of the sound stream.
            Read/write <see cref="T:Aspose.Flash.Sound.SampleRate" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Sound.SoundStreamHead.IsStereoStream">
      <summary>
            Determines or sets whether the sound stream has stereo format.
            Read/write <see cref="T:System.Boolean" /></summary>
    </member>
    <member name="P:Aspose.Flash.Sound.SoundStreamHead.SampleSizeStream">
      <summary>
            Returns or sets the sample size of the sound stream.
            Read/write <see cref="T:Aspose.Flash.Sound.SampleSize" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Sound.SoundStreamHead.SoundSampleCount">
      <summary>
            Returns or sets the average number of samples in each SoundStreamBlock.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Sound.SoundStreamHead.Latency">
      <summary>
            Returns or sets the number of samples to skip when starting to play a sound.
            Property used with MP3 format only.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Sound.SoundStreamHead2">
      <summary>
        <p>Represents the data format of the sound data, the recommended playback
            format and the average number of samples per SoundStreamBlock.</p>
        <p>Extends SoundStreamHead class allowing different values for
            SoundFormat and SampleSizeStream.</p>
      </summary>
    </member>
    <member name="M:Aspose.Flash.Sound.SoundStreamHead2.#ctor(Aspose.Flash.Sound.SoundFormat,Aspose.Flash.Sound.SampleRate,System.Boolean,Aspose.Flash.Sound.SampleSize,Aspose.Flash.Sound.SampleRate,System.Boolean,Aspose.Flash.Sound.SampleSize,System.Int32,System.Int32)">
      <summary>
            SoundStreamHead2 constructor.
            </summary>
      <param name="format">the compression format for the sound data.</param>
      <param name="playSampleRate">Sample rate which should be used to play sound.</param>
      <param name="isStereoPlayback">Whether the sound should be played in stereo format.</param>
      <param name="playSampleSize">Sample size which should be used to play sound.</param>
      <param name="streamSampleRate">Sample rate of the sound stream.</param>
      <param name="isStereoStream">Whether the sound stream has stereo format.</param>
      <param name="streamSampleSize">Sample size of the sound stream.</param>
      <param name="streamSampleCount">Average number of samples in each SoundStreamBlock.</param>
      <param name="latency">Number of samples to skip when starting to play a sound.</param>
    </member>
    <member name="P:Aspose.Flash.Sound.SoundStreamHead2.SoundFormat">
      <summary>
            Returns or sets the sound format.
            Read/write <see cref="P:Aspose.Flash.Sound.SoundStreamHead2.SoundFormat" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Sound.SoundStreamHead2.SampleRatePlayback">
      <summary>
             Returns or sets the sound sample rate which should be used to play sound.
             Read/write <see cref="T:Aspose.Flash.Sound.SampleRate" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Sound.SoundStreamHead2.IsStereoPlayback">
      <summary>
            Determines or sets whether the sound should be played in stereo format.
            Read/write <see cref="T:System.Boolean" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Sound.SoundStreamHead2.SampleSizePlayback">
      <summary>
            Returns or sets the sample size which should be used to play sound.
            Read/write <see cref="T:Aspose.Flash.Sound.SampleSize" /></summary>
    </member>
    <member name="P:Aspose.Flash.Sound.SoundStreamHead2.SampleRateStream">
      <summary>
            Returns or sets the sample rate of the sound stream.
            Read/write <see cref="T:Aspose.Flash.Sound.SampleRate" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Sound.SoundStreamHead2.IsStereoStream">
      <summary>
            Determines or sets whether the sound stream has stereo format.
            Read/write <see cref="T:System.Boolean" /></summary>
    </member>
    <member name="P:Aspose.Flash.Sound.SoundStreamHead2.SampleSizeStream">
      <summary>
            Returns or sets the sample size of the sound stream.
            Read/write <see cref="T:Aspose.Flash.Sound.SampleSize" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Sound.SoundStreamHead2.SoundSampleCount">
      <summary>
            Returns or sets the average number of samples in each SoundStreamBlock.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Sound.SoundStreamHead2.Latency">
      <summary>
            Returns or sets the number of samples to skip when starting to play a sound.
            Property used with MP3 format only.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Sound.StartSound">
      <summary>
            Represents sound control like start or stop playing sound defined by DefineSound tag.
            </summary>
      <example>This example shows you how to use StartSound class<code>[C#]

//create flash container object
FlashContainer flash = new FlashContainer();

//read contents of a sound file into file stream and convert to byte array
FileStream f = new FileStream("sound.mp3", FileMode.Open);
f.Position = 0;
System.IO.BinaryReader reader = new System.IO.BinaryReader(f);
int length = (int)f.Length;
byte[] sndBytes = reader.ReadBytes(length);
reader.Close();
f.Close();

//create a sound stream block
SoundStreamBlock sndD = new SoundStreamBlock(sndBytes);

//define sound
DefineSound snd = new DefineSound(flash.NewIdentifier(), SoundFormat.MP3, SampleRate.SampleRate44khz , true, SampleSize.SampleSize16bits ,183600,     sndD.StreamSoundData);

//set sound control
SoundControl sndC = SoundControl.Start;

//create a sound envelope
SoundEnvelope se = new SoundEnvelope(132, 50, 60);
ArrayList list = new ArrayList();
list.Add(se);

//set sound info
SoundInfo sndI = new SoundInfo(snd.SoundId, sndC);

//set sound evelope property of sound info object
sndI.Envelopes = list;

//add sound to flash
flash.Add(snd);

//define start sound control
StartSound s = new StartSound(sndI);

//add start sound control to flash container
flash.Add(s);</code><code>[Visual Basic]

'create flash container object
Dim flash As New FlashContainer()

'read contents of a sound file into file stream and convert to byte array
Dim f As New FileStream("sound.mp3", FileMode.Open)
f.Position = 0
Dim reader As New System.IO.BinaryReader(f)
Dim length As Integer = CInt(Fix(f.Length))
Dim sndBytes() As Byte = reader.ReadBytes(length)
reader.Close()
f.Close()

'create a sound stream block
Dim sndD As New SoundStreamBlock(sndBytes)

'define sound
Dim snd As New DefineSound(flash.NewIdentifier(), SoundFormat.MP3, SampleRate.SampleRate44khz, True, SampleSize.SampleSize16bits,183600, sndD.StreamSoundData)

'set sound control
Dim sndC As SoundControl = SoundControl.Start

'create a sound envelope
Dim se As New SoundEnvelope(132, 50, 60)
Dim list As New ArrayList()
list.Add(se)

'set sound info
Dim sndI As New SoundInfo(snd.SoundId, sndC)

'set sound evelope property of sound info object
sndI.Envelopes = list

'add sound to flash
flash.Add(snd)

'define start sound control
Dim s As New StartSound(sndI)

'add start sound control to flash container
flash.Add(s)</code></example>
    </member>
    <member name="M:Aspose.Flash.Sound.StartSound.#ctor(Aspose.Flash.Sound.SoundInfo)">
      <summary>
            StartSound constructor.
            </summary>
      <param name="sound">Sound information. See <see cref="P:Aspose.Flash.Sound.StartSound.SoundInfo" />.</param>
      <example>This example shows you how to use StartSound constructor<code>[C#]

//create flash container object
FlashContainer flash = new FlashContainer();

//read contents of a sound file into file stream and convert to byte array
FileStream f = new FileStream("sound.mp3", FileMode.Open);
f.Position = 0;
System.IO.BinaryReader reader = new System.IO.BinaryReader(f);
int length = (int)f.Length;
byte[] sndBytes = reader.ReadBytes(length);
reader.Close();
f.Close();

//create a sound stream block
SoundStreamBlock sndD = new SoundStreamBlock(sndBytes);

//define sound
DefineSound snd = new DefineSound(flash.NewIdentifier(), SoundFormat.MP3, SampleRate.SampleRate44khz , true, SampleSize.SampleSize16bits ,183600,     sndD.StreamSoundData);

//set sound control
SoundControl sndC = SoundControl.Start;

//create a sound envelope
SoundEnvelope se = new SoundEnvelope(132, 50, 60);
ArrayList list = new ArrayList();
list.Add(se);

//set sound info
SoundInfo sndI = new SoundInfo(snd.SoundId, sndC);

//set sound evelope property of sound info object
sndI.Envelopes = list;

//add sound to flash
flash.Add(snd);

//define start sound control
StartSound s = new StartSound(sndI);

//add start sound control to flash container
flash.Add(s);</code><code>[Visual Basic]

'create flash container object
Dim flash As New FlashContainer()

'read contents of a sound file into file stream and convert to byte array
Dim f As New FileStream("sound.mp3", FileMode.Open)
f.Position = 0
Dim reader As New System.IO.BinaryReader(f)
Dim length As Integer = CInt(Fix(f.Length))
Dim sndBytes() As Byte = reader.ReadBytes(length)
reader.Close()
f.Close()

'create a sound stream block
Dim sndD As New SoundStreamBlock(sndBytes)

'define sound
Dim snd As New DefineSound(flash.NewIdentifier(), SoundFormat.MP3, SampleRate.SampleRate44khz, True, SampleSize.SampleSize16bits,183600, sndD.StreamSoundData)

'set sound control
Dim sndC As SoundControl = SoundControl.Start

'create a sound envelope
Dim se As New SoundEnvelope(132, 50, 60)
Dim list As New ArrayList()
list.Add(se)

'set sound info
Dim sndI As New SoundInfo(snd.SoundId, sndC)

'set sound evelope property of sound info object
sndI.Envelopes = list

'add sound to flash
flash.Add(snd)

'define start sound control
Dim s As New StartSound(sndI)

'add start sound control to flash container
flash.Add(s)</code></example>
    </member>
    <member name="P:Aspose.Flash.Sound.StartSound.SoundInfo">
      <summary>
            Returns or sets the sound information.
            Read/write <see cref="P:Aspose.Flash.Sound.StartSound.SoundInfo" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Swf.AbstractFilter">
      <summary>
      </summary>
    </member>
    <member name="T:Aspose.Flash.Swf.BaseObjectType">
      <summary>
            Represents all base objects used in a SWF flash movie files.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Swf.BaseObjectType.ShowFrame">
      <summary>
            Type used to identify ShowFrame objects.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Swf.BaseObjectType.DefineShape">
      <summary>
            Type used to identify DefineShape objects.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Swf.BaseObjectType.PlaceObject">
      <summary>
            Type used to identify PlaceObject objects.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Swf.BaseObjectType.RemoveObject">
      <summary>
            Type used to identify RemoveObject objects.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Swf.BaseObjectType.DefineBits">
      <summary>
            Type used to identify DefineBits objects.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Swf.BaseObjectType.DefineButton">
      <summary>
            Type used to identify DefineButton objects.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Swf.BaseObjectType.JPEGTables">
      <summary>
            Type used to identify JPEGTables objects.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Swf.BaseObjectType.SetBackgroundColor">
      <summary>
            Type used to identify SetBackgroundColor objects.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Swf.BaseObjectType.DefineFont3">
      <summary>
            Type used to identify DefineFont3 objects.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Swf.BaseObjectType.DefineFont">
      <summary>
            Type used to identify DefineFont objects.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Swf.BaseObjectType.DefineText">
      <summary>
            Type used to identify DefineText objects.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Swf.BaseObjectType.DoAction">
      <summary>
            Type used to identify DoAction objects.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Swf.BaseObjectType.DefineFontInfo">
      <summary>
            Type used to identify DefineFontInfo objects.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Swf.BaseObjectType.DefineSound">
      <summary>
            Type used to identify DefineSound objects.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Swf.BaseObjectType.StartSound">
      <summary>
            Type used to identify StartSound objects.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Swf.BaseObjectType.SoundStreamHead">
      <summary>
            Type used to identify SoundStreamHead objects.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Swf.BaseObjectType.SoundStreamBlock">
      <summary>
            Type used to identify SoundStreamBlock objects.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Swf.BaseObjectType.DefineButtonSound">
      <summary>
            Type used to identify DefineButtonSound objects.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Swf.BaseObjectType.DefineBitsLossless">
      <summary>
            Type used to identify DefineBitsLossless objects.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Swf.BaseObjectType.DefineBitsJPEG2">
      <summary>
            Type used to identify DefineBitsJPEG2 objects.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Swf.BaseObjectType.DefineShape2">
      <summary>
            Type used to identify DefineShape2 objects.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Swf.BaseObjectType.DefineButtonCxform">
      <summary>
            Type used to identify DefineButtonColorTransform objects.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Swf.BaseObjectType.Protect">
      <summary>
            Type used to identify Protect objects.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Swf.BaseObjectType.Free">
      <summary>
            Type used to identify Free objects.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Swf.BaseObjectType.PlaceObject2">
      <summary>
            Type used to identify PlaceObject2 objects.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Swf.BaseObjectType.PlaceObject3">
      <summary>
            Type used to identify PlaceObject3 objects.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Swf.BaseObjectType.RemoveObject2">
      <summary>
            Type used to identify RemoveObject2 objects.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Swf.BaseObjectType.DefineShape3">
      <summary>
            Type used to identify DefineShape3 objects.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Swf.BaseObjectType.DefineShape4">
      <summary>
            Type used to identify DefineShape4 objects.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Swf.BaseObjectType.DefineText2">
      <summary>
            Type used to identify DefineText2 objects.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Swf.BaseObjectType.DefineButton2">
      <summary>
            Type used to identify DefineButton2 objects.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Swf.BaseObjectType.DefineBitsJPEG3">
      <summary>
            Type used to identify DefineBitsJPEG3 objects.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Swf.BaseObjectType.DefineBitsLossless2">
      <summary>
            Type used to identify DefineBitsLossless2 objects.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Swf.BaseObjectType.DefineSprite">
      <summary>
            Type used to identify DefineSprite objects.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Swf.BaseObjectType.FrameLabel">
      <summary>
            Type used to identify FrameLabel objects.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Swf.BaseObjectType.SoundStreamHead2">
      <summary>
            Type used to identify SoundStreamHead2 objects.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Swf.BaseObjectType.DefineMorphShape">
      <summary>
            Type used to identify DefineMorphShape objects.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Swf.BaseObjectType.DefineFont2">
      <summary>
            Type used to identify DefineFont2 objects.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Swf.BaseObjectType.PathsArePostscript">
      <summary>
            Type used to identify PathsArePostscript objects.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Swf.BaseObjectType.DefineEditText">
      <summary>
            Type used to identify DefineEditText objects.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Swf.BaseObjectType.QuicktimeMovie">
      <summary>
            Type used to identify QuicktimeMovie objects.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Swf.BaseObjectType.SerialNumber">
      <summary>
            Type used to identify SerialNumber objects.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Swf.BaseObjectType.FlashReference">
      <summary>
            Type used to identify FlashReference objects.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Swf.BaseObjectType.ExportAssets">
      <summary>
            Type used to identify ExportAssets objects.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Swf.BaseObjectType.ImportAssets">
      <summary>
            Type used to identify ImportAssets objects.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Swf.BaseObjectType.EnableDebugger">
      <summary>
            Type used to identify EnableDebugger objects.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Swf.BaseObjectType.Initialize">
      <summary>
            Type used to identify Initialize objects.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Swf.BaseObjectType.DefineVideoStream">
      <summary>
            Type used to identify DefineVideoStream objects.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Swf.BaseObjectType.VideoFrame">
      <summary>
            Type used to identify VideoFrame objects.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Swf.BaseObjectType.DefineFontInfo2">
      <summary>
            Type used to identify DefineFontInfo2 objects.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Swf.BaseObjectType.EnableDebugger2">
      <summary>
            Type used to identify EnableDebugger2 objects.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Swf.BaseObjectType.ScriptLimit">
      <summary>
            Type used to identify ScriptLimit objects.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Swf.BaseObjectType.SetTabIndex">
      <summary>
            Type used to identify SetTabIndex objects.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Swf.BaseObjectType.FileAttributes">
      <summary>
            Type used to identify FileAttributes objects.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Swf.BaseObjectType.ImportAssets2">
      <summary>
            Type used to identify ImportAssets2 objects.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Swf.BaseObjectType.DefineFontAlignZones">
      <summary>
            Type used to identify DefineFontAlignZones objects
            </summary>
    </member>
    <member name="F:Aspose.Flash.Swf.BaseObjectType.CSMTextSettings">
      <summary>
            Type used to identify CSMTextSettings objects
            </summary>
    </member>
    <member name="F:Aspose.Flash.Swf.BaseObjectType.SymbolClass">
      <summary>
            Type used to identify SymbolClass objects
            </summary>
    </member>
    <member name="F:Aspose.Flash.Swf.BaseObjectType.DefineScalingGrid">
      <summary>
            Type used to identify DefineScalingGrid objects.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Swf.BaseObjectType.DoABC">
      <summary>
            Type used to identify DoABC objects
            </summary>
    </member>
    <member name="F:Aspose.Flash.Swf.BaseObjectType.DefineMorphShape2">
      <summary>
            Type used to identify DefineMorphShape2 objects
            </summary>
    </member>
    <member name="F:Aspose.Flash.Swf.BaseObjectType.DefineSceneAndFrameLabelData">
      <summary>
            Type used to identify DefineSceneAndFrameLabelData objects
            </summary>
    </member>
    <member name="F:Aspose.Flash.Swf.BaseObjectType.DefineBinaryData">
      <summary>
            Type used to identify DefineBinaryData objects
            </summary>
    </member>
    <member name="F:Aspose.Flash.Swf.BaseObjectType.DefineFontName">
      <summary>
            Type used to identify DefineFontName objects
            </summary>
    </member>
    <member name="F:Aspose.Flash.Swf.BaseObjectType.StartSound2">
      <summary>
            Type used to identify StartSound2 objects
            </summary>
    </member>
    <member name="F:Aspose.Flash.Swf.BaseObjectType.DefineBitsJPEG4">
      <summary>
            Type used to identify DefineBitsJPEG4 objects
            </summary>
    </member>
    <member name="F:Aspose.Flash.Swf.BaseObjectType.DefineFont4">
      <summary>
            Type used to identify DefineFont4 objects
            </summary>
    </member>
    <member name="T:Aspose.Flash.Swf.BevelFilter">
      <summary>
            The Bevel filter creates a smooth bevel on display list objects.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Swf.BevelFilter.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.BevelFilter.ShadowClolor">
      <summary>
            Color of the shadow.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.BevelFilter.HighlightColor">
      <summary>
            Color of the highlight.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.BevelFilter.BlurX">
      <summary>
            Horizontal blur amount
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.BevelFilter.BlurY">
      <summary>
            Vertical blur amount
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.BevelFilter.Angle">
      <summary>
            Radian angle of the drop shadow
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.BevelFilter.Distance">
      <summary>
            Distance of the drop shadow
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.BevelFilter.Strength">
      <summary>
            Strength of the drop shadow
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.BevelFilter.InnerShadow">
      <summary>
            Inner shadow mode
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.BevelFilter.Knockout">
      <summary>
            Knockout mode
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.BevelFilter.CompositeSource">
      <summary>
            Composite source
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.BevelFilter.OnTop">
      <summary>
            OnTop mode
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.BevelFilter.Passes">
      <summary>
            Number of blur passes
            </summary>
    </member>
    <member name="T:Aspose.Flash.Swf.BlurFilter">
      <summary>
            The blur filter is based on a sub-pixel precise median filter (also known as a box filter).
            The filter is applied on each of the RGBA color channels.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Swf.BlurFilter.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.BlurFilter.BlurX">
      <summary>
            Horizontal blur amount
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.BlurFilter.BlurY">
      <summary>
            Vertical blur amount
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.BlurFilter.Passes">
      <summary>
            Number of blur passes
            </summary>
    </member>
    <member name="T:Aspose.Flash.Swf.ClipAction">
      <summary>
            Represents the actions that a movie clip will execute in response to a particular event.
            ClipEvent objects are added to an PlaceObject2 object and the actions are registered
            with the Flash Player when a movie clip is added to the display list.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Swf.ClipAction.#ctor(System.Int32,System.Collections.ArrayList)">
      <summary>
            ClipAction constructor.
            </summary>
      <param name="actionCode">Action code. See also <see cref="T:Aspose.Flash.Swf.ClipActionCode" />.</param>
      <param name="array">Collections of action objects.</param>
    </member>
    <member name="M:Aspose.Flash.Swf.ClipAction.#ctor(System.Int32,System.Byte[])">
      <summary>
            ClipAction constructor.
            </summary>
      <param name="actionCode">Action code. See also <see cref="T:Aspose.Flash.Swf.ClipActionCode" />.</param>
      <param name="bytes">Encoded actions.</param>
    </member>
    <member name="M:Aspose.Flash.Swf.ClipAction.#ctor(System.Int32,System.Int32,System.Collections.ArrayList)">
      <summary>
            ClipAction constructor.
            </summary>
      <param name="actionCode">Action code. See also <see cref="T:Aspose.Flash.Swf.ClipActionCode" />.</param>
      <param name="keyCode">Key code.</param>
      <param name="actions">Collections of action objects.</param>
    </member>
    <member name="M:Aspose.Flash.Swf.ClipAction.#ctor(System.Int32,System.Int32,System.Byte[])">
      <summary>
            ClipAction constructor.
            </summary>
      <param name="actionCode">Action code. See also <see cref="T:Aspose.Flash.Swf.ClipActionCode" />.</param>
      <param name="keyCode">Key code.</param>
      <param name="encodedActions">Encoded actions.</param>
    </member>
    <member name="M:Aspose.Flash.Swf.ClipAction.Add(Aspose.Flash.Actions.ActionObject)">
      <summary>
            Add an action to the collection.
            </summary>
      <param name="action">Action object to add.</param>
    </member>
    <member name="P:Aspose.Flash.Swf.ClipAction.Action">
      <summary>
            Returns or sets the action code.
            Read/write <see cref="T:System.Int32" />. See also <see cref="T:Aspose.Flash.Swf.ClipActionCode" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.ClipAction.KeyCode">
      <summary>
            Returns or sets the key code.
            Read/write <see cref="T:System.Int32" />.
            </summary>
      <remarks>
            The code is the ASCII code for standard western keyboards.
            </remarks>
    </member>
    <member name="P:Aspose.Flash.Swf.ClipAction.Actions">
      <summary>
            Returns or sets the collection of action objects which are executed by the movie clip.
            Read/write <see cref="T:System.Collections.ArrayList" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.ClipAction.EncodedActions">
      <summary>
            Sets the encoded actions.
            Write-only <see cref="T:System.Byte" />[].
            </summary>
    </member>
    <member name="T:Aspose.Flash.Swf.ClipActionCode">
      <summary>
            Represents the ClipAction code type.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Swf.ClipActionCode.Load">
      <summary>
            Swf file load event.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Swf.ClipActionCode.EnterFrame">
      <summary>
            Enter frame event.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Swf.ClipActionCode.Unload">
      <summary>
            Swf file unload event.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Swf.ClipActionCode.MouseMove">
      <summary>
            Mouse move event.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Swf.ClipActionCode.MouseDown">
      <summary>
            Mouse button down event.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Swf.ClipActionCode.MouseUp">
      <summary>
            Mouse button up event.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Swf.ClipActionCode.KeyDown">
      <summary>
            Key down event.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Swf.ClipActionCode.KeyUp">
      <summary>
            Key up event.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Swf.ClipActionCode.Data">
      <summary>
            Data event.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Swf.ClipActionCode.Initialize">
      <summary>
            Initialize event.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Swf.ClipActionCode.Press">
      <summary>
            Press event.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Swf.ClipActionCode.Release">
      <summary>
            Release event.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Swf.ClipActionCode.ReleaseOut">
      <summary>
            Release outside event.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Swf.ClipActionCode.RollOver">
      <summary>
            Roll over event.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Swf.ClipActionCode.RollOut">
      <summary>
            Roll out event.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Swf.ClipActionCode.DragOver">
      <summary>
            Drag over event.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Swf.ClipActionCode.DragOut">
      <summary>
            Drag out event.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Swf.ClipActionCode.KeyPress">
      <summary>
            Key press event, where the code for the key is specified.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Swf.ClipActionCode.Construct">
      <summary>
            Construct event.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Swf.ColorMatrixFilter">
      <summary>
            A Color Matrix filter applies a color transformation on the pixels of a display list object.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Swf.ColorMatrixFilter.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.ColorMatrixFilter.matrix">
      <summary>
            Returns or sets the filter matrix.
            Read/write <see cref="T:System.Collections.ArrayList" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Swf.ConvolutionFilter">
      <summary>
            The Convolution filter is a two-dimensional discrete convolution. It is applied on each pixel
            of a display object.
            The convolution is applied on each of the RGBA color components and then saturated,
            except when the PreserveAlpha flag is set; in this case, the alpha channel value is not modified.
            The clamping flag specifies how pixels outside of the input pixel plane are handled. If set to
            false, the DefaultColor value is used, and otherwise, the pixel is clamped to the closest valid
            input pixel.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Swf.ConvolutionFilter.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.ConvolutionFilter.MatrixX">
      <summary>
            Horizontal matrix size
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.ConvolutionFilter.MatrixY">
      <summary>
            Vertical matrix size
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.ConvolutionFilter.Divisor">
      <summary>
            Divisor applied to the matrix values
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.ConvolutionFilter.Bias">
      <summary>
            Bias applied to the matrix values
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.ConvolutionFilter.Matrix">
      <summary>
            Matrix values
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.ConvolutionFilter.DefaultColor">
      <summary>
            Default color for pixels outside the image
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.ConvolutionFilter.Clamp">
      <summary>
            Clamp mode
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.ConvolutionFilter.PreserveAlpha">
      <summary>
            Preserve the alpha
            </summary>
    </member>
    <member name="T:Aspose.Flash.Actions.DoABC">
      <summary>
            The DoABC tag is similar to the DoAction tag: it defines a series of bytecodes to be executed.
            However, the bytecodes contained within the DoABC tag run in the ActionScript 3.0 virtual
            machine.Please make sure you have turned on AS3 support by setting <see cref="P:Aspose.Flash.Swf.FileAttributes.ActionScript3" /> flag.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Actions.DoABC.#ctor(System.String,System.Int32,System.Byte[])">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Flash.Actions.DoABC" /> tag.
            </summary>
      <param name="name">The name of the code block.</param>
      <param name="flags">The flags.</param>
      <param name="abcData">The abc data bytearray.</param>
    </member>
    <member name="P:Aspose.Flash.Actions.DoABC.ABCData">
      <summary>
            Gets or sets the blob of binary data.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Actions.DoABC.Name">
      <summary>
            The name assigned to the bytecode.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Actions.DoABC.Flags">
      <summary>
            A 32-bit flags value, which may contain the following bits set:
            kDoAbcLazyInitializeFlag = 1: Indicates that the ABC block should not be executed immediately, but only parsed.
            A later finddef may cause its scripts to execute.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Swf.TransitionCut">
      <summary>
            Represents cut transition.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Swf.TransitionNone">
      <summary>
            Represents simple transition.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Swf.TransitionEffect">
      <summary>
            Defines the transition effect between frames of the slideshow.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Swf.TransitionEffect.Apply(Aspose.Flash.Swf.FlashContainer,System.Drawing.Image,Aspose.Flash.Bitmaps.FlashBitmapType)">
      <summary>
            Applies the effect and inserts the frame into specified container
            using effect-specific logic for transition.
            </summary>
      <param name="container">The container.</param>
      <param name="image">The image representing frame content.</param>
      <param name="bitmapType">Type of the bitmap, defines how image data will be stored in swf file.</param>
    </member>
    <member name="P:Aspose.Flash.Swf.TransitionEffect.Duration">
      <summary>
            Gets or sets the duration of the effect.Valid values are &gt;=1;
            This value can be ignored if effect doesn't support the duration control.
            </summary>
      <value>The duration.</value>
    </member>
    <member name="T:Aspose.Flash.Swf.TransitionCutThroughBlack">
      <summary>
            Represents CutThroughBlack transition.
            </summary>
      <remarks>
            One addditional frame is added for the black cut.
            </remarks>
    </member>
    <member name="T:Aspose.Flash.Swf.TransitionDissolve">
      <summary>
            Represents dissolve effect.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Swf.TransitionClipEffect">
      <summary>
            A base class for all effects which can be done using clipping.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Swf.TransitionDissolve.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Flash.Swf.TransitionDissolve" /> class.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Swf.TransitionFade">
      <summary>
            Represents fade effect.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Swf.TransitionFadeSmoothly">
      <summary>
            Represents fade-smoothly effect.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Swf.TransitionFadeInOut">
      <summary>
            Represents content fade-in followed by fade-out when one frame smoothly changes to another.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Swf.TransitionPush">
      <summary>
            Represents push effect.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Swf.TransitionPush.#ctor(Aspose.Flash.Swf.TransitionDirection)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Flash.Swf.TransitionPush" /> class.
            </summary>
      <param name="direction">The direction of the effect.</param>
      <remarks>Only the following directions are supported: <see cref="F:Aspose.Flash.Swf.TransitionDirection.Top" />,<see cref="F:Aspose.Flash.Swf.TransitionDirection.Bottom" />,<see cref="F:Aspose.Flash.Swf.TransitionDirection.Left" />,<see cref="F:Aspose.Flash.Swf.TransitionDirection.Right" /></remarks>
    </member>
    <member name="P:Aspose.Flash.Swf.TransitionPush.Direction">
      <summary>
            Gets or sets the direction of the effect.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Swf.TransitionSimple">
      <summary>
            Represents simple transition.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Swf.TransitionStripsRightUp">
      <summary>
            Represents strips right up effect.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Swf.TransitionStripsLeftUp">
      <summary>
            Represents strips left up effect.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Swf.TransitionStripsLeftDown">
      <summary>
            Represents strips left down effect.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Swf.TransitionStripsRightDown">
      <summary>
            Represents strips right down effect.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Swf.TransitionSplitVerticalIn">
      <summary>
            Represents split vertical in effect.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Swf.TransitionSplitHorizontalIn">
      <summary>
            Represents split hosizontal in effect.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Swf.TransitionSplitVerticalOut">
      <summary>
            Represents split vertical out effect.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Swf.TransitionShapeOutEffect">
      <summary>
            A base class for all effects based on shape out behavior,
            you have to override the <see cref="M:Aspose.Flash.Swf.TransitionShapeOutEffect.GetShapeOutline(Aspose.Flash.Basic.Rect)" /> method to specify the starting shape for this effect.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Swf.TransitionSplitHorizontalOut">
      <summary>
            Represents split horizontal out effect.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Swf.TransitionPlusOut">
      <summary>
            Represents plus sign out effect.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Swf.TransitionCombHorizontal">
      <summary>
            Represents comb horizontal effect.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.TransitionCombHorizontal.StripeCount">
      <summary>
            Gets or sets the stripe count for this effect, minimum is 1.
            </summary>
      <value>The stripe count.</value>
    </member>
    <member name="T:Aspose.Flash.Swf.TransitionCombVertical">
      <summary>
            Represents comb verical effect.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.TransitionCombVertical.StripeCount">
      <summary>
            Gets or sets the stripe count for this effect, minimum is 1.
            </summary>
      <value>The stripe count.</value>
    </member>
    <member name="T:Aspose.Flash.Swf.TransitionNewsFlash">
      <summary>
            Represents NewsFlash transition.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Swf.TransitionRandomBarsVertical">
      <summary>
            Represents random bars vertical effect.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Swf.TransitionRandomBarsVertical.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Flash.Swf.TransitionRandomBarsVertical" /> class.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Swf.TransitionRandomBarsVertical.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Flash.Swf.TransitionRandomBarsVertical" /> class.
            </summary>
      <param name="seed">See the <see cref="P:Aspose.Flash.Swf.TransitionRandomBarsVertical.Seed" /> property description for details.</param>
    </member>
    <member name="P:Aspose.Flash.Swf.TransitionRandomBarsVertical.Seed">
      <summary>
            Gets or sets the seed value for random generator.
            </summary>
      <value>The seed.</value>
      <remarks>By default this value is set to 0, that means it will be set automatically when effect is applied.</remarks>
    </member>
    <member name="T:Aspose.Flash.Swf.TransitionCircleOut">
      <summary>
            Represents transition circle out effect.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Swf.TransitionRandomBarsHorizontal">
      <summary>
            Represents random bars horizontal effect.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Swf.TransitionRandomBarsHorizontal.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Flash.Swf.TransitionRandomBarsHorizontal" /> class.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Swf.TransitionRandomBarsHorizontal.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Flash.Swf.TransitionRandomBarsHorizontal" /> class.
            </summary>
      <param name="seed">See the <see cref="P:Aspose.Flash.Swf.TransitionRandomBarsHorizontal.Seed" /> property description for details.</param>
    </member>
    <member name="P:Aspose.Flash.Swf.TransitionRandomBarsHorizontal.Seed">
      <summary>
            Gets or sets the seed value for random generator.
            </summary>
      <value>The seed.</value>
      <remarks>By default this value is set to 0, that means it will be set automatically when effect is applied.</remarks>
    </member>
    <member name="T:Aspose.Flash.Swf.TransitionCheckerboardAcross">
      <summary>
            Represents checker board across effect.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Swf.TransitionCheckerboardDown">
      <summary>
            Represents checker board down effect.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Swf.TransitionBlindsHorizontal">
      <summary>
            Represents blinds horizontal effect.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Swf.TransitionBlindsVertical">
      <summary>
            Represents blinds vertical effect.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Swf.TransitionBoxOut">
      <summary>
            Represents content box-out effect.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Swf.TransitionBoxIn">
      <summary>
            Represents content box-in effect.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Swf.DefineSceneAndFrameLabelData">
      <summary>
            The DefineSceneAndFrameLabelData tag contains scene and frame label data for a
            MovieClip. Scenes are supported for the main timeline only, for all other movie clips a single
            scene is exported.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.DefineSceneAndFrameLabelData.SceneData">
      <summary>
            Gets or sets the scene data, it's a set of <c>Frame offset for scene N(uint32)/ Name of scene N(string)</c> pairs.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.DefineSceneAndFrameLabelData.FrameLabelData">
      <summary>
            Gets or sets the frame label data, it's a set of <c>Frame number of frame label N (zero-based,global to symbol; uin32)/ Frame label string of frame label N(string)</c> pairs.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Swf.DefineScalingGrid">
      <summary>
             When the DefineScalingGrid tag associates a character with a 9-slice grid, Flash Player
            conceptually divides the sprite or button into nine sections with a grid-like overlay. When the
            character is scaled, each of the nine areas is scaled independently. To maintain the visual
            integrity of the character, corners are not scaled, while the remaining areas of the image are
            scaled larger or smaller, as needed.
             </summary>
    </member>
    <member name="M:Aspose.Flash.Swf.DefineScalingGrid.#ctor(System.Int32,Aspose.Flash.Basic.Rect)">
      <summary>
            Constructs the DefineScalingGrid object.
            </summary>
      <param name="characterId">ID of sprite or button character upon which the scaling grid will be applied.</param>
      <param name="splitter">Center region of 9-slice grid.</param>
    </member>
    <member name="P:Aspose.Flash.Swf.DefineScalingGrid.CharacterId">
      <summary>
            Gets or sets the ID of sprite or button character upon which the scaling grid will be applied.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.DefineScalingGrid.Spliter">
      <summary>
            Gets or sets the center region of 9-slice grid.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Swf.ImportAssets2">
      <summary>
        <p>Represents the list of objects which are imported from another SWF file.</p>
        <p>Since the identifier of an object is only unique within a single Flash file,
            each exported object should have also unique name so it could be referenced.</p>
      </summary>
    </member>
    <member name="M:Aspose.Flash.Swf.ImportAssets2.#ctor(System.String,System.Int32,System.String)">
      <summary>
            ImportAssets2 constructor.
            </summary>
      <param name="url">The URL of an imported file.</param>
      <param name="id">The id of an object to import.</param>
      <param name="name">The name of an object to import.</param>
    </member>
    <member name="M:Aspose.Flash.Swf.ImportAssets2.Add(System.Int32,System.String)">
      <summary>
            Add a new imported object to the list.
            </summary>
      <param name="id">The id of an object.</param>
      <param name="name">The name of an object.</param>
    </member>
    <member name="P:Aspose.Flash.Swf.ImportAssets2.Url">
      <summary>
            Gets or sets the URL of the imported SWF file.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.ImportAssets2.CharacterList">
      <summary>
            Gets or sets the Hashtable with pairs id / object name.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Swf.DefineSprite">
      <summary>
            Represents the sprite object. DefineSprite contains swf tags terminated with the End tag.
            </summary>
      <remarks>
            Definition of classes (such as DefineShape) are not allowed in the DefineSprite class.
            All the objects referred to by control tags in the sprite must be defined in the main body of
            the file before the sprite is defined. The next tags are valid within a DefineSprite object:
            <ul><li>ShowFrame</li><li>StartSound</li><li>FrameLabel</li><li>PlaceObject</li><li>PlaceObject2</li><li>SoundStreamHead</li><li>SoundStreamBlock</li><li>RemoveObject</li><li>RemoveObject2</li><li>End</li><li>Actions</li></ul></remarks>
    </member>
    <member name="M:Aspose.Flash.Swf.DefineSprite.#ctor(System.Int32)">
      <summary>
            DefineSprite constructor.
            </summary>
      <param name="id">Sprite Id.</param>
    </member>
    <member name="M:Aspose.Flash.Swf.DefineSprite.#ctor(System.Int32,System.Collections.ArrayList)">
      <summary>
            DefineSprite constructor.
            </summary>
      <param name="id">Sprite Id.</param>
      <param name="controls">Collection of control tags.</param>
    </member>
    <member name="M:Aspose.Flash.Swf.DefineSprite.Add(Aspose.Flash.Swf.BaseObject)">
      <summary>
            Add a control tag to the collection.
            </summary>
      <param name="movie">Control tag.</param>
    </member>
    <member name="P:Aspose.Flash.Swf.DefineSprite.SpriteId">
      <summary>
            Returns or sets the sprite Id.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.DefineSprite.ControlTags">
      <summary>
            Returns or sets the collection of control tags.
            Read/write <see cref="T:System.Collections.ArrayList" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.DefineSprite.FrameCount">
      <summary>
            Returns the number of frames in a sprite.
            Read-only <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Swf.DropShadowFilter">
      <summary>
            The Drop Shadow filter is based on the same median filter as the blur filter, but the filter is
            applied only on the alpha color channel to obtain a shadow pixel plane.
            The angle parameter is in radians. With angle set to 0, the shadow shows on the right side of
            the object. The distance is measured in pixels. The shadow pixel plane values are interpolated
            bilinearly if sub-pixel values are used.
            The strength of the shadow normalized is 1.0 in fixed point. The strength value is applied by
            multiplying each value in the shadow pixel plane.
            Various compositing options are available for the drop shadow to support both inner and
            outer shadows in regular or knockout modes.
            The resulting color value of each pixel is obtained by multiplying the color channel of the
            provided RGBA color value by the associated value in the shadow pixel plane. The resulting
            pixel value is composited on the original input pixel plane by using one of the specified
            compositing modes.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Swf.DropShadowFilter.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.DropShadowFilter.DropShadowColor">
      <summary>
            Returns or sets the color of shadow.
            Read/write <see cref="T:Aspose.Flash.Basic.RGB" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.DropShadowFilter.BlurX">
      <summary>
            Returns or sets the horizontal blur amount.
            Read/write <see cref="T:System.Single" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.DropShadowFilter.BlurY">
      <summary>
            Returns or sets the vertical blur amount.
            Read/write <see cref="T:System.Single" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.DropShadowFilter.Angle">
      <summary>
            Returns or sets the angle of a drop shadow in radians.
            Read/write <see cref="T:System.Single" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.DropShadowFilter.Distance">
      <summary>
            Returns or sets the distance of a drop shadow.
            Read/write <see cref="T:System.Single" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.DropShadowFilter.Strength">
      <summary>
            Returns or sets the strength of a drop shadow.
            Read/write <see cref="T:System.Single" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.DropShadowFilter.InnerShadow">
      <summary>
            Determines whether the inner shadow mode on.
            Read/write <see cref="T:System.Boolean" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.DropShadowFilter.Knockout">
      <summary>
            Determines whether the knockout mode is on.
            Read/write <see cref="T:System.Boolean" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.DropShadowFilter.CompositeSource">
      <summary>
            Determines whether the filter source is composite.
            Read/write <see cref="T:System.Boolean" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.DropShadowFilter.Passes">
      <summary>
            Returns or sets the number of drop shadow passes.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Swf.EnableDebugger">
      <summary>
            Enables a movie to be debugged when played using the Flash authoring tool.
            </summary>
      <remark>For SWF 6 or later use the EnableDebugger2 tag instead.</remark>
    </member>
    <member name="M:Aspose.Flash.Swf.EnableDebugger.#ctor(System.String)">
      <summary>
            EnableDebugger contructor.
            </summary>
      <param name="password">The MD5 encrypted password.</param>
    </member>
    <member name="P:Aspose.Flash.Swf.EnableDebugger.Password">
      <summary>
            Returns or sets the MD5 encrypted password.
            Read/write <see cref="T:System.String" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Swf.EnableDebugger2">
      <summary>
            Enables a movie to be debugged when played using the Flash authoring tool.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Swf.EnableDebugger2.#ctor(System.String)">
      <summary>
            EnableDebugger2 contructor.
            </summary>
      <param name="_password">The MD5 encrypted password.</param>
    </member>
    <member name="P:Aspose.Flash.Swf.EnableDebugger2.Password">
      <summary>
            Returns or sets the MD5 encrypted password.
            Read/write <see cref="T:System.String" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Swf.ExportAssets">
      <summary>
        <p>Represents the list of objects which can exported to another SWF file.</p>
        <p>Since the identifier of an object is only unique within a single Flash file,
            each exported object should have also unique name so it could be referenced.</p>
      </summary>
    </member>
    <member name="M:Aspose.Flash.Swf.ExportAssets.#ctor(System.Int32,System.String)">
      <summary>
            ExportAssets constructor. 
            </summary>
      <param name="id">The id of an object to export.</param>
      <param name="name">The name of an object to export.</param>
    </member>
    <member name="M:Aspose.Flash.Swf.ExportAssets.Add(System.Int32,System.String)">
      <summary>
            Add a new exported object to the list.
            </summary>
      <param name="id">The id of an object to export.</param>
      <param name="name">The name of an object to export.</param>
    </member>
    <member name="P:Aspose.Flash.Swf.ExportAssets.ObjectList">
      <summary>
            Returns or sets the Hashtable with pairs id / object name.
            Read/write <see cref="T:System.Collections.Hashtable" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Swf.FileAttributes">
      <summary>
        <p>Represents the properties of an SWF file.</p>
        <p>Required for SWF 8 and later and must be the first tag in an SWF file.
            Optionally the FileAttributes tag can be included in any SWF 1-7.</p>
      </summary>
    </member>
    <member name="M:Aspose.Flash.Swf.FileAttributes.#ctor(System.Boolean,System.Boolean)">
      <summary>
            FileAttributes constructor.
            </summary>
      <param name="useNetwork">Determines whether the SWF file has access to local or network files. See <see>UseNetwork</see> property for details.</param>
      <param name="hasMetadata">Determines whether the SWF file contains metadata tag.</param>
    </member>
    <member name="P:Aspose.Flash.Swf.FileAttributes.HasMetadata">
      <summary>
            Determines whether the SWF file contains metadata tag.
            Read/write <see cref="T:System.Boolean" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.FileAttributes.ActionScript3">
      <summary>
            Gets or sets a value that indicates AS3 usage.
            </summary>
      <value>If <c>true</c>, this SWF uses ActionScript 3.0.
            if <c>false</c>, this SWF uses ActionScript 1.0 or 2.0.
            Minimum file format version is 9.</value>
    </member>
    <member name="P:Aspose.Flash.Swf.FileAttributes.UseNetwork">
      <summary>
            Determines whether the SWF file has access to network or local files when loaded locally.
            <b>True</b> - access to network files. <b>False</b> - access to local files.
            Read/write <see cref="T:System.Boolean" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Swf.FrameLabel">
      <summary>
            Represents the name of a current frame which is used by GotoLabel action to identify the frame.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Swf.FrameLabel.#ctor(System.String)">
      <summary>
            Constructs a FrameLabel object with the specified name.
            </summary>
      <param name="label">Frame label.</param>
    </member>
    <member name="M:Aspose.Flash.Swf.FrameLabel.#ctor(System.String,System.Boolean)">
      <summary>
            Constructs a FrameLabel object with the specified name and anchor flag.
            </summary>
      <param name="label">Frame label.</param>
      <param name="isAnchor">Anchor flag.</param>
    </member>
    <member name="P:Aspose.Flash.Swf.FrameLabel.Label">
      <summary>
            Returns or sets the label of a frame.
            Read/write <see cref="T:System.String" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.FrameLabel.Anchor">
      <summary>
            Determines whether the frame can be searched using HTML anchor syntax.
            Read/write <see cref="T:System.Boolean" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Swf.GlowFilter">
      <summary>
            The Glow filter works in the same way as the Drop Shadow filter, except that it does not have
            a distance and angle parameter. Therefore, it can run slightly faster.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Swf.GlowFilter.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.GlowFilter.GlowColor">
      <summary>
            Color of the shadow
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.GlowFilter.BlurX">
      <summary>
            Horizontal blur amount
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.GlowFilter.BlurY">
      <summary>
            Vertical blur amount
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.GlowFilter.Strength">
      <summary>
            Strength of the glow
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.GlowFilter.InnerGlow">
      <summary>
            Inner glow mode
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.GlowFilter.Knockout">
      <summary>
            Knockout mode
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.GlowFilter.CompositeSource">
      <summary>
            Composite source
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.GlowFilter.Passes">
      <summary>
            Number of blur passes
            </summary>
    </member>
    <member name="T:Aspose.Flash.Swf.GradientGlowBevelFilter">
      <summary>
            The Gradient Glow and Gradient Bevel filters are extensions of the normal Glow and Bevel
            Filters and allow a gradient to be specified instead of a single color. Instead of multiplying a
            single color value by the shadow-pixel plane value, the shadow-pixel plane value is mapped
            directly into the gradient ramp to obtain the resulting color pixel value, which is then
            composited by using one of the specified compositing modes.	
            </summary>
    </member>
    <member name="M:Aspose.Flash.Swf.GradientGlowBevelFilter.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.GradientGlowBevelFilter.filterID">
      <summary>
            Filter ID. 4 for Gradient Glow Filter and 7 for Gradient Bevel Filter
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.GradientGlowBevelFilter.GradientColors">
      <summary>
            Gradient colors
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.GradientGlowBevelFilter.GradientRatios">
      <summary>
            Gradient ratios
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.GradientGlowBevelFilter.BlurX">
      <summary>
            Horizontal blur amount
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.GradientGlowBevelFilter.BlurY">
      <summary>
            Vertical blur amount
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.GradientGlowBevelFilter.Angle">
      <summary>
            Radian angle of the gradient glow
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.GradientGlowBevelFilter.Distance">
      <summary>
            Distance of the gradient glow
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.GradientGlowBevelFilter.Strength">
      <summary>
            Strength of the gradient glow
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.GradientGlowBevelFilter.InnerShadow">
      <summary>
            Inner glow mode
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.GradientGlowBevelFilter.Knockout">
      <summary>
            Knockout mode
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.GradientGlowBevelFilter.CompositeSource">
      <summary>
            Composite source
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.GradientGlowBevelFilter.OnTop">
      <summary>
            OnTop mode
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.GradientGlowBevelFilter.Passes">
      <summary>
            Number of blur passes
            </summary>
    </member>
    <member name="T:Aspose.Flash.Swf.ImportAssets">
      <summary>
        <p>Represents the list of objects which are imported from another SWF file.</p>
        <p>Since the identifier of an object is only unique within a single Flash file,
            each exported object should have also unique name so it could be referenced.</p>
      </summary>
    </member>
    <member name="M:Aspose.Flash.Swf.ImportAssets.#ctor(System.String,System.Int32,System.String)">
      <summary>
            ImportAssets constructor.
            </summary>
      <param name="url">The URL of an imported file.</param>
      <param name="id">The id of an object to import.</param>
      <param name="name">The name of an object to import.</param>
    </member>
    <member name="M:Aspose.Flash.Swf.ImportAssets.Add(System.Int32,System.String)">
      <summary>
            Add a new imported object to the list.
            </summary>
      <param name="id">The id of an object.</param>
      <param name="name">The name of an object.</param>
    </member>
    <member name="P:Aspose.Flash.Swf.ImportAssets.Url">
      <summary>
            Returns or sets the URL of the imported SWF file.
            Read/write <see cref="T:System.String" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.ImportAssets.CharacterList">
      <summary>
            Returns or sets the Hashtable with pairs id / object name.
            Read/write <see cref="T:System.Collections.Hashtable" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Swf.PlaceObject">
      <summary>
            The PlaceObject tag is used to add an object to the display list. The same object
            can be added more than once to the display list with a different depth and transformation.
            </summary>
      <remarks>
            PlaceObject tag is rarely used in SWF 3 and later versions; it was replaced with PlaceObject2.
            </remarks>
      <example>This example shows you how to use PlaceObject class<code>[C#]

//DefineShape class
DefineShape defineShape = new DefineShape(fc.NewIdentifier(),
new Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect);

//adding fill style and line style in the define shape 3 object
defineShape.Add(new SolidFill(new RGB(255, 0, 0)));

defineShape.Add(new SolidLine(50, new RGB(0, 255, 0)));

//Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape);

//Place the Rectangle Character on Display List
PlaceObject placeObj = new PlaceObject(defineShape.Id,1, new MatrixTransform(500,500,50,50));

//Add CONTROL TAG created above inside the flash container
fc.Add(placeObj);
//Show the next frame using CONTROL TAG and add it inside the

//flash container
fc.Add(new ShowFrame());</code><code>[Visual Basic]

'DefineShape class
Dim defineShape As New DefineShape(fc.NewIdentifier(), New Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect)

'adding fill style and line style in the define shape 3 object
defineShape.Add(New SolidFill(New RGB(255, 0, 0)))

defineShape.Add(New SolidLine(50, New RGB(0, 255, 0)))

'Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape)

'Place the Rectangle Character on Display List
Dim placeObj As New PlaceObject(defineShape.Id,1, New MatrixTransform(500,500,50,50))

'Add CONTROL TAG created above inside the flash container
fc.Add(placeObj)
'Show the next frame using CONTROL TAG and add it inside the

'flash container
fc.Add(New ShowFrame())</code></example>
    </member>
    <member name="M:Aspose.Flash.Swf.PlaceObject.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Constructs the new PlaceObject object with specified id, depth and coordinates.
            </summary>
      <param name="id">Unique id of the object.</param>
      <param name="depth">Depth of the object.</param>
      <param name="x">X-coordinate of the object.</param>
      <param name="y">Y-coordinate of the object.</param>
      <example>This example shows you how to use PlaceObject(Int32, Int32, Int32, Int32) constructor<code>[C#]

//DefineShape class
DefineShape defineShape = new DefineShape(fc.NewIdentifier(),
new Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect);

//adding fill style and line style in the define shape 3 object
defineShape.Add(new SolidFill(new RGB(255, 0, 0)));

defineShape.Add(new SolidLine(50, new RGB(0, 255, 0)));

//Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape);

//Place the Rectangle Character on Display List
PlaceObject placeObj = new PlaceObject(defineShape.Id,1, -500, 500);

//Add CONTROL TAG created above inside the flash container
fc.Add(placeObj);
//Show the next frame using CONTROL TAG and add it inside the</code><code>[Visual Basic]

'DefineShape class
Dim defineShape As New DefineShape(fc.NewIdentifier(), New Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect)

'adding fill style and line style in the define shape 3 object
defineShape.Add(New SolidFill(New RGB(255, 0, 0)))

defineShape.Add(New SolidLine(50, New RGB(0, 255, 0)))

'Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape)

'Place the Rectangle Character on Display List
Dim placeObj As New PlaceObject(defineShape.Id,1, -500, 500)

'Add CONTROL TAG created above inside the flash container
fc.Add(placeObj)
'Show the next frame using CONTROL TAG and add it inside the</code></example>
    </member>
    <member name="M:Aspose.Flash.Swf.PlaceObject.#ctor(System.Int32,System.Int32,Aspose.Flash.Basic.MatrixTransform)">
      <summary>
            Constructs the new PlaceObject object with cpecified id, depth and transformation.
            </summary>
      <param name="id">Unique od of the object.</param>
      <param name="depth">Depth of the object.</param>
      <param name="transform">Object's transformation.</param>
      <example>This example shows you how to use PlaceObject(Int32, Int32, MatrixTransform) constructor<code>[Visual Basic]

'DefineShape class
Dim defineShape As New DefineShape(fc.NewIdentifier(), New Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect)

'adding fill style and line style in the define shape 3 object
defineShape.Add(New SolidFill(New RGB(255, 0, 0)))

defineShape.Add(New SolidLine(50, New RGB(0, 255, 0)))

'Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape)

'Place the Rectangle Character on Display List
Dim placeObj As New PlaceObject(defineShape.Id,1, New MatrixTransform(500,500,50,50))

'Add CONTROL TAG created above inside the flash container
fc.Add(placeObj)
'Show the next frame using CONTROL TAG and add it inside the

'flash container
fc.Add(New ShowFrame())</code></example>
      <example>This example shows you how to use PlaceObject(Int32, Int32, MatrixTransform) method<code>[C#]

//DefineShape class
DefineShape defineShape = new DefineShape(fc.NewIdentifier(),
new Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect);

//adding fill style and line style in the define shape 3 object
defineShape.Add(new SolidFill(new RGB(255, 0, 0)));

defineShape.Add(new SolidLine(50, new RGB(0, 255, 0)));

//Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape);

//Place the Rectangle Character on Display List
PlaceObject placeObj = new PlaceObject(defineShape.Id,1, new MatrixTransform(500,500,50,50));

//Add CONTROL TAG created above inside the flash container
fc.Add(placeObj);
//Show the next frame using CONTROL TAG and add it inside the

//flash container
fc.Add(new ShowFrame());</code></example>
    </member>
    <member name="M:Aspose.Flash.Swf.PlaceObject.#ctor(System.Int32,System.Int32,Aspose.Flash.Basic.MatrixTransform,Aspose.Flash.Basic.ColorTransform)">
      <summary>
            Constructs the new PlaceObject object with cpecified id, depth, 2D and color transformations.
            </summary>
      <param name="id">Unique id of the object.</param>
      <param name="depth">Depth of the object.</param>
      <param name="transform">Object's transformation.</param>
      <param name="colorTransform">Object's color transformation.</param>
      <example>This example shows you how to use PlaceObject(Int32, Int32, MatrixTransform, ColorTransform) constructor<code>[C#]

//DefineShape class
DefineShape defineShape = new DefineShape(fc.NewIdentifier(),
new Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect);

//adding fill style and line style in the define shape 3 object
defineShape.Add(new SolidFill(new RGB(255, 0, 0)));

defineShape.Add(new SolidLine(50, new RGB(0, 255, 0)));

//Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape);

//Place the Rectangle Character on Display List
PlaceObject placeObj = new PlaceObject(defineShape.Id,1, new MatrixTransform(500,500,50,50), new ColorTransform(255,0,255));

//Add CONTROL TAG created above inside the flash container
fc.Add(placeObj);
//Show the next frame using CONTROL TAG and add it inside the</code><code>[Visual Basic]

'DefineShape class
Dim defineShape As New DefineShape(fc.NewIdentifier(), New Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect)

'adding fill style and line style in the define shape 3 object
defineShape.Add(New SolidFill(New RGB(255, 0, 0)))

defineShape.Add(New SolidLine(50, New RGB(0, 255, 0)))

'Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape)

'Place the Rectangle Character on Display List
Dim placeObj As New PlaceObject(defineShape.Id,1, New MatrixTransform(500,500,50,50), New ColorTransform(255,0,255))

'Add CONTROL TAG created above inside the flash container
fc.Add(placeObj)
'Show the next frame using CONTROL TAG and add it inside the</code></example>
    </member>
    <member name="P:Aspose.Flash.Swf.PlaceObject.ObjectId">
      <summary>
            Returns or sets the Id of an object.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.PlaceObject.Depth">
      <summary>
            Returns or sets the depth order of an object.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.PlaceObject.MatrixTransform">
      <summary>
            Returns or sets the transformation matrix of an object.
            Read/write <see cref="P:Aspose.Flash.Swf.PlaceObject.MatrixTransform" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.PlaceObject.ColorTransform">
      <summary>
            Returns or sets the color transformation of an object.
            Read/write <see cref="P:Aspose.Flash.Swf.PlaceObject.ColorTransform" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Swf.PlaceObject2">
      <summary>
            PlaceObject2 tag extends functionality of PlaceObject and used to add an object
            to the display list or change properties of an existing object.
            </summary>
      <remarks>
            The Depth propery is the only one which is required. Other properties are optional.
            </remarks>
      <example>This example shows you how to use PlaceObject2 class<code>[C#]

//DefineShape class
DefineShape2 defineShape = new DefineShape2(fc.NewIdentifier(),
new Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect);

//adding fill style and line style in the define shape 3 object
defineShape.Add(new SolidFill(new RGB(255, 0, 0)));

defineShape.Add(new SolidLine(50, new RGB(0, 255, 0)));

//Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape);

//Place the Rectangle Character on Display List
PlaceObject2 placeObj = new PlaceObject2(defineShape.Id,1, -500, 500);

//Add CONTROL TAG created above inside the flash container
fc.Add(placeObj);
//Show the next frame using CONTROL TAG and add it inside the</code><code>[Visual Basic]

'DefineShape class
Dim defineShape As New DefineShape2(fc.NewIdentifier(), New Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect)

'adding fill style and line style in the define shape 3 object
defineShape.Add(New SolidFill(New RGB(255, 0, 0)))

defineShape.Add(New SolidLine(50, New RGB(0, 255, 0)))

'Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape)

'Place the Rectangle Character on Display List
Dim placeObj As New PlaceObject2(defineShape.Id,1, -500, 500)

'Add CONTROL TAG created above inside the flash container
fc.Add(placeObj)
'Show the next frame using CONTROL TAG and add it inside the</code></example>
    </member>
    <member name="M:Aspose.Flash.Swf.PlaceObject2.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Creates the PlaceObject2 object to put a new object at the specified coordinates.
            </summary>
      <param name="id">Id of an object.</param>
      <param name="depth">Depth of an object.</param>
      <param name="x">X-coordinate of an object.</param>
      <param name="y">Y-coordinate of an object.</param>
      <example>This example shows you how to use PlaceObject2(Int32, Int32, Int32, Int32) constructor<code>[C#]

//DefineShape class
DefineShape2 defineShape = new DefineShape2(fc.NewIdentifier(),
new Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect);

//adding fill style and line style in the define shape 3 object
defineShape.Add(new SolidFill(new RGB(255, 0, 0)));

defineShape.Add(new SolidLine(50, new RGB(0, 255, 0)));

//Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape);

//Place the Rectangle Character on Display List
PlaceObject2 placeObj = new PlaceObject2(defineShape.Id,1, -500, 500);

//Add CONTROL TAG created above inside the flash container
fc.Add(placeObj);
//Show the next frame using CONTROL TAG and add it inside the</code><code>[Visual Basic]

'DefineShape class
Dim defineShape As New DefineShape2(fc.NewIdentifier(), New Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect)

'adding fill style and line style in the define shape 3 object
defineShape.Add(New SolidFill(New RGB(255, 0, 0)))

defineShape.Add(New SolidLine(50, New RGB(0, 255, 0)))

'Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape)

'Place the Rectangle Character on Display List
Dim placeObj As New PlaceObject2(defineShape.Id,1, -500, 500)

'Add CONTROL TAG created above inside the flash container
fc.Add(placeObj)
'Show the next frame using CONTROL TAG and add it inside the</code></example>
    </member>
    <member name="M:Aspose.Flash.Swf.PlaceObject2.#ctor(System.Int32,System.Int32,System.Single,System.Int32,System.Collections.ArrayList,System.String,System.Int32,System.Int32,Aspose.Flash.Basic.ColorTransform)">
      <summary>
            Creates the PlaceObject2 object to put new morphing shape at the specified coordinates.
            </summary>
      <param name="id">Id of an object.</param>
      <param name="depth">Depth of an object.</param>
      <param name="ratio">Ratio of the morphing progress.</param>
      <param name="clipDepth">Clip depth value.</param>
      <param name="clipActions">Collection of actions.</param>
      <param name="name">Name of an object.</param>
      <param name="x">X-coordinate of an object.</param>
      <param name="y">Y-coordinate of an object.</param>
      <param name="colorTransform">Color transformation.</param>
      <example>This example shows you how to use PlaceObject2(Int32, Int32, Single, Int32, ArrayList, String, Int32, Int32, ColorTransform) constructor<code>[C#]

//DefineShape class
DefineShape2 defineShape = new DefineShape2(fc.NewIdentifier(),
new Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect);

//adding fill style and line style in the define shape 3 object
defineShape.Add(new SolidFill(new RGB(255, 0, 0)));

defineShape.Add(new SolidLine(50, new RGB(0, 255, 0)));

//Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape);

//Place the Rectangle Character on Display List
PlaceObject2 placeObj = new PlaceObject2(fc.NewIdentifier(),1,5.0,1,new ArrayList(), "name",-500,500,new ColorTransform(255,0,0));


//Add CONTROL TAG created above inside the flash container
fc.Add(placeObj);
//Show the next frame using CONTROL TAG and add it inside the

//flash container
fc.Add(new ShowFrame());</code><code>[Visual Basic]

'DefineShape class
Dim defineShape As New DefineShape2(fc.NewIdentifier(), New Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect)

'adding fill style and line style in the define shape 3 object
defineShape.Add(New SolidFill(New RGB(255, 0, 0)))

defineShape.Add(New SolidLine(50, New RGB(0, 255, 0)))

'Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape)

'Place the Rectangle Character on Display List
Dim placeObj As New PlaceObject2(fc.NewIdentifier(),1,5.0,1,New ArrayList(), "name",-500,500,New ColorTransform(255,0,0))


'Add CONTROL TAG created above inside the flash container
fc.Add(placeObj)
'Show the next frame using CONTROL TAG and add it inside the

'flash container
fc.Add(New ShowFrame())</code></example>
    </member>
    <member name="M:Aspose.Flash.Swf.PlaceObject2.#ctor(System.Int32,System.Int32)">
      <summary>
            Creates the PlaceObject2 object which replaces the object at the specified depth.
            </summary>
      <param name="id">Id of the object which will replace the one currently displayed.</param>
      <param name="depth">Depth of the object which will be replaced.</param>
      <example>This example shows you how to use PlaceObject2(Int32, Int32) constructor<code>[C#]

//DefineShape class
DefineShape2 defineShape = new DefineShape2(fc.NewIdentifier(),
new Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect);

//adding fill style and line style in the define shape 3 object
defineShape.Add(new SolidFill(new RGB(255, 0, 0)));

defineShape.Add(new SolidLine(50, new RGB(0, 255, 0)));

//Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape);

//Place the Rectangle Character on Display List
PlaceObject2 placeObj = new PlaceObject2(defineShape.Id,1);

//Add CONTROL TAG created above inside the flash container
fc.Add(placeObj);
//Show the next frame using CONTROL TAG and add it inside the</code><code>[Visual Basic]

'DefineShape class
Dim defineShape As New DefineShape2(fc.NewIdentifier(), New Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect)

'adding fill style and line style in the define shape 3 object
defineShape.Add(New SolidFill(New RGB(255, 0, 0)))

defineShape.Add(New SolidLine(50, New RGB(0, 255, 0)))

'Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape)

'Place the Rectangle Character on Display List
Dim placeObj As New PlaceObject2(defineShape.Id,1)

'Add CONTROL TAG created above inside the flash container
fc.Add(placeObj)
'Show the next frame using CONTROL TAG and add it inside the</code></example>
    </member>
    <member name="M:Aspose.Flash.Swf.PlaceObject2.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>
            Creates the PlaceObject2 object which changes the location of the specified object.
            </summary>
      <param name="depth">Depth of the object to move.</param>
      <param name="xPos">X-coordinate where the object will be displayed.</param>
      <param name="yPos">Y-coordinate where the object will be displayed.</param>
      <example>This example shows you how to use PlaceObject2(Int32, Int32, Int32) constructor<code>[C#]

DefineShape2 defineShape = new DefineShape2(fc.NewIdentifier(),
new Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect);

//adding fill style and line style in the define shape 3 object
defineShape.Add(new SolidFill(new RGB(255, 0, 0)));

defineShape.Add(new SolidLine(50, new RGB(0, 255, 0)));

//Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape);

//Place the Rectangle Character on Display List
PlaceObject2 placeObj = new PlaceObject2(1, -500, 500);

//Add CONTROL TAG created above inside the flash container
fc.Add(placeObj);
//Show the next frame using CONTROL TAG and add it inside the</code><code>[Visual Basic]

Dim defineShape As New DefineShape2(fc.NewIdentifier(), New Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect)

'adding fill style and line style in the define shape 3 object
defineShape.Add(New SolidFill(New RGB(255, 0, 0)))

defineShape.Add(New SolidLine(50, New RGB(0, 255, 0)))

'Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape)

'Place the Rectangle Character on Display List
Dim placeObj As New PlaceObject2(1, -500, 500)

'Add CONTROL TAG created above inside the flash container
fc.Add(placeObj)
'Show the next frame using CONTROL TAG and add it inside the</code></example>
    </member>
    <member name="M:Aspose.Flash.Swf.PlaceObject2.#ctor(System.Int32,Aspose.Flash.Basic.MatrixTransform,Aspose.Flash.Swf.PlaceType)">
      <summary>
            Creates the PlaceObject2 object which is coordinate transform of the specified object.
            </summary>
      <param name="depth">Depth of the object to transform.</param>
      <param name="transform">Transformation matrix which is applied to the object.</param>
      <param name="placeType">Determines how to place object. See <see cref="T:Aspose.Flash.Swf.PlaceType" />.</param>
      <example>This example shows you how to use PlaceObject2(Int32, MatrixTransform, PlaceType) constructor<code>[C#]

//DefineShape class
DefineShape2 defineShape = new DefineShape2(fc.NewIdentifier(),
new Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect);

//adding fill style and line style in the define shape 3 object
defineShape.Add(new SolidFill(new RGB(255, 0, 0)));

defineShape.Add(new SolidLine(50, new RGB(0, 255, 0)));

//Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape);

//Place the Rectangle Character on Display List
PlaceObject2 placeObj = new PlaceObject2(1, new MatrixTransform(-500, -500), PlaceType.New);

//Add CONTROL TAG created above inside the flash container
fc.Add(placeObj);
//Show the next frame using CONTROL TAG and add it inside the

//flash container
fc.Add(new ShowFrame());</code><code>[Visual Basic]

'DefineShape class
Dim defineShape As New DefineShape2(fc.NewIdentifier(), New Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect)

'adding fill style and line style in the define shape 3 object
defineShape.Add(New SolidFill(New RGB(255, 0, 0)))

defineShape.Add(New SolidLine(50, New RGB(0, 255, 0)))

'Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape)

'Place the Rectangle Character on Display List
Dim placeObj As New PlaceObject2(1, New MatrixTransform(-500, -500), PlaceType.New)

'Add CONTROL TAG created above inside the flash container
fc.Add(placeObj)
'Show the next frame using CONTROL TAG and add it inside the

'flash container
fc.Add(New ShowFrame())</code></example>
    </member>
    <member name="M:Aspose.Flash.Swf.PlaceObject2.#ctor(System.Int32,Aspose.Flash.Basic.ColorTransform,Aspose.Flash.Swf.PlaceType)">
      <summary>
            Creates the PlaceObject2 object which is color transform of the specified object.
            </summary>
      <param name="depth">Depth of the object to transform.</param>
      <param name="colorTransform">Color transform which is bject that will be applied to the object.</param>
      <param name="placeType">Determines how to place object. See <see cref="T:Aspose.Flash.Swf.PlaceType" />.</param>
      <example>This example shows you how to use PlaceObject2(Int32, ColorTransform, PlaceType) constructor<code>[C#]

//DefineShape class
DefineShape2 defineShape = new DefineShape2(fc.NewIdentifier(),
new Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect);

//adding fill style and line style in the define shape 3 object
defineShape.Add(new SolidFill(new RGB(255, 0, 0)));

defineShape.Add(new SolidLine(50, new RGB(0, 255, 0)));

//Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape);

//Place the Rectangle Character on Display List
PlaceObject2 placeObj = new PlaceObject2(1, new ColorTransform(255, 0, 0), PlaceType.New);

//Add CONTROL TAG created above inside the flash container
fc.Add(placeObj);
//Show the next frame using CONTROL TAG and add it inside the

//flash container
fc.Add(new ShowFrame());</code><code>[Visual Basic]

'DefineShape class
Dim defineShape As New DefineShape2(fc.NewIdentifier(), New Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect)

'adding fill style and line style in the define shape 3 object
defineShape.Add(New SolidFill(New RGB(255, 0, 0)))

defineShape.Add(New SolidLine(50, New RGB(0, 255, 0)))

'Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape)

'Place the Rectangle Character on Display List
Dim placeObj As New PlaceObject2(1, New ColorTransform(255, 0, 0), PlaceType.New)

'Add CONTROL TAG created above inside the flash container
fc.Add(placeObj)
'Show the next frame using CONTROL TAG and add it inside the

'flash container
fc.Add(New ShowFrame())</code></example>
    </member>
    <member name="M:Aspose.Flash.Swf.PlaceObject2.Add(Aspose.Flash.Swf.ClipAction)">
      <summary>
            Adds a clip action to the collection of clip actions. If the object already
            contains some encoded clip event objects they will be deleted.
            </summary>
      <param name="clipAction">Clip action.</param>
    </member>
    <member name="P:Aspose.Flash.Swf.PlaceObject2.CharacterType">
      <summary>
            Returns or sets the type of an object.
            Read/write <see cref="T:Aspose.Flash.Swf.PlaceType" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.PlaceObject2.ClipActions">
      <summary>
            Represents one or more event handlers to be invoked when certain events occur.
            The property is valid for placing sprite objects only.
            Read/write <see cref="T:System.Collections.ArrayList" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.PlaceObject2.EncodedEvents">
      <summary>
            Sets the encoded clip events.
            Write-only <see cref="T:System.Byte" />[].
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.PlaceObject2.MoveObject">
      <summary>
            Determines whether the object is moved.
            Read/write <see cref="T:System.Boolean" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.PlaceObject2.Depth">
      <summary>
             Returns or sets the depth of an object. Objects with lower depth value are displayed
             under objects with higher depth. A depth value of 1 means the object is displayed at
             the bottom of the stack. There is can be only one character at any given depth.
             That means the object which is already on the display list can be identified by its depth.
             Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.PlaceObject2.ObjectId">
      <summary>
            Returns or sets the Id of the placed object.
            Only required for placing the object for the first time.
            Subsequent references to the object can use the Depth number.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.PlaceObject2.MatrixTransform">
      <summary>
            Returns or sets the transformation matrix of an object.
            Read/write <see cref="P:Aspose.Flash.Swf.PlaceObject2.MatrixTransform" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.PlaceObject2.ColorTransform">
      <summary>
            Returns or sets the color transformation of an object.
            Read/write <see cref="P:Aspose.Flash.Swf.PlaceObject2.ColorTransform" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.PlaceObject2.Ratio">
      <summary>
            Returns or sets the morph ratio in the range 0..65535 which defines the progress
            in the morphing process performed by the Flash Player from the defined start and
            end shapes. A value of 0 indicates the start of the process and 65535 the end.
            Read/write <see cref="T:System.Single" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.PlaceObject2.ClipDepth">
      <summary>
            Returns or sets the the top-most depth that will be masked by the clipping layer.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.PlaceObject2.Name">
      <summary>
            Returns or sets the name of an object.
            Read/write <see cref="T:System.String" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Swf.PlaceObject3">
      <summary>
            The PlaceObject3 tag extends the functionality of the PlaceObject2 tag. PlaceObject3 adds
            the following new features:
            <list type="bullet"><item><description>
            The PlaceFlagHasCacheAsBitmap field specifies whether Flash Player should internally
            cache a display object as a bitmap. Caching can speed up rendering when the object does
            not change frequently.
            </description></item><item><description>
            A number of different blend modes can be specified as an alternative to normal alpha
            compositing. The following blend modes are supported:
            Add, Layer, Alpha, Lighten, Darken, Overlay, Difference, Multiply, Erase, Screen, Hardlight, Subtract, Invert
            </description></item><item><description>
            A number of bitmap filters can be applied to the display object. Adding filters implies that
            the display object will be cached as a bitmap. The following bitmap filters are supported:
            Bevel, Drop shadow, Blur, Glow, Color matrix, Gradient bevel, Convolution, Gradient glow
            </description></item></list></summary>
      <example>This example shows you how to use PlaceObject3 class<code>[C#]

//DefineShape class
DefineShape2 defineShape = new DefineShape2(fc.NewIdentifier(),
new Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect);

//adding fill style and line style in the define shape 3 object
defineShape.Add(new SolidFill(new RGB(255, 0, 0)));

defineShape.Add(new SolidLine(50, new RGB(0, 255, 0)));

//Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape);

//Place the Rectangle Character on Display List
PlaceObject3 placeObj = new PlaceObject3();
placeObj.ColorTransform = new ColorTransform(255, 0, 0);
placeObj.MatrixTransform = new MatrixTransform(500, 500, 50, 50);


//Add CONTROL TAG created above inside the flash container
fc.Add(placeObj);</code><code>[Visual Basic]

'DefineShape class
Dim defineShape As New DefineShape2(fc.NewIdentifier(), New Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect)

'adding fill style and line style in the define shape 3 object
defineShape.Add(New SolidFill(New RGB(255, 0, 0)))

defineShape.Add(New SolidLine(50, New RGB(0, 255, 0)))

'Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape)

'Place the Rectangle Character on Display List
Dim placeObj As New PlaceObject3()
placeObj.ColorTransform = New ColorTransform(255, 0, 0)
placeObj.MatrixTransform = New MatrixTransform(500, 500, 50, 50)


'Add CONTROL TAG created above inside the flash container
fc.Add(placeObj)</code></example>
    </member>
    <member name="M:Aspose.Flash.Swf.PlaceObject3.#ctor">
      <summary>
            Default constructor.
            </summary>
      <example>This example shows you how to use PlaceObject3 constructor<code>[Visual Basic]

'DefineShape class
Dim defineShape As New DefineShape2(fc.NewIdentifier(), New Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect)

'adding fill style and line style in the define shape 3 object
defineShape.Add(New SolidFill(New RGB(255, 0, 0)))

defineShape.Add(New SolidLine(50, New RGB(0, 255, 0)))

'Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape)

'Place the Rectangle Character on Display List
Dim placeObj As New PlaceObject3()
placeObj.ColorTransform = New ColorTransform(255, 0, 0)
placeObj.MatrixTransform = New MatrixTransform(500, 500, 50, 50)


'Add CONTROL TAG created above inside the flash container
fc.Add(placeObj)</code></example>
      <example>This example shows you how to use PlaceObject3() constructor<code>[C#]

//DefineShape class
DefineShape2 defineShape = new DefineShape2(fc.NewIdentifier(),
new Rect(-1500, -1500, 1500, 1500), fillStyles, lineStyles, shapeRect);

//adding fill style and line style in the define shape 3 object
defineShape.Add(new SolidFill(new RGB(255, 0, 0)));

defineShape.Add(new SolidLine(50, new RGB(0, 255, 0)));

//Add DEFINITION TAG created above inside the flash container
fc.Add(defineShape);

//Place the Rectangle Character on Display List
PlaceObject3 placeObj = new PlaceObject3();
placeObj.ColorTransform = new ColorTransform(255, 0, 0);
placeObj.MatrixTransform = new MatrixTransform(500, 500, 50, 50);


//Add CONTROL TAG created above inside the flash container
fc.Add(placeObj);</code></example>
    </member>
    <member name="P:Aspose.Flash.Swf.PlaceObject3.PlaceType">
      <summary>
            Returns or sets the type of an object.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.PlaceObject3.HasCacheAsBitmap">
      <summary>
            Gets or sets a value indicating whether this instance has cache as bitmap flag set.
            </summary>
      <value>
        <c>true</c> if this instance has cache as bitmap flag set; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Aspose.Flash.Swf.PlaceObject3.BitmapCache">
      <summary>
            Gets or sets the bitmap cache value.
            0 = Bitmap cache disabled,
            1-255 = Bitmap cache enabled.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.PlaceObject3.HasClassName">
      <summary>
            Gets or sets a value indicating whether this instance has class name.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.PlaceObject3.HasImage">
      <summary>
            Gets or sets a value indicating whether this instance has class name or character ID of bitmap to place. 
            If HasClassName, use ClassName. If HasCharacter, use CharacterId.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.PlaceObject3.HasCharacter">
      <summary>
            Gets or sets a value indicating whether this instance places a character.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.PlaceObject3.Depth">
      <summary>
            Depth of character
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.PlaceObject3.CharacterId">
      <summary>
            ID of character to place
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.PlaceObject3.Matrix">
      <summary>
            Transform matrix data
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.PlaceObject3.ColorTransform">
      <summary>
            Color transform data
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.PlaceObject3.Ratio">
      <summary>
            Specifies a morph ratio for the character being added or modified.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.PlaceObject3.Name">
      <summary>
            Name of character
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.PlaceObject3.ClassName">
      <summary>
            Gets or sets the class name.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.PlaceObject3.ClipDepth">
      <summary>
            Clip depth
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.PlaceObject3.FilterList">
      <summary>
            List of filters on this object
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.PlaceObject3.BlendMode">
      <summary>
            Blend mode
            -1 = Equivalent to 0 or 1 for flash player,this indicates that mode value hasn't to be written at all.
            0 or 1 = normal
            2 = layer
            3 = multiply
            4 = screen
            5 = lighten
            6 = darken
            7 = add
            8 = subtract
            9 = difference
            10 = invert
            11 = alpha
            12 = erase
            13 = overlay
            14 = hardlight
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.PlaceObject3.ClipActons">
      <summary>
            Clip Actions Data
            </summary>
    </member>
    <member name="T:Aspose.Flash.Swf.PlaceType">
      <summary>
            Represents constants which show how object should be placed on a display list.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Swf.PlaceType.Modify">
      <summary>
            Update an existing object on the display list.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Swf.PlaceType.New">
      <summary>
            Add a new object to the display list.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Swf.PlaceType.Replace">
      <summary>
            Replace an existing object on the display list with a new one.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Swf.Protect">
      <summary>
            Protect tag is used to disable import of an swf file.
            If this tag presents in the file, any authoring tool
            should prevent loading the file for editing.
            </summary>
      <example>This example shows you how to use Protect class<code>[C#]

//define flash container object
FlashContainer c = new FlashContainer();
//add protect object to protect the file from editing
Protect protect = new Protect();
protect.Password = "password";
c.Add(protect);
c.FrameSize = new Rect(0, 0, 1440 * 5, 1440 * 5);</code><code>[Visual Basic]

'define flash container object
Dim c As New FlashContainer()
'add protect object to protect the file from editing
Dim protect As New Protect()
protect.Password = "password"
c.Add(protect)
c.FrameSize = New Rect(0, 0, 1440 * 5, 1440 * 5)</code></example>
    </member>
    <member name="M:Aspose.Flash.Swf.Protect.#ctor">
      <summary>
            Default constructor.
            </summary>
      <example>This example shows you how to use Protect constructor<code>[Visual Basic]

'define flash container object
Dim c As New FlashContainer()
'add protect object to protect the file from editing
Dim protect As New Protect()
protect.Password = "password"
c.Add(protect)
c.FrameSize = New Rect(0, 0, 1440 * 5, 1440 * 5)</code></example>
      <example>This example shows you how to use Protect() constructor<code>[C#]

//define flash container object
FlashContainer c = new FlashContainer();
//add protect object to protect the file from editing
Protect protect = new Protect();
protect.Password = "password";
c.Add(protect);
c.FrameSize = new Rect(0, 0, 1440 * 5, 1440 * 5);</code></example>
    </member>
    <member name="M:Aspose.Flash.Swf.Protect.#ctor(System.String)">
      <summary>
            Protect constructor.
            </summary>
      <param name="password">Password to protect swf movie.</param>
      <example>This example shows you how to use Protect(String) constructor<code>[C#]

//define flash container object
FlashContainer c = new FlashContainer();
//add protect object to protect the file from editing
Protect protect = new Protect("password");
c.Add(protect);
c.FrameSize = new Rect(0, 0, 1440 * 5, 1440 * 5);</code><code>[Visual Basic]

'define flash container object
Dim c As New FlashContainer()
'add protect object to protect the file from editing
Dim protect As New Protect("password")
c.Add(protect)
c.FrameSize = New Rect(0, 0, 1440 * 5, 1440 * 5)</code></example>
    </member>
    <member name="P:Aspose.Flash.Swf.Protect.Password">
      <summary>
            Returns or sets the password for protected swf movie.
            Read/write <see cref="T:System.String" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Swf.RemoveObject">
      <summary>
            Used to remove the specified object at the specified depth from the display list.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Swf.RemoveObject.#ctor(System.Int32,System.Int32)">
      <summary>
            Creates the RemoveObject object.
            Used to remove an object with the specified Id and Depth.
            </summary>
      <param name="id">Id of an object.</param>
      <param name="depth">Depth of an object.</param>
    </member>
    <member name="P:Aspose.Flash.Swf.RemoveObject.ObjectId">
      <summary>
            Returns or sets the Id of an object to remove.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.RemoveObject.Depth">
      <summary>
            Returns or sets the depth of an object to remove.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Swf.RemoveObject2">
      <summary>
            Used to remove the specified object at the specified depth from the display list.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Swf.RemoveObject2.#ctor(System.Int32)">
      <summary>
            Creates the RemoveObject2 object.
            Used to remove object with the specified depth.
            </summary>
      <param name="depth">Depth of an object.</param>
    </member>
    <member name="P:Aspose.Flash.Swf.RemoveObject2.Depth">
      <summary>
            Returns or sets the depth of an object to remove.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Swf.ScriptLimit">
      <summary>
        <p>ScriptLimits tag is used to override the default settings for maximum
            values of recursion depth and ActionScript timeout.</p>
        <p>The default 
            setting is 256 at the time of this writing. This default can be changed to any value greater than 0.</p>
        <p>The ScriptTimeoutSeconds property sets the maximum number of seconds the player should process
            ActionScript before displaying a dialog box asking if the script should be stopped.
            The default value for ScriptTimeoutSeconds varies by platform and is between 15 to 20 seconds.</p>
      </summary>
    </member>
    <member name="M:Aspose.Flash.Swf.ScriptLimit.#ctor(System.Int32,System.Int32)">
      <summary>
            Constructs LimitScript object with specified recursion depth and timeout.
            </summary>
      <param name="depth">The maximum recursion depth.</param>
      <param name="timeout">The timeout in seconds.</param>
    </member>
    <member name="P:Aspose.Flash.Swf.ScriptLimit.MaxRecursionDepth">
      <summary> 
            Returns or sets the maximum recursion depth. Can be changed
            to any value greater than 0. The deafult is 256.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.ScriptLimit.ScriptTimeoutSeconds">
      <summary> 
            Returns or sets the script timeout in seconds. The default
            value depends on platform and can be 15 - 20 seconds.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Swf.SetBackgroundColor">
      <summary>
            SetBackgroundColor class is use to define background color of display.
            </summary>
      <example>This example shows you how to use SetBackgroundColor class<code>[C#]

//define flash container object
FlashContainer c = new FlashContainer();
//set background color of the container
c.Add(new SetBackgroundColor(new RGB(255, 255, 255)));
c.FrameSize = new Rect(0, 0, 1440 * 5, 1440 * 5);</code><code>[Visual Basic]

'define flash container object
Dim c As New FlashContainer()
'set background color of the container
c.Add(New SetBackgroundColor(New RGB(255, 255, 255)))
c.FrameSize = New Rect(0, 0, 1440 * 5, 1440 * 5)</code></example>
    </member>
    <member name="M:Aspose.Flash.Swf.SetBackgroundColor.#ctor(Aspose.Flash.Basic.RGB)">
      <summary>
            SetBackgroundColor constructor.
            </summary>
      <param name="color">Color of a background.</param>
      <example>This example shows you how to use SetBackgroundColor(RGB) constructor<code>[C#]

//define flash container object
FlashContainer c = new FlashContainer();
//set background color of the container
c.Add(new SetBackgroundColor(new RGB(255, 255, 255)));
c.FrameSize = new Rect(0, 0, 1440 * 5, 1440 * 5);</code><code>[Visual Basic]

'define flash container object
Dim c As New FlashContainer()
'set background color of the container
c.Add(New SetBackgroundColor(New RGB(255, 255, 255)))
c.FrameSize = New Rect(0, 0, 1440 * 5, 1440 * 5)</code></example>
    </member>
    <member name="M:Aspose.Flash.Swf.SetBackgroundColor.#ctor(System.Drawing.Color)">
      <summary>
            SetBackgroundColor constructor.
            </summary>
      <param name="color">Color of a background.</param>
      <example>This example shows you how to use SetBackgroundColor(Color) constructor<code>[C#]

//define flash container object
FlashContainer c = new FlashContainer();
//set background color of the container
c.Add(new SetBackgroundColor(Color.FromName("Red")));
c.FrameSize = new Rect(0, 0, 1440 * 5, 1440 * 5);</code><code>[Visual Basic]

'define flash container object
Dim c As New FlashContainer()
'set background color of the container
c.Add(New SetBackgroundColor(Color.FromName("Red")))
c.FrameSize = New Rect(0, 0, 1440 * 5, 1440 * 5)</code></example>
    </member>
    <member name="P:Aspose.Flash.Swf.SetBackgroundColor.BackgroundColorRGB">
      <summary>
            Returns or sets the background color of a movie.
            Read/write <see cref="T:Aspose.Flash.Basic.RGB" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.SetBackgroundColor.BackgroundColor">
      <summary>
            Returns or sets the background color of a movie.
            Read/write <see cref="T:System.Drawing.Color" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Swf.SetTabIndex">
      <summary>
            SetTabIndex tag is used to set the tab order of text fields, movie clips and
            buttons visible on the display list.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Swf.SetTabIndex.#ctor(System.Int32,System.Int32)">
      <summary>
            SetTabIndex constructor.
            </summary>
      <param name="depth">Depth of an object.</param>
      <param name="index">Tab order of an object.</param>
    </member>
    <member name="P:Aspose.Flash.Swf.SetTabIndex.Depth">
      <summary>
            Returns or sets the depth of an object.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.SetTabIndex.TabIndex">
      <summary>
            Returns or sets the tab order of an object.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Swf.ShowFrame">
      <summary>
            Informs a Flash Player to display the content of the display list.
            </summary>
      <example>This example shows you how to use ShowFrame class<code>[C#]

// place button in movie clip and define button name for ActionScript
PlaceObject2 placeObject = new PlaceObject2(startButton.ButtonId, 1);
placeObject.CharacterType = PlaceType.New;
placeObject.Name = buttonName; // button name
placeObject.MatrixTransform = new MatrixTransform(1190, 2580);
placeObject.Ratio = 3.051804E-05f;
defineButton.Add(placeObject);
defineButton.Add(new ShowFrame());
return defineButton;</code><code>[Visual Basic]

' place button in movie clip and define button name for ActionScript
Dim placeObject As New PlaceObject2(startButton.ButtonId, 1)
placeObject.CharacterType = PlaceType.New
placeObject.Name = buttonName ' button name
placeObject.MatrixTransform = New MatrixTransform(1190, 2580)
placeObject.Ratio = 3.051804E-05f
defineButton.Add(placeObject)
defineButton.Add(New ShowFrame())
Return defineButton</code></example>
    </member>
    <member name="M:Aspose.Flash.Swf.ShowFrame.#ctor">
      <summary>
            Default constructor.
            </summary>
      <example>This example shows you how to use ShowFrame constructor<code>[C#]

// place button in movie clip and define button name for ActionScript
PlaceObject2 placeObject = new PlaceObject2(startButton.ButtonId, 1);
placeObject.CharacterType = PlaceType.New;
placeObject.Name = buttonName; // button name
placeObject.MatrixTransform = new MatrixTransform(1190, 2580);
placeObject.Ratio = 3.051804E-05f;
defineButton.Add(placeObject);
defineButton.Add(new ShowFrame());
return defineButton;</code><code>[Visual Basic]

' place button in movie clip and define button name for ActionScript
Dim placeObject As New PlaceObject2(startButton.ButtonId, 1)
placeObject.CharacterType = PlaceType.New
placeObject.Name = buttonName ' button name
placeObject.MatrixTransform = New MatrixTransform(1190, 2580)
placeObject.Ratio = 3.051804E-05f
defineButton.Add(placeObject)
defineButton.Add(New ShowFrame())
Return defineButton</code></example>
    </member>
    <member name="T:Aspose.Flash.Swf.DefineBinaryData">
      <summary>
            The DefineBinaryData tag permits arbitrary binary data to be embedded in a SWF file.
            DefineBinaryData is a definition tag, like DefineShape and DefineSprite. It associates a blob
            of binary data with a standard SWF 16-bit character ID. The character ID is entered into the
            SWF file's character dictionary.
            DefineBinaryData is intended to be used in conjunction with the SymbolClass tag. The
            SymbolClass tag can be used to associate a DefineBinaryData tag with an AS3 class definition.
            The AS3 class must be a subclass of ByteArray. When the class is instantiated, it will be
            populated automatically with the contents of the binary data resource.
             </summary>
    </member>
    <member name="M:Aspose.Flash.Swf.DefineBinaryData.#ctor(System.Int32,System.Byte[])">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Flash.Swf.DefineBinaryData" /> tag.
            </summary>
      <param name="characterId">The character id.</param>
      <param name="data">The binary data.</param>
    </member>
    <member name="P:Aspose.Flash.Swf.DefineBinaryData.Data">
      <summary>
            Gets or sets the blob of binary data.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.DefineBinaryData.Id">
      <summary>
            Gets or sets the 16-bit character ID.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Swf.TransitionClickNext">
      <summary>
            Represents the effect that requires user click action.(beta)
            </summary>
    </member>
    <member name="T:Aspose.Flash.Swf.TransitionDirection">
      <summary>
            The direction for the transition effect.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Swf.SymbolClass">
      <summary>
            The SymbolClass tag creates associations between symbols in the SWF file and ActionScript 3.0 classes. 
            It is the ActionScript 3.0 equivalent of the ExportAssets tag. If the
            character ID is zero, the class is associated with the main timeline of the SWF. This is how the
            root class of a SWF is designated. Classes listed in the SymbolClass tag are available for
            creation by other SWF files (see StartSound2, DefineEditText (HasFontClass), and
            PlaceObject3 (PlaceFlagHasClassName and PlaceFlagHasImage). For example, ten SWF files
            that are all part of the same website can share an embedded custom font if one file embeds
            and exports the font class. 
            </summary>
    </member>
    <member name="M:Aspose.Flash.Swf.SymbolClass.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Flash.Swf.SymbolClass" /> class.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Swf.SymbolClass.Add(System.Int32,System.String)">
      <summary>
            Adds a new id/classname pair to the list.
            </summary>
      <param name="id">The tag id.</param>
      <param name="name">The class name.</param>
    </member>
    <member name="P:Aspose.Flash.Swf.SymbolClass.ClassList">
      <summary>
            Gets or sets the hashtable with pairs <c>tag id</c> / <c>symbol name</c>.
            Where tag id is 16-bit character tag ID for the symbol to associate and
            symbol name  is  the fully-qualified name of the ActionScript 3.0 class with which to associate this symbol. 
            The class must have already been declared by a DoABC tag.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Swf.TransitionCover">
      <summary>
            Represents an effect when image is sliding from selected side into the scene.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Swf.TransitionCover.#ctor(Aspose.Flash.Swf.TransitionDirection)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Flash.Swf.TransitionCover" /> class.
            </summary>
      <param name="slidingDirection">The sliding direction.</param>
    </member>
    <member name="P:Aspose.Flash.Swf.TransitionCover.SlidingDirection">
      <summary>
            Gets or sets the sliding direction.
            </summary>
      <value>The sliding direction.</value>
    </member>
    <member name="T:Aspose.Flash.Swf.TransitionUncover">
      <summary>
            Represents uncover effect.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Swf.TransitionUncover.#ctor(Aspose.Flash.Swf.TransitionDirection)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Flash.Swf.TransitionUncover" /> class.
            </summary>
      <param name="direction">The direction.</param>
    </member>
    <member name="P:Aspose.Flash.Swf.TransitionUncover.Direction">
      <summary>
            Gets or sets the direction of the effect.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Swf.TransitionWedge">
      <summary>
            Represents wedge effect.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Swf.TransitionWheel1Spoke">
      <summary>
            Represents wheel1spoke effect.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Swf.TransitionWheel2Spokes">
      <summary>
            Represents wheel2spokes effect.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Swf.TransitionWheel3Spokes">
      <summary>
            Represents wheel3spokes effect.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Swf.TransitionWheel4Spokes">
      <summary>
            Represents wheel4spokes effect.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Swf.TransitionWheel8Spokes">
      <summary>
            Represents wheel8spokes effect.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Swf.TransitionWipe">
      <summary>
            Represents wipe down effect.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Swf.TransitionWipe.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Flash.Swf.TransitionWipe" /> class.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Swf.TransitionWipe.#ctor(Aspose.Flash.Swf.TransitionDirection)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Flash.Swf.TransitionWipe" /> class.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.TransitionWipe.Direction">
      <summary>
            Gets or sets the direction for the effect, default value is <see cref="F:Aspose.Flash.Swf.TransitionDirection.Left" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Swf.UnknownObject">
      <summary>
            UnknownObject is used to represent any data tag decoded from a Flash file
            but currently is not supported by the Aspose.Flash.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Swf.UnknownObject.Data">
      <summary>
            Returns or sets the raw data of an unknown tag.
            Read/write <see cref="T:System.Byte" />[].
            </summary>
    </member>
    <member name="T:Aspose.Flash.Text.DefineFont4">
      <summary>
            DefineFont4 supports only the new Flash Text Engine.
            The storage of font data for embedded fonts is in CFF format.
            </summary>
      <example>This example shows you how to use DefineFont4 Class<code>[C#]

DefineFont4 font = new DefineFont4(flash.NewIdentifier(), "Verdana");
font.Italic = false;
font.Bold = false;
flash.Add(font);</code><code>[Visual Basic]

Dim font As New DefineFont4(flash.NewIdentifier(), "Verdana")
font.Italic = False
font.Bold = False
flash.Add(font)</code></example>
    </member>
    <member name="M:Aspose.Flash.Text.DefineFont4.#ctor(System.Int32,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Flash.Text.DefineFont4" /> class.
            </summary>
      <param name="id">The id of the font.</param>
      <param name="name">The name of the font.</param>
      <example>This example shows you how to use DefineFont4(Int32, String) constructor<code>[C#]

DefineFont4 font = new DefineFont4(flash.NewIdentifier(), "Verdana");
font.Italic = false;
font.Bold = false;
flash.Add(font);</code><code>[Visual Basic]

Dim font As New DefineFont4(flash.NewIdentifier(), "Verdana")
font.Italic = False
font.Bold = False
flash.Add(font)</code></example>
    </member>
    <member name="M:Aspose.Flash.Text.DefineFont4.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Flash.Text.DefineFont4" /> class.
            </summary>
      <example>This example shows you how to use DefineFont4 constructor<code>[Visual Basic]

Dim font As New DefineFont4()
font.FontName = "Verdana"
font.Italic = False
font.Bold = False
flash.Add(font)</code></example>
      <example>This example shows you how to use DefineFont4() constructor<code>[C#]

DefineFont4 font = new DefineFont4();
font.FontName = "Verdana";
font.Italic = false;
font.Bold = false;
flash.Add(font);</code></example>
    </member>
    <member name="P:Aspose.Flash.Text.DefineFont4.FontId">
      <summary>
            Gets or sets the font id.
            </summary>
      <value>The font id.</value>
    </member>
    <member name="P:Aspose.Flash.Text.DefineFont4.Italic">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:Aspose.Flash.Text.DefineFont4" /> is italic.
            </summary>
      <value>
        <c>true</c> if italic; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Aspose.Flash.Text.DefineFont4.Bold">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:Aspose.Flash.Text.DefineFont4" /> is bold.
            </summary>
      <value>
        <c>true</c> if bold; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Aspose.Flash.Text.DefineFont4.FontName">
      <summary>
            Gets or sets the name of the font.
            </summary>
      <value>The name of the font.</value>
    </member>
    <member name="P:Aspose.Flash.Text.DefineFont4.FontData">
      <summary>
            When present, this is an OpenType CFF font, as defined in the OpenType specification at www.microsoft.com/
            typography/otspec. The following tables must be present: ‘CFF ’, ‘cmap’, ‘head’, ‘maxp’, ‘OS/2’, ‘post’, and
            either (a) ‘hhea’ and ‘hmtx’, or (b) ‘vhea’, ‘vmtx’, and ‘VORG’. The ‘cmap’ table must include one of the following
            kinds of Unicode ‘cmap’ subtables: (0, 4), (0, 3), (3, 10), (3, 1), or (3, 0) [notation: (platform ID, platformspecific
            encoding ID)]. Tables such as ‘GSUB’, ‘GPOS’, ‘GDEF’, and ‘BASE’ may also be present.
            Only present for embedded fonts.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Text.CSMTableHintType">
      <summary>
            Represents the hint type of characters.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Text.CSMTableHintType.Thin">
      <summary>
            Thin font.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Text.CSMTableHintType.Medium">
      <summary>
            Medium font.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Text.CSMTableHintType.Thick">
      <summary>
            Thick font.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Text.CSMTextSettings">
      <summary>
            The CSMTextSettings tag modifies a previously streamed
            DefineText, DefineText2, or DefineEditText tag. The CSMTextSettings tag turns FlashType
            on or off for a text field, and can also be used to define FlashType quality and options.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Text.CSMTextSettings.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Text.CSMTextSettings.TextId">
      <summary>
            Id of a DefineText, DefineText2, or DefineEditText tag to which this text settings apply.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Text.CSMTextSettings.UseFlashType">
      <summary>
            Determines whether the advanced text rendering engine will be used.
            0 - use normal renderer, 1 - use advanced text rendering engine.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Text.CSMTextSettings.GridFit">
      <summary>
            Returns or sets the grid fitting type.
            Read/write <see cref="T:Aspose.Flash.Text.GridFitType" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Text.CSMTextSettings.Thickness">
      <summary>
            Returns or sets the thickness attribute for the associated text field. 
            Set to 0.0 to use the default (anti-aliasing table) value.
            Read/write <see cref="T:System.Single" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Text.CSMTextSettings.Sharpness">
      <summary>
            Returns or sets the sharpness attribute for the associated text field.
            Set to 0.0 to use the default (anti-aliasing table) value.
            Read/write <see cref="T:System.Single" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Text.DefineEditText">
      <summary>
            Represents the dynamic text object or text field. The text field is associated with
            an ActionScript variable name where the contents of the text field is stored.
            The SWF movie can read and write the contents of the variable, which is always kept
            in sync with the text being displayed. If the ReadOnly property is not set,
            users can change the value of the text field interactively.
            </summary>
      <remarks>
            Fonts used by DefineEditText must be defined using DefineFont2 but not DefineFont.
            </remarks>
      <example>This example shows you how to use DefineEditText class<code>[C#]

DefineFont2 font = new DefineFont2(flash.NewIdentifier(), "Verdana");

font.Small = false;
font.Italic = false;
font.Bold = false;
font.Language = TextLanguage.Latin;
font.Leading = 0;
font.CodeTable = new ArrayList();
font.GlyphShapeTable = new ArrayList();
flash.Add(font);

Rect bounds = new Rect(-40, -40, 1179, 596);
DefineEditText text = new DefineEditText(flash.NewIdentifier(), bounds);
text.FontId = font.FontId;
text.WordWrap = false;
text.Multiline = true;
text.ReadOnly = true;
text.AutoSize = false;
text.NoSelect = false;
text.Bordered = false;
text.HTML = true;
text.UseOutlines = false;
text.FontHeight = 400;
text.TextColorRGB = new RGB(0, 0, 0, 255);
text.Leading = 40;
text.InitialText = "&lt;P ALIGN=\"LEFT\"&gt;&lt;FONT FACE=\"Verdana\" SIZE=\"20\" COLOR=\"#000000\"&gt;Start&lt;/FONT&gt;&lt;/P&gt;";

flash.Add(text);</code><code>[Visual Basic]

Dim font As New DefineFont2(flash.NewIdentifier(), "Verdana")

font.Small = False
font.Italic = False
font.Bold = False
font.Language = TextLanguage.Latin
font.Leading = 0
font.CodeTable = New ArrayList()
font.GlyphShapeTable = New ArrayList()
flash.Add(font)

Dim bounds As New Rect(-40, -40, 1179, 596)
Dim text As New DefineEditText(flash.NewIdentifier(), bounds)
text.FontId = font.FontId
text.WordWrap = False
text.Multiline = True
text.ReadOnly = True
text.AutoSize = False
text.NoSelect = False
text.Bordered = False
text.HTML = True
text.UseOutlines = False
text.FontHeight = 400
text.TextColorRGB = New RGB(0, 0, 0, 255)
text.Leading = 40
text.InitialText = "&lt;P ALIGN=""LEFT""&gt;&lt;FONT FACE=""Verdana"" SIZE=""20"" COLOR=""#000000""&gt;Start&lt;/FONT&gt;&lt;/P&gt;"

flash.Add(text)</code></example>
    </member>
    <member name="M:Aspose.Flash.Text.DefineEditText.#ctor(System.Int32,Aspose.Flash.Basic.Rect)">
      <summary>
            DefineEditText constructor.
            </summary>
      <param name="id">Object Id.</param>
      <param name="bounds">Bounding rectangle for the text field.</param>
      <example>This example shows you how to use DefineEditText constructor<code>[C#]

DefineFont2 font = new DefineFont2(flash.NewIdentifier(), "Verdana");

font.Small = false;
font.Italic = false;
font.Bold = false;
font.Language = TextLanguage.Latin;
font.Leading = 0;
font.CodeTable = new ArrayList();
font.GlyphShapeTable = new ArrayList();
flash.Add(font);

Rect bounds = new Rect(-40, -40, 1179, 596);
DefineEditText text = new DefineEditText(flash.NewIdentifier(), bounds);
text.FontId = font.FontId;
text.WordWrap = false;
text.Multiline = true;
text.ReadOnly = true;
text.AutoSize = false;
text.NoSelect = false;
text.Bordered = false;
text.HTML = true;
text.UseOutlines = false;
text.FontHeight = 400;
text.TextColorRGB = new RGB(0, 0, 0, 255);
text.Leading = 40;
text.InitialText = "&lt;P ALIGN=\"LEFT\"&gt;&lt;FONT FACE=\"Verdana\" SIZE=\"20\" COLOR=\"#000000\"&gt;Start&lt;/FONT&gt;&lt;/P&gt;";

flash.Add(text);</code><code>[Visual Basic]

Dim font As New DefineFont2(flash.NewIdentifier(), "Verdana")

font.Small = False
font.Italic = False
font.Bold = False
font.Language = TextLanguage.Latin
font.Leading = 0
font.CodeTable = New ArrayList()
font.GlyphShapeTable = New ArrayList()
flash.Add(font)

Dim bounds As New Rect(-40, -40, 1179, 596)
Dim text As New DefineEditText(flash.NewIdentifier(), bounds)
text.FontId = font.FontId
text.WordWrap = False
text.Multiline = True
text.ReadOnly = True
text.AutoSize = False
text.NoSelect = False
text.Bordered = False
text.HTML = True
text.UseOutlines = False
text.FontHeight = 400
text.TextColorRGB = New RGB(0, 0, 0, 255)
text.Leading = 40
text.InitialText = "&lt;P ALIGN=""LEFT""&gt;&lt;FONT FACE=""Verdana"" SIZE=""20"" COLOR=""#000000""&gt;Start&lt;/FONT&gt;&lt;/P&gt;"

flash.Add(text)</code></example>
    </member>
    <member name="P:Aspose.Flash.Text.DefineEditText.FontId">
      <summary>
            Returns or sets the font Id used for a text field.
            Read/write <see cref="T:System.Int32" />.
            <remarks>
            Setting the font identifier, to a valid value(&gt;0), automatically sets the <see cref="P:Aspose.Flash.Text.DefineEditText.HasFontClass" /> flag to false;
            </remarks>&gt;
            </summary>
    </member>
    <member name="P:Aspose.Flash.Text.DefineEditText.ObjectId">
      <summary>
            Gets or sets the object Id.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Text.DefineEditText.WordWrap">
      <summary>
            Determines whether the text wrapped automatically if the end of line is reached.
            Read/write <see cref="T:System.Boolean" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Text.DefineEditText.WasStatic">
      <summary>
            Gets or sets a value indicating how this instance was authored.
            </summary>
      <value>
        <c>false</c> = Authored as dynamic text; <c>true</c> = Authored as static text.
            </value>
    </member>
    <member name="P:Aspose.Flash.Text.DefineEditText.HasFontClass">
      <summary>
            Gets or sets a value indicating whether this instance has font class; false = no fontClass, true = fontClass
            and Height specified for this text. (can't be true if HasFont is true). Supported in Flash Player 9.0.45.0 and later.
            </summary>
      <exception cref="T:Aspose.Flash.FlashException">If already contains a font and setting value=true.</exception>
    </member>
    <member name="P:Aspose.Flash.Text.DefineEditText.Multiline">
      <summary>
            Determines whether the text is multi-line and scrolled automatically.
            Read/write <see cref="T:System.Boolean" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Text.DefineEditText.Password">
      <summary>
            Determines whether the characters are displayed as an asterisk for password text fields.
            Read/write <see cref="T:System.Boolean" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Text.DefineEditText.ReadOnly">
      <summary>
            Determines whether the text field is read-only.
            Read/write <see cref="T:System.Boolean" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Text.DefineEditText.NoSelect">
      <summary>
            Determines whether the interactive text selection is enabled.
            Read/write <see cref="T:System.Boolean" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Text.DefineEditText.Bordered">
      <summary>
            Determines whether the border around the text field is visible.
            Read/write <see cref="T:System.Boolean" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Text.DefineEditText.HTML">
      <summary>
            Determines whether the content of text field has HTML format.
            Read/write <see cref="T:System.Boolean" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Text.DefineEditText.UseOutlines">
      <summary>
            Determines whether the glyph font is used instead of device font.
            Read/write <see cref="T:System.Boolean" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Text.DefineEditText.AutoSize">
      <summary>
            Determines whether the field size can be resized to content size automatically.
            Read/write <see cref="T:System.Boolean" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Text.DefineEditText.FontHeight">
      <summary>
            Returns or sets the font height in twips.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Text.DefineEditText.TextColorRGB">
      <summary>
            Returns or sets the text color.
            Read/write <see cref="T:Aspose.Flash.Basic.RGB" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Text.DefineEditText.TextColor">
      <summary>
            Returns or sets the text color.
            Read/write <see cref="T:System.Drawing.Color" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Text.DefineEditText.MaxLength">
      <summary>
            Returns or sets the maximal length of a text.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Text.DefineEditText.Alignment">
      <summary>
            Returns or sets the text alignment.
            Read/write <see cref="T:Aspose.Flash.Text.TextAlignment" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Text.DefineEditText.LeftMargin">
      <summary>
            Returns or sets the left margin in twips.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Text.DefineEditText.RightMargin">
      <summary>
            Returns or sets the right margin in twips.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Text.DefineEditText.Indent">
      <summary>
            Returns or sets the text indentation in twips.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Text.DefineEditText.Leading">
      <summary>
            Returns or sets the leading space in twips.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Text.DefineEditText.VariableName">
      <summary>
            Returns or sets the name of the variable where the content of a text field is stored.
            Read/write <see cref="T:System.String" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Text.DefineEditText.InitialText">
      <summary>
            Returns or sets the text which is initially displayed in a text field.
            Read/write <see cref="T:System.String" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Text.DefineEditText.Bounds">
      <summary>
            Returns or sets the rectangle which completely encloses the text field.
            Read/write <see cref="T:Aspose.Flash.Basic.Rect" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Text.DefineFont">
      <summary>
            Represents the shape outlines of each glyph used in a particular font.
            Only the glyphs that are used by subsequent DefineText tag are actually defined.
            </summary>
      <remarks>
            DefineFont tags cannot be used for dynamic text. Dynamic text requires the DefineFont2 tag.
            </remarks>
      <example>This example shows you how to use DefineFont Class<code>[C#]

//define GlyphShapeTable first and add Glyph shapes
ArrayList glyphShapeTable = new ArrayList();
//define font
DefineFont font = new DefineFont(flash.NewIdentifier(), glyphShapeTable);
//add font to flash container object
flash.Add(font);</code><code>[Visual Basic]

'define GlyphShapeTable first and add Glyph shapes
Dim glyphShapeTable As New ArrayList()
'define font
Dim font As New DefineFont(flash.NewIdentifier(), glyphShapeTable)
'add font to flash container object
flash.Add(font)</code></example>
    </member>
    <member name="M:Aspose.Flash.Text.DefineFont.#ctor(System.Int32,System.Collections.ArrayList)">
      <summary>
            DefineFont contructor.
            </summary>
      <param name="id">Font Id.</param>
      <param name="glyphShapeTable">Collection of glyph shapes.</param>
      <example>This example shows you how to use DefineFont constructor<code>[C#]

//define GlyphShapeTable first and add Glyph shapes
ArrayList glyphShapeTable = new ArrayList();
//define font
DefineFont font = new DefineFont(flash.NewIdentifier(), glyphShapeTable);
//add font to flash container object
flash.Add(font);</code><code>[Visual Basic]

'define GlyphShapeTable first and add Glyph shapes
Dim glyphShapeTable As New ArrayList()
'define font
Dim font As New DefineFont(flash.NewIdentifier(), glyphShapeTable)
'add font to flash container object
flash.Add(font)</code></example>
    </member>
    <member name="M:Aspose.Flash.Text.DefineFont.Add(Aspose.Flash.Shapes.Shape)">
      <summary>
            Add a shape to the collection of shapes.
            </summary>
      <param name="shape">
        <see cref="T:Aspose.Flash.Shapes.Shape" /> object.</param>
      <example>This example shows you how to use Add(Shape) method<code>[C#]

//define GlyphShapeTable first and add Glyph shapes
ArrayList glyphShapeTable = new ArrayList();
//define font
DefineFont font = new DefineFont(flash.NewIdentifier(), glyphShapeTable);
//define shape list and add shapes
ArrayList shapeList = new ArrayList();
//define a shape object and add shape list to it
Shape shape = new Shape(shapeList);
//add shape object to the font object
font.Add(shape);
//add font to flash container object
flash.Add(font);</code><code>[Visual Basic]

'define GlyphShapeTable first and add Glyph shapes
Dim glyphShapeTable As New ArrayList()
'define font
Dim font As New DefineFont(flash.NewIdentifier(), glyphShapeTable)
'define shape list and add shapes
Dim shapeList As New ArrayList()
'define a shape object and add shape list to it
Dim shape As New Shape(shapeList)
'add shape object to the font object
font.Add(shape)
'add font to flash container object
flash.Add(font)</code></example>
    </member>
    <member name="P:Aspose.Flash.Text.DefineFont.FontId">
      <summary>
            Returns or sets the font Id.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Text.DefineFont.GlyphShapeTable">
      <summary>
            Returns or sets the collection of glyph shapes.
            Read/write <see cref="T:System.Collections.ArrayList" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Text.DefineFont2">
      <summary>
            Represents the shape outlines of each glyph used in a particular font.
            Extends the functionality of DefineFont tag. Enhancements include the following:
            <ul><li>Suuport for fonts with more than 64K glyphs.</li><li>Mapping to device fonts.</li><li>Font metrics.</li></ul></summary>
      <remarks>
            DefineFont2 tags are the only font definitions that can be used for dynamic text.
            </remarks>
      <example>This example shows you how to use DefineFont2 Class<code>[C#]

DefineFont2 font = new DefineFont2(flash.NewIdentifier(), "Verdana");

font.Small = false;
font.Italic = false;
font.Bold = false;
font.Language = TextLanguage.Latin;
font.Leading = 0;
font.CodeTable = new ArrayList();
font.GlyphShapeTable = new ArrayList();
flash.Add(font);

Rect bounds = new Rect(-40, -40, 1179, 596);
DefineEditText text = new DefineEditText(flash.NewIdentifier(), bounds);
text.FontId = font.FontId;
text.WordWrap = false;
text.Multiline = true;
text.ReadOnly = true;
text.AutoSize = false;
text.NoSelect = false;
text.Bordered = false;
text.HTML = true;
text.UseOutlines = false;
text.FontHeight = 400;
text.TextColorRGB = new RGB(0, 0, 0, 255);
text.Leading = 40;
text.InitialText = "&lt;P ALIGN=\"LEFT\"&gt;&lt;FONT FACE=\"Verdana\" SIZE=\"20\" COLOR=\"#000000\"&gt;Start&lt;/FONT&gt;&lt;/P&gt;";

flash.Add(text);</code><code>[Visual Basic]

Dim font As New DefineFont2(flash.NewIdentifier(), "Verdana")

font.Small = False
font.Italic = False
font.Bold = False
font.Language = TextLanguage.Latin
font.Leading = 0
font.CodeTable = New ArrayList()
font.GlyphShapeTable = New ArrayList()
flash.Add(font)

Dim bounds As New Rect(-40, -40, 1179, 596)
Dim text As New DefineEditText(flash.NewIdentifier(), bounds)
text.FontId = font.FontId
text.WordWrap = False
text.Multiline = True
text.ReadOnly = True
text.AutoSize = False
text.NoSelect = False
text.Bordered = False
text.HTML = True
text.UseOutlines = False
text.FontHeight = 400
text.TextColorRGB = New RGB(0, 0, 0, 255)
text.Leading = 40
text.InitialText = "&lt;P ALIGN=""LEFT""&gt;&lt;FONT FACE=""Verdana"" SIZE=""20"" COLOR=""#000000""&gt;Start&lt;/FONT&gt;&lt;/P&gt;"

flash.Add(text)</code></example>
    </member>
    <member name="M:Aspose.Flash.Text.DefineFont2.#ctor(System.Int32,System.String)">
      <summary>
            DefineFont2 constructor.
            </summary>
      <param name="id">Font Id.</param>
      <param name="name">Font name.</param>
      <example>This example shows you how to use DefineFont2 constructor<code>[C#]

DefineFont2 font = new DefineFont2(flash.NewIdentifier(), "Verdana");

font.Small = false;
font.Italic = false;
font.Bold = false;
font.Language = TextLanguage.Latin;
font.Leading = 0;
font.CodeTable = new ArrayList();
font.GlyphShapeTable = new ArrayList();
flash.Add(font);

Rect bounds = new Rect(-40, -40, 1179, 596);
DefineEditText text = new DefineEditText(flash.NewIdentifier(), bounds);
text.FontId = font.FontId;
text.WordWrap = false;
text.Multiline = true;
text.ReadOnly = true;
text.AutoSize = false;
text.NoSelect = false;
text.Bordered = false;
text.HTML = true;
text.UseOutlines = false;
text.FontHeight = 400;
text.TextColorRGB = new RGB(0, 0, 0, 255);
text.Leading = 40;
text.InitialText = "&lt;P ALIGN=\"LEFT\"&gt;&lt;FONT FACE=\"Verdana\" SIZE=\"20\" COLOR=\"#000000\"&gt;Start&lt;/FONT&gt;&lt;/P&gt;";

flash.Add(text);</code><code>[Visual Basic]

Dim font As New DefineFont2(flash.NewIdentifier(), "Verdana")

font.Small = False
font.Italic = False
font.Bold = False
font.Language = TextLanguage.Latin
font.Leading = 0
font.CodeTable = New ArrayList()
font.GlyphShapeTable = New ArrayList()
flash.Add(font)

Dim bounds As New Rect(-40, -40, 1179, 596)
Dim text As New DefineEditText(flash.NewIdentifier(), bounds)
text.FontId = font.FontId
text.WordWrap = False
text.Multiline = True
text.ReadOnly = True
text.AutoSize = False
text.NoSelect = False
text.Bordered = False
text.HTML = True
text.UseOutlines = False
text.FontHeight = 400
text.TextColorRGB = New RGB(0, 0, 0, 255)
text.Leading = 40
text.InitialText = "&lt;P ALIGN=""LEFT""&gt;&lt;FONT FACE=""Verdana"" SIZE=""20"" COLOR=""#000000""&gt;Start&lt;/FONT&gt;&lt;/P&gt;"

flash.Add(text)</code></example>
    </member>
    <member name="M:Aspose.Flash.Text.DefineFont2.Add(Aspose.Flash.Shapes.Shape)">
      <summary>
            Add a glyph shape to the collection of shapes.
            </summary>
      <param name="shape">Glyph shape.</param>
    </member>
    <member name="M:Aspose.Flash.Text.DefineFont2.AddCode(System.Int32)">
      <summary>
            Add a code to the collection of codes.
            </summary>
      <param name="code">Code for a glyph.</param>
    </member>
    <member name="M:Aspose.Flash.Text.DefineFont2.AddAdvance(System.Int32)">
      <summary>
            Add an advance to the collection of advances.
            </summary>
      <param name="advance">Advance for a glyph.</param>
    </member>
    <member name="M:Aspose.Flash.Text.DefineFont2.Add(Aspose.Flash.Basic.Rect)">
      <summary>
            Add a bounds rectangle to the collection of bounds for each glyph.
            </summary>
      <param name="bounds">
        <see cref="T:Aspose.Flash.Basic.Rect" /> object.</param>
      <example>This example shows you how to use Add(Rect) method<code>[C#]

DefineFont2 font = new DefineFont2(flash.NewIdentifier(), "Verdana");

font.Small = false;
font.Italic = false;
font.Bold = false;
font.Language = TextLanguage.Latin;
font.Leading = 0;
font.CodeTable = new ArrayList();
font.GlyphShapeTable = new ArrayList();
font.Add(new Rect(-40, -40, 1179, 596));
flash.Add(font);

Rect bounds = new Rect(-40, -40, 1179, 596);
DefineEditText text = new DefineEditText(flash.NewIdentifier(), bounds);
text.FontId = font.FontId;
text.WordWrap = false;
text.Multiline = true;
text.ReadOnly = true;
text.AutoSize = false;
text.NoSelect = false;
text.Bordered = false;
text.HTML = true;
text.UseOutlines = false;
text.FontHeight = 400;
text.TextColorRGB = new RGB(0, 0, 0, 255);
text.Leading = 40;
text.InitialText = "&lt;P ALIGN=\"LEFT\"&gt;&lt;FONT FACE=\"Verdana\" SIZE=\"20\" COLOR=\"#000000\"&gt;Start&lt;/FONT&gt;&lt;/P&gt;";

flash.Add(text);</code><code>[Visual Basic]

Dim font As New DefineFont2(flash.NewIdentifier(), "Verdana")

font.Small = False
font.Italic = False
font.Bold = False
font.Language = TextLanguage.Latin
font.Leading = 0
font.CodeTable = New ArrayList()
font.GlyphShapeTable = New ArrayList()
font.Add(New Rect(-40, -40, 1179, 596))
flash.Add(font)

Dim bounds As New Rect(-40, -40, 1179, 596)
Dim text As New DefineEditText(flash.NewIdentifier(), bounds)
text.FontId = font.FontId
text.WordWrap = False
text.Multiline = True
text.ReadOnly = True
text.AutoSize = False
text.NoSelect = False
text.Bordered = False
text.HTML = True
text.UseOutlines = False
text.FontHeight = 400
text.TextColorRGB = New RGB(0, 0, 0, 255)
text.Leading = 40
text.InitialText = "&lt;P ALIGN=""LEFT""&gt;&lt;FONT FACE=""Verdana"" SIZE=""20"" COLOR=""#000000""&gt;Start&lt;/FONT&gt;&lt;/P&gt;"

flash.Add(text)</code></example>
    </member>
    <member name="M:Aspose.Flash.Text.DefineFont2.Add(Aspose.Flash.Text.Kerning)">
      <summary>
            Add a kerning object to the collection of kernings for pairs of glyphs.
            </summary>
      <param name="kerning">
        <see cref="T:Aspose.Flash.Text.Kerning" /> object.</param>
      <example>This example shows you how to use Add(Kerning) method<code>[C#]

DefineFont2 font = new DefineFont2(flash.NewIdentifier(), "Verdana");

font.Small = false;
font.Italic = false;
font.Bold = false;
font.Language = TextLanguage.Latin;
font.Leading = 0;
font.CodeTable = new ArrayList();
font.GlyphShapeTable = new ArrayList();
font.Add(new Kerning(1,10,2));
flash.Add(font);

Rect bounds = new Rect(-40, -40, 1179, 596);
DefineEditText text = new DefineEditText(flash.NewIdentifier(), bounds);
text.FontId = font.FontId;
text.WordWrap = false;
text.Multiline = true;
text.ReadOnly = true;
text.AutoSize = false;
text.NoSelect = false;
text.Bordered = false;
text.HTML = true;
text.UseOutlines = false;
text.FontHeight = 400;
text.TextColorRGB = new RGB(0, 0, 0, 255);
text.Leading = 40;
text.InitialText = "&lt;P ALIGN=\"LEFT\"&gt;&lt;FONT FACE=\"Verdana\" SIZE=\"20\" COLOR=\"#000000\"&gt;Start&lt;/FONT&gt;&lt;/P&gt;";

flash.Add(text);</code><code>[Visual Basic]

Dim font As New DefineFont2(flash.NewIdentifier(), "Verdana")

font.Small = False
font.Italic = False
font.Bold = False
font.Language = TextLanguage.Latin
font.Leading = 0
font.CodeTable = New ArrayList()
font.GlyphShapeTable = New ArrayList()
font.Add(New Kerning(1,10,2))
flash.Add(font)

Dim bounds As New Rect(-40, -40, 1179, 596)
Dim text As New DefineEditText(flash.NewIdentifier(), bounds)
text.FontId = font.FontId
text.WordWrap = False
text.Multiline = True
text.ReadOnly = True
text.AutoSize = False
text.NoSelect = False
text.Bordered = False
text.HTML = True
text.UseOutlines = False
text.FontHeight = 400
text.TextColorRGB = New RGB(0, 0, 0, 255)
text.Leading = 40
text.InitialText = "&lt;P ALIGN=""LEFT""&gt;&lt;FONT FACE=""Verdana"" SIZE=""20"" COLOR=""#000000""&gt;Start&lt;/FONT&gt;&lt;/P&gt;"

flash.Add(text)</code></example>
    </member>
    <member name="P:Aspose.Flash.Text.DefineFont2.FontId">
      <summary>
            Returns or sets the font Id.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Text.DefineFont2.Encoding">
      <summary>
            Returns or sets the font encoding.
            Read/write <see cref="T:Aspose.Flash.Text.TextType" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Text.DefineFont2.Small">
      <summary>
            Determines whether the font is small.
            Read/write <see cref="T:System.Boolean" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Text.DefineFont2.Italic">
      <summary>
            Determines whether the font is italic.
            Read/write <see cref="T:System.Boolean" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Text.DefineFont2.Bold">
      <summary>
            Deteremines whether the font is bold.
            Read/write <see cref="T:System.Boolean" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Text.DefineFont2.Language">
      <summary>
            Returns or sets the language code. Always 0 for SWF 5 and earlier.
            Read/write <see cref="T:Aspose.Flash.Text.TextLanguage" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Text.DefineFont2.FontName">
      <summary>
            Returns or sets the font name.
            Read/write <see cref="T:System.String" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Text.DefineFont2.GlyphShapeTable">
      <summary>
            Returns or sets the collection of shapes which define the outlines of each font glyph.
            Read/write <see cref="T:System.Collections.ArrayList" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Text.DefineFont2.CodeTable">
      <summary>
             Returns or sets the collection which represents the characters code table.
             Collection should be sorted in ascending order. Always UTF-16/UCS-2 for SWF 6 and later.
             Read/write <see cref="T:System.Collections.ArrayList" />.
             </summary>
      <remarks>
             When library is not licensed, this property returns <c>null</c>.
             </remarks>
    </member>
    <member name="P:Aspose.Flash.Text.DefineFont2.Ascent">
      <summary>
            Returns or sets the height of a font ascent.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Text.DefineFont2.Descent">
      <summary>
            Returns or sets the height of a font descent.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Text.DefineFont2.Leading">
      <summary>
            Returns or sets the leading font height.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Text.DefineFont2.FontAdvanceTable">
      <summary>
            Returns or sets the collection which represents
            the advance values for each glyph in dynamic glyph text.
            Read/write <see cref="T:System.Collections.ArrayList" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Text.DefineFont2.FontBoundsTable">
      <summary>
            Returns or sets the collection of bounding rectangles defined
            for each glyph in the font. Used for SWF 7 only.
            Read/write <see cref="T:System.Collections.ArrayList" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Text.DefineFont2.FontKerningTable">
      <summary>
            Returns or sets the collection of kerning records that define
            the spacing between glyph pairs. Used for SWF 7 only.
            Read/write <see cref="T:System.Collections.ArrayList" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Text.DefineFont3">
      <summary>
            The DefineFont3 tag is introduced along with the DefineFontAlignZones tag in SWF 8. The
            DefineFontAlignZones tag is optional but recommended for SWF files using FlashType, and
            it modifies the DefineFont3 tag.
            The DefineFont3 tag extends the functionality of DefineFont2 by expressing the SHAPE
            coordinates in the GlyphShapeTable at 20 times the resolution. All the EMSquare coordinates
            are multiplied by 20 at export, allowing fractional resolution to 1/20 of a unit. This allows for
            more precisely defined glyphs and results in better visual quality.	
            </summary>
      <example>This example shows you how to use DefineFont3 Class<code>[C#]

DefineFont3 font = new DefineFont3(flash.NewIdentifier(), "Verdana");
font.Small = false;
font.Italic = false;
font.Bold = false;
font.Language = TextLanguage.Latin;
font.Leading = 0;
font.CodeTable = new ArrayList();
font.GlyphShapeTable = new ArrayList();
flash.Add(font);</code><code>[Visual Basic]

Dim font As New DefineFont3(flash.NewIdentifier(), "Verdana")
font.Small = False
font.Italic = False
font.Bold = False
font.Language = TextLanguage.Latin
font.Leading = 0
font.CodeTable = New ArrayList()
font.GlyphShapeTable = New ArrayList()
flash.Add(font)</code></example>
    </member>
    <member name="M:Aspose.Flash.Text.DefineFont3.#ctor">
      <summary>
            Default constructor.
            </summary>
      <example>This example shows you how to use DefineFont3 constructor<code>[Visual Basic]

Dim font As New DefineFont3()
font.Id = flash.NewIdentifier()
font.FontName = "Verdana"
font.Small = False
font.Italic = False
font.Bold = False
font.Language = TextLanguage.Latin
font.Leading = 0
font.CodeTable = New ArrayList()
font.GlyphShapeTable = New ArrayList()
flash.Add(font)</code></example>
      <example>This example shows you how to use DefineFont3() constructor<code>[C#]

DefineFont3 font = new DefineFont3();
font.Id = flash.NewIdentifier();
font.FontName = "Verdana";
font.Small = false;
font.Italic = false;
font.Bold = false;
font.Language = TextLanguage.Latin;
font.Leading = 0;
font.CodeTable = new ArrayList();
font.GlyphShapeTable = new ArrayList();
flash.Add(font);</code></example>
    </member>
    <member name="M:Aspose.Flash.Text.DefineFont3.#ctor(System.Int32,System.String)">
      <summary>
            DefineFont3 constructor.
            </summary>
      <param name="id">Font Id</param>
      <param name="name">Font name</param>
      <example>This example shows you how to use DefineFont3(Int32, String) constructor<code>[C#]

DefineFont3 font = new DefineFont3(flash.NewIdentifier(), "Verdana");
font.Small = false;
font.Italic = false;
font.Bold = false;
font.Language = TextLanguage.Latin;
font.Leading = 0;
font.CodeTable = new ArrayList();
font.GlyphShapeTable = new ArrayList();
flash.Add(font);</code><code>[Visual Basic]

Dim font As New DefineFont3(flash.NewIdentifier(), "Verdana")
font.Small = False
font.Italic = False
font.Bold = False
font.Language = TextLanguage.Latin
font.Leading = 0
font.CodeTable = New ArrayList()
font.GlyphShapeTable = New ArrayList()
flash.Add(font)</code></example>
    </member>
    <member name="P:Aspose.Flash.Text.DefineFont3.FontId">
      <summary>
            Returns or sets the font Id.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Text.DefineFont3.Encoding">
      <summary>
            Returns or sets the font encoding.
            Read/write <see cref="T:Aspose.Flash.Text.TextType" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Text.DefineFont3.Small">
      <summary>
            Determines whether the font is small.
            Read/write <see cref="T:System.Boolean" />.
            </summary>
      <remarks>
            In SWF 7 and later font is always small.
            Character glyphs are aligned on pixel boundaries
            for dynamic and input text.
            </remarks>
    </member>
    <member name="P:Aspose.Flash.Text.DefineFont3.Italic">
      <summary>
            Determines whether the font is italic.
            Read/write <see cref="T:System.Boolean" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Text.DefineFont3.Bold">
      <summary>
            Deteremines whether the font is bold.
            Read/write <see cref="T:System.Boolean" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Text.DefineFont3.Language">
      <summary>
            Returns or sets the language code. Always 0 for SWF 5 and earlier.
            Read/write <see cref="T:Aspose.Flash.Text.TextLanguage" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Text.DefineFont3.FontName">
      <summary>
            Returns or sets the font name.
            Read/write <see cref="T:System.String" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Text.DefineFont3.GlyphShapeTable">
      <summary>
            Returns or sets the collection of shapes which define the outlines of each font glyph.
            Read/write <see cref="T:System.Collections.ArrayList" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Text.DefineFont3.CodeTable">
      <summary>
             Returns or sets the collection which represents the characters code table.
             Collection should be sorted in ascending order. Always UTF-16/UCS-2 for SWF 6 and later.
             Read/write <see cref="T:System.Collections.ArrayList" />.
             </summary>
      <remarks>
             When library is not licensed, this property returns <c>null</c>.
             </remarks>
    </member>
    <member name="P:Aspose.Flash.Text.DefineFont3.Ascent">
      <summary>
            Returns or sets the height of a font ascent.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Text.DefineFont3.Descent">
      <summary>
            Returns or sets the height of a font descent.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Text.DefineFont3.Leading">
      <summary>
            Returns or sets the leading font height.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Text.DefineFont3.FontAdvanceTable">
      <summary>
            Returns or sets the collection which represents
            the advance values for each glyph in dynamic glyph text.
            Read/write <see cref="T:System.Collections.ArrayList" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Text.DefineFont3.FontBoundsTable">
      <summary>
            Returns or sets the collection of bounding rectangles defined
            for each glyph in the font. Used for SWF 7 only.
            Read/write <see cref="T:System.Collections.ArrayList" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Text.DefineFont3.FontKerningTable">
      <summary>
            Returns or sets the collection of kerning records that define
            the spacing between glyph pairs. Used for SWF 7 only.
            Read/write <see cref="T:System.Collections.ArrayList" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Text.DefineFontAlignZones">
      <summary>
            The DefineFont3 tag can be modified by a DefineFontAlignZones tag. FlashType uses
            alignment zones to establish the borders of a glyph for pixel snapping. Alignment zones are
            critical for high-quality display of fonts.
            </summary>
      <example>This example shows you how to use DefineFontAlignZones Class<code>[C#]

//define zoneRecord object
ZoneRecord zoneRecord = new ZoneRecord();
//create zone data array list
ArrayList zoneData = new ArrayList();
//add zone data objects in array list
zoneData.Add(new ZoneData());
zoneData.Add(new ZoneData());
//assign zone data collection to zone record object
zoneRecord.ZoneData = zoneData;
//create an array list of zone records
ArrayList zoneRecords = new ArrayList();
//create a new object of DefineFontAlignZones
DefineFontAlignZones zones = new DefineFontAlignZones();
//assign zone record collection to align zones object
zones.ZoneTable = zoneRecord;</code><code>[Visual Basic]

'define zoneRecord object
Dim zoneRecord As New ZoneRecord()
'create zone data array list
Dim zoneData As New ArrayList()
'add zone data objects in array list
zoneData.Add(New ZoneData())
zoneData.Add(New ZoneData())
'assign zone data collection to zone record object
zoneRecord.ZoneData = zoneData
'create an array list of zone records
Dim zoneRecords As New ArrayList()
'create a new object of DefineFontAlignZones
Dim zones As New DefineFontAlignZones()
'assign zone record collection to align zones object
zones.ZoneTable = zoneRecord</code></example>
    </member>
    <member name="M:Aspose.Flash.Text.DefineFontAlignZones.#ctor">
      <summary>
            Default constructor.
            </summary>
      <example>This example shows you how to use DefineFontAlignZones constructor<code>[C#]

//define zoneRecord object
ZoneRecord zoneRecord = new ZoneRecord();
//create zone data array list
ArrayList zoneData = new ArrayList();
//add zone data objects in array list
zoneData.Add(new ZoneData());
zoneData.Add(new ZoneData());
//assign zone data collection to zone record object
zoneRecord.ZoneData = zoneData;
//create an array list of zone records
ArrayList zoneRecords = new ArrayList();
//create a new object of DefineFontAlignZones
DefineFontAlignZones zones = new DefineFontAlignZones();
//assign zone record collection to align zones object
zones.ZoneTable = zoneRecord;</code><code>[Visual Basic]

'define zoneRecord object
Dim zoneRecord As New ZoneRecord()
'create zone data array list
Dim zoneData As New ArrayList()
'add zone data objects in array list
zoneData.Add(New ZoneData())
zoneData.Add(New ZoneData())
'assign zone data collection to zone record object
zoneRecord.ZoneData = zoneData
'create an array list of zone records
Dim zoneRecords As New ArrayList()
'create a new object of DefineFontAlignZones
Dim zones As New DefineFontAlignZones()
'assign zone record collection to align zones object
zones.ZoneTable = zoneRecord</code></example>
    </member>
    <member name="P:Aspose.Flash.Text.DefineFontAlignZones.FontId">
      <summary>
            Returns or sets the Id of a font specified by DefineFont3.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Text.DefineFontAlignZones.CSMTableHint">
      <summary>
            Returns or sets the thickness hint of a font.
            Read/write <see cref="T:Aspose.Flash.Text.CSMTableHintType" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Text.DefineFontAlignZones.ZoneTable">
      <summary>
            Returns or sets the alignment zone information for each glyph.
            Read/write <see cref="T:System.Collections.ArrayList" /> with <see cref="T:Aspose.Flash.Text.ZoneRecord" /> objects.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Text.DefineFontInfo">
      <summary>
            Used for mapping from a glyph font (defined with DefineFont) to a device font.
            Provides a font name and style to pass to the playback platform’s text engine,
            and a table of character codes that identifies the character represented by
            each glyph in the corresponding DefineFont class, allowing the glyph indices
            of a DefineText tag to be converted to character strings.
            </summary>
      <example>This example shows you how to use DefineFontInfo Class<code>[C#]

DefineFontInfo font = new DefineFontInfo(flash.NewIdentifier(),"Verdana");
font.Italic = false;
font.Bold = false;
font.Small = false;
flash.Add(font);</code><code>[Visual Basic]

Dim font As New DefineFontInfo(flash.NewIdentifier(),"Verdana")
font.Italic = False
font.Bold = False
font.Small = False
flash.Add(font)</code></example>
    </member>
    <member name="M:Aspose.Flash.Text.DefineFontInfo.#ctor(System.Int32,System.String)">
      <summary>
            DefineFontInfo constructor.
            </summary>
      <param name="id">Font info Id.</param>
      <param name="name">Font name.</param>
      <example>This example shows you how to use DefineFontInfo constructor<code>[C#]

DefineFontInfo font = new DefineFontInfo(flash.NewIdentifier(),"Verdana");
font.Italic = false;
font.Bold = false;
font.Small = false;
flash.Add(font);</code><code>[Visual Basic]

Dim font As New DefineFontInfo(flash.NewIdentifier(),"Verdana")
font.Italic = False
font.Bold = False
font.Small = False
flash.Add(font)</code></example>
      <example>This example shows you how to use DefineFontInfo2 constructor<code>[C#]

//create DefineFontInfo object
DefineFontInfo2 font = new DefineFontInfo2(flash.NewIdentifier(),"Verdana");
//set basic properties
font.Italic = false;
font.Bold = false;
font.Small = false;
//assign value to the language property
font.Language = TextLanguage.Latin;
flash.Add(font);</code></example>
    </member>
    <member name="P:Aspose.Flash.Text.DefineFontInfo.FontId">
      <summary>
            Returns or sets the font Id.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Text.DefineFontInfo.FontName">
      <summary>
            Returns or sets the font name.
            Read/write <see cref="T:System.String" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Text.DefineFontInfo.Encoding">
      <summary>
            Returns or sets the font encoding.
            Read/write <see cref="T:Aspose.Flash.Text.TextType" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Text.DefineFontInfo.Small">
      <summary>
            Determines whether the font is small.
            Read/write <see cref="T:System.Boolean" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Text.DefineFontInfo.Italic">
      <summary>
            Determines whether the font is italic.
            Read/write <see cref="T:System.Boolean" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Text.DefineFontInfo.Bold">
      <summary>
            Deteremines whether the font is bold.
            Read/write <see cref="T:System.Boolean" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Text.DefineFontInfo.CodeTable">
      <summary>
            Returns or sets the glyph to code table sorted in ascending order.
            Read/write <see cref="T:System.Collections.ArrayList" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Text.DefineFontInfo2">
      <summary>
            Used for mapping from a glyph font (defined with DefineFont) to a device font.
            It's better to use DefineFontInfo2 class in SWF 6 and later rather than DefineFontInfo.
            DefineFontInfo2 is identical to DefineFontInfo, except Language property.
            </summary>
      <example>This example shows you how to use DefineFontInfo2 Class<code>[C#]

//create DefineFontInfo object
DefineFontInfo2 font = new DefineFontInfo2(flash.NewIdentifier(),"Verdana");
//set basic properties
font.Italic = false;
font.Bold = false;
font.Small = false;
//assign value to the language property
font.Language = TextLanguage.Latin;
flash.Add(font);</code><code>[Visual Basic]

'create DefineFontInfo object
Dim font As New DefineFontInfo2(flash.NewIdentifier(),"Verdana")
'set basic properties
font.Italic = False
font.Bold = False
font.Small = False
'assign value to the language property
font.Language = TextLanguage.Latin
flash.Add(font)</code></example>
    </member>
    <member name="M:Aspose.Flash.Text.DefineFontInfo2.#ctor(System.Int32,System.String)">
      <summary>DefineFotInfo2 constructor.</summary>
      <param name="id">Font info Id.</param>
      <param name="name">Font name.</param>
      <example>This example shows you how to use DefineFontInfo2 constructor<code>[Visual Basic]

'create DefineFontInfo object
Dim font As New DefineFontInfo2(flash.NewIdentifier(),"Verdana")
'set basic properties
font.Italic = False
font.Bold = False
font.Small = False
'assign value to the language property
font.Language = TextLanguage.Latin
flash.Add(font)</code></example>
    </member>
    <member name="P:Aspose.Flash.Text.DefineFontInfo2.FontId">
      <summary>
            Returns or sets the font Id.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Text.DefineFontInfo2.FontName">
      <summary>
            Returns or sets the font name.
            Read/write <see cref="T:System.String" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Text.DefineFontInfo2.Encoding">
      <summary>
            Returns or sets the font encoding.
            Read/write <see cref="T:Aspose.Flash.Text.TextType" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Text.DefineFontInfo2.Small">
      <summary>
            Determines whether the font is small.
            Read/write <see cref="T:System.Boolean" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Text.DefineFontInfo2.Italic">
      <summary>
            Determines whether the font is italic.
            Read/write <see cref="T:System.Boolean" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Text.DefineFontInfo2.FontFlagsBold">
      <summary>
            Deteremines whether the font is bold.
            Read/write <see cref="T:System.Boolean" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Text.DefineFontInfo2.Language">
      <summary>
            Returns or sets the language code. Always 0 for SWF 5 and earlier.
            Read/write <see cref="T:Aspose.Flash.Text.TextLanguage" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Text.DefineFontInfo2.CodeTable">
      <summary>
            Returns or sets the glyph to code table in UTF-16/UCS-2 sorted in ascending order.
            Read/write <see cref="T:System.Collections.ArrayList" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Text.DefineFontName">
      <summary>
            The DefineFontName tag contains the name and copyright information for a font embedded
            in the SWF file.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Text.DefineFontName.#ctor(System.Int32,System.String,System.String)">
      <summary>
            DefineFontName constructor.
            </summary>
      <param name="id">Font id.</param>
      <param name="name">Font name.</param>
      <param name="copyright">Copyright string.</param>
    </member>
    <member name="P:Aspose.Flash.Text.DefineFontName.FontId">
      <summary>
            Returns or sets the font Id.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Text.DefineFontName.FontName">
      <summary>
            Returns or sets the font name.
            Read/write <see cref="T:System.String" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Text.DefineFontName.FontCopyright">
      <summary>
            Returns or sets the font copyright.
            Read/write <see cref="T:System.String" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Text.DefineText">
      <summary>
            Represents the block of static text. It describes the font, size, color,
            and exact position of every character in the text object.
            </summary>
      <example>This example shows you how to use DefineText Class<code>[C#]

//define bounds rectangle
Rect bounds = new Rect(-40, -40, 1179, 596);
//define MatrixTransform
MatrixTransform mt = new MatrixTransform();
mt.Scale(50,50);
//define Glyph Entries
ArrayList glyphEntries = new ArrayList();
glyphEntries.Add(new GlyphEntry(1,1));
//define a collection of TextRecords
ArrayList textRecords = new ArrayList();
TextRecord tr = new TextRecord(1,10,glyphEntries);
textRecords.Add(tr);
//define text object
DefineText text = new DefineText(flash.NewIdentifier(), bounds, mt,textRecords);
//add text object to flash container
flash.Add(text);</code><code>[Visual Basic]

'define bounds rectangle
Dim bounds As New Rect(-40, -40, 1179, 596)
'define MatrixTransform
Dim mt As New MatrixTransform()
mt.Scale(50,50)
'define Glyph Entries
Dim glyphEntries As New ArrayList()
glyphEntries.Add(New GlyphEntry(1,1))
'define a collection of TextRecords
Dim textRecords As New ArrayList()
Dim tr As New TextRecord(1,10,glyphEntries)
textRecords.Add(tr)
'define text object
Dim text As New DefineText(flash.NewIdentifier(), bounds, mt,textRecords)
'add text object to flash container
flash.Add(text)</code></example>
    </member>
    <member name="M:Aspose.Flash.Text.DefineText.#ctor(System.Int32,Aspose.Flash.Basic.Rect,Aspose.Flash.Basic.MatrixTransform,System.Collections.ArrayList)">
      <summary>
            DefineText constructor.
            </summary>
      <param name="id">Text object Id.</param>
      <param name="bounds">Bounding rectangle which encloses the text.</param>
      <param name="transform">Transformation matrix for the text.</param>
      <param name="array">Collection of <see cref="T:Aspose.Flash.Text.TextRecord" /> objects.</param>
      <example>This example shows you how to use DefineText constructor<code>[C#]

//define bounds rectangle
Rect bounds = new Rect(-40, -40, 1179, 596);
//define MatrixTransform
MatrixTransform mt = new MatrixTransform();
mt.Scale(50,50);
//define Glyph Entries
ArrayList glyphEntries = new ArrayList();
glyphEntries.Add(new GlyphEntry(1,1));
//define a collection of TextRecords
ArrayList textRecords = new ArrayList();
TextRecord tr = new TextRecord(1,10,glyphEntries);
textRecords.Add(tr);
//define text object
DefineText text = new DefineText(flash.NewIdentifier(), bounds, mt,textRecords);
//add text object to flash container
flash.Add(text);</code><code>[Visual Basic]

'define bounds rectangle
Dim bounds As New Rect(-40, -40, 1179, 596)
'define MatrixTransform
Dim mt As New MatrixTransform()
mt.Scale(50,50)
'define Glyph Entries
Dim glyphEntries As New ArrayList()
glyphEntries.Add(New GlyphEntry(1,1))
'define a collection of TextRecords
Dim textRecords As New ArrayList()
Dim tr As New TextRecord(1,10,glyphEntries)
textRecords.Add(tr)
'define text object
Dim text As New DefineText(flash.NewIdentifier(), bounds, mt,textRecords)
'add text object to flash container
flash.Add(text)</code></example>
    </member>
    <member name="M:Aspose.Flash.Text.DefineText.Add(Aspose.Flash.Text.TextRecord)">
      <summary>
            Add a TextRecord object to the collection.
            </summary>
      <param name="text">
        <see cref="T:Aspose.Flash.Text.TextRecord" /> object.</param>
      <example>This example shows you how to use Add(TextRecord) method<code>[C#]

//define bounds rectangle
Rect bounds = new Rect(-40, -40, 1179, 596);
//define MatrixTransform
MatrixTransform mt = new MatrixTransform();
mt.Scale(50,50);
//define Glyph Entries
ArrayList glyphEntries = new ArrayList();
glyphEntries.Add(new GlyphEntry(1,1));
//define a collection of TextRecords
ArrayList textRecords = new ArrayList();
TextRecord tr = new TextRecord(1,10,glyphEntries);
textRecords.Add(tr);
//define text object
DefineText text = new DefineText(flash.NewIdentifier(), bounds, mt,textRecords);
//add another text record in the DefineText object
//define Glyph Entries
ArrayList glyphEntries = new ArrayList();
glyphEntries.Add(new GlyphEntry(2,1));
//define a collection of TextRecords
ArrayList textRecords = new ArrayList();
TextRecord tr2 = new TextRecord(1, 10, glyphEntries);
//add text record to text object
text.Add(tr2);
//add text object to flash container
flash.Add(text);</code><code>[Visual Basic]

'define bounds rectangle
Dim bounds As New Rect(-40, -40, 1179, 596)
'define MatrixTransform
Dim mt As New MatrixTransform()
mt.Scale(50,50)
'define Glyph Entries
Dim glyphEntries As New ArrayList()
glyphEntries.Add(New GlyphEntry(1,1))
'define a collection of TextRecords
Dim textRecords As New ArrayList()
Dim tr As New TextRecord(1,10,glyphEntries)
textRecords.Add(tr)
'define text object
Dim text As New DefineText(flash.NewIdentifier(), bounds, mt,textRecords)
'add another text record in the DefineText object
'define Glyph Entries
Dim glyphEntries As New ArrayList()
glyphEntries.Add(New GlyphEntry(2,1))
'define a collection of TextRecords
Dim textRecords As New ArrayList()
Dim tr2 As New TextRecord(1, 10, glyphEntries)
'add text record to text object
text.Add(tr2)
'add text object to flash container
flash.Add(text)</code></example>
    </member>
    <member name="P:Aspose.Flash.Text.DefineText.ObjectId">
      <summary>
            Returns or sets the Id of a text object.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Text.DefineText.TextBounds">
      <summary>
            Returns or sets the rectangle which encloses the text.
            Read/write <see cref="T:Aspose.Flash.Basic.Rect" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Text.DefineText.MatrixTransform">
      <summary>
            Returns or sets the transformation matrix for the text.
            Read/write <see cref="P:Aspose.Flash.Text.DefineText.MatrixTransform" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Text.DefineText.TextRecords">
      <summary>
            Returns or sets the collection of <see cref="T:Aspose.Flash.Text.TextRecord" /> objects.
            Read/write <see cref="T:System.Collections.ArrayList" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Text.DefineText2">
      <summary>
            Represents the block of static text. Extends DefineText class by using transparent
            color (alpha channel) to define TextColor. This allows partially or completely
            transparent characters.
            </summary>
      <remarks>
            Text defined with DefineText2 is always rendered with glyphs.
            Device text can't include transparency.
            </remarks>
      <example>This example shows you how to use DefineText2 Class<code>[C#]

//define bounds rectangle
Rect bounds = new Rect(-40, -40, 1179, 596);
//define MatrixTransform
MatrixTransform mt = new MatrixTransform();
mt.Scale(50,50);
//define Glyph Entries
ArrayList glyphEntries = new ArrayList();
glyphEntries.Add(new GlyphEntry(1,1));
//define a collection of TextRecords
ArrayList textRecords = new ArrayList();
TextRecord tr = new TextRecord(1,10,glyphEntries);
textRecords.Add(tr);
//define text object
DefineText2 text = new DefineText2(flash.NewIdentifier(), bounds, mt,textRecords);
//add text object to flash container
flash.Add(text);</code><code>[Visual Basic]

'define bounds rectangle
Dim bounds As New Rect(-40, -40, 1179, 596)
'define MatrixTransform
Dim mt As New MatrixTransform()
mt.Scale(50,50)
'define Glyph Entries
Dim glyphEntries As New ArrayList()
glyphEntries.Add(New GlyphEntry(1,1))
'define a collection of TextRecords
Dim textRecords As New ArrayList()
Dim tr As New TextRecord(1,10,glyphEntries)
textRecords.Add(tr)
'define text object
Dim text As New DefineText2(flash.NewIdentifier(), bounds, mt,textRecords)
'add text object to flash container
flash.Add(text)</code></example>
    </member>
    <member name="M:Aspose.Flash.Text.DefineText2.#ctor(System.Int32,Aspose.Flash.Basic.Rect,Aspose.Flash.Basic.MatrixTransform,System.Collections.ArrayList)">
      <summary>
            DefineText2 constructor.
            </summary>
      <param name="id">Text object Id.</param>
      <param name="bounds">Bounding rectangle which encloses the text.</param>
      <param name="transform">Transformation matrix for the text.</param>
      <param name="textRecordArray">Collection of <see cref="T:Aspose.Flash.Text.TextRecord" /> objects.</param>
      <example>This example shows you how to use DefineText2 constructor<code>[C#]

//define bounds rectangle
Rect bounds = new Rect(-40, -40, 1179, 596);
//define MatrixTransform
MatrixTransform mt = new MatrixTransform();
mt.Scale(50,50);
//define Glyph Entries
ArrayList glyphEntries = new ArrayList();
glyphEntries.Add(new GlyphEntry(1,1));
//define a collection of TextRecords
ArrayList textRecords = new ArrayList();
TextRecord tr = new TextRecord(1,10,glyphEntries);
textRecords.Add(tr);
//define text object
DefineText2 text = new DefineText2(flash.NewIdentifier(), bounds, mt,textRecords);
//add text object to flash container
flash.Add(text);</code><code>[Visual Basic]

'define bounds rectangle
Dim bounds As New Rect(-40, -40, 1179, 596)
'define MatrixTransform
Dim mt As New MatrixTransform()
mt.Scale(50,50)
'define Glyph Entries
Dim glyphEntries As New ArrayList()
glyphEntries.Add(New GlyphEntry(1,1))
'define a collection of TextRecords
Dim textRecords As New ArrayList()
Dim tr As New TextRecord(1,10,glyphEntries)
textRecords.Add(tr)
'define text object
Dim text As New DefineText2(flash.NewIdentifier(), bounds, mt,textRecords)
'add text object to flash container
flash.Add(text)</code></example>
    </member>
    <member name="M:Aspose.Flash.Text.DefineText2.Add(Aspose.Flash.Text.TextRecord)">
      <summary>
            Add a TextRecord object to the collection.
            </summary>
      <param name="text">
        <see cref="T:Aspose.Flash.Text.TextRecord" /> object.</param>
      <example>This example shows you how to use DefineText2.Add(TextRecord) method<code>[C#]

//define bounds rectangle
Rect bounds = new Rect(-40, -40, 1179, 596);
//define MatrixTransform
MatrixTransform mt = new MatrixTransform();
mt.Scale(50,50);
//define Glyph Entries
ArrayList glyphEntries = new ArrayList();
glyphEntries.Add(new GlyphEntry(1,1));
//define a collection of TextRecords
ArrayList textRecords = new ArrayList();
TextRecord tr = new TextRecord(1,10,glyphEntries);
textRecords.Add(tr);
//define text object
DefineText2 text = new DefineText2(flash.NewIdentifier(), bounds, mt,textRecords);
//add another text record in the DefineText object
//define Glyph Entries
ArrayList glyphEntries = new ArrayList();
glyphEntries.Add(new GlyphEntry(2,1));
//define a collection of TextRecords
ArrayList textRecords = new ArrayList();
TextRecord tr2 = new TextRecord(1, 10, glyphEntries);
//add text record to text object
text.Add(tr2);
//add text object to flash container
flash.Add(text);</code><code>[Visual Basic]

'define bounds rectangle
Dim bounds As New Rect(-40, -40, 1179, 596)
'define MatrixTransform
Dim mt As New MatrixTransform()
mt.Scale(50,50)
'define Glyph Entries
Dim glyphEntries As New ArrayList()
glyphEntries.Add(New GlyphEntry(1,1))
'define a collection of TextRecords
Dim textRecords As New ArrayList()
Dim tr As New TextRecord(1,10,glyphEntries)
textRecords.Add(tr)
'define text object
Dim text As New DefineText2(flash.NewIdentifier(), bounds, mt,textRecords)
'add another text record in the DefineText object
'define Glyph Entries
Dim glyphEntries As New ArrayList()
glyphEntries.Add(New GlyphEntry(2,1))
'define a collection of TextRecords
Dim textRecords As New ArrayList()
Dim tr2 As New TextRecord(1, 10, glyphEntries)
'add text record to text object
text.Add(tr2)
'add text object to flash container
flash.Add(text)</code></example>
    </member>
    <member name="P:Aspose.Flash.Text.DefineText2.ObjectId">
      <summary>
            Returns or sets the Id of a text object.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Text.DefineText2.TextBounds">
      <summary>
            Returns or sets the rectangle which encloses the text.
            Read/write <see cref="T:Aspose.Flash.Basic.Rect" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Text.DefineText2.TextMatrix">
      <summary>
            Returns or sets the transformation matrix for the text.
            Read/write <see cref="T:Aspose.Flash.Basic.MatrixTransform" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Text.DefineText2.TextRecords">
      <summary>
            Returns or sets the collection of <see cref="T:Aspose.Flash.Text.TextRecord" /> objects.
            Read/write <see cref="T:System.Collections.ArrayList" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Text.FontManager">
      <summary>
            This class provides functionality for different font related operations.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Text.FontManager.ConvertTrueTypeFontToSWFFont(System.IO.Stream)">
      <summary>
            Converts given TrueType font into <see cref="T:Aspose.Flash.Text.DefineFont3" /> object 
            which represents a font used in swf.
            </summary>
      <param name="fontStream">The stream that contains font data.</param>
      <returns>
        <see cref="T:Aspose.Flash.Text.DefineFont3" /> object representing the converted font.
            </returns>
      <remarks>
            Returned font will be optimized for the default font height, which is set to 400 twips,
            this behavior can be controlled using an overload of this member.
            When library is unlicensed resulting font is limited to 10 glyphs.
            </remarks>
      <exception cref="T:System.ArgumentNullException">If <paramref name="fontStream" /> is null.</exception>
    </member>
    <member name="M:Aspose.Flash.Text.FontManager.ConvertTrueTypeFontToSWFFont(System.IO.Stream,System.Int32)">
      <summary>
            Converts given TrueType font into <see cref="T:Aspose.Flash.Text.DefineFont3" /> object 
            which represents a font used in swf.
            </summary>
      <param name="fontStream">The stream that contains font data.</param>
      <param name="fontHeightInTwips"> Height of the font in twips, resulting font will be optimized according to this parameter.</param>
      <returns>
        <see cref="T:Aspose.Flash.Text.DefineFont3" /> object representing the converted font.
            </returns>
      <exception cref="T:System.ArgumentNullException">If <paramref name="fontStream" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="fontHeightInTwips" /> is less than 0.</exception>
      <remarks>When library is unlicensed resulting font is limited to 10 glyphs.</remarks>
    </member>
    <member name="T:Aspose.Flash.Text.GlyphEntry">
      <summary>
            Represents a single character in a line of text. It is composed of an index
            into the current font’s glyph table, and an advance value. The advance value
            is the horizontal distance between the reference point of this character and
            the reference point of the following character.
            </summary>
      <example>This example shows you how to use GlyphEntry Class<code>[C#]

//define bounds rectangle
Rect bounds = new Rect(-40, -40, 1179, 596);
//define MatrixTransform
MatrixTransform mt = new MatrixTransform();
mt.Scale(50,50);
//define Glyph Entries
ArrayList glyphEntries = new ArrayList();
glyphEntries.Add(new GlyphEntry(1,1));
//define a collection of TextRecords
ArrayList textRecords = new ArrayList();
TextRecord tr = new TextRecord(1,10,glyphEntries);
textRecords.Add(tr);
//define text object
DefineText text = new DefineText(flash.NewIdentifier(), bounds, mt,textRecords);
//add another text record in the DefineText object
//define Glyph Entries
ArrayList glyphEntries = new ArrayList();
glyphEntries.Add(new GlyphEntry(2,1));
//define a collection of TextRecords
ArrayList textRecords = new ArrayList();
TextRecord tr2 = new TextRecord(1, 10, glyphEntries);
//add text record to text object
text.Add(tr2);
//add text object to flash container
flash.Add(text);</code><code>[Visual Basic]

'define bounds rectangle
Dim bounds As New Rect(-40, -40, 1179, 596)
'define MatrixTransform
Dim mt As New MatrixTransform()
mt.Scale(50,50)
'define Glyph Entries
Dim glyphEntries As New ArrayList()
glyphEntries.Add(New GlyphEntry(1,1))
'define a collection of TextRecords
Dim textRecords As New ArrayList()
Dim tr As New TextRecord(1,10,glyphEntries)
textRecords.Add(tr)
'define text object
Dim text As New DefineText(flash.NewIdentifier(), bounds, mt,textRecords)
'add another text record in the DefineText object
'define Glyph Entries
Dim glyphEntries As New ArrayList()
glyphEntries.Add(New GlyphEntry(2,1))
'define a collection of TextRecords
Dim textRecords As New ArrayList()
Dim tr2 As New TextRecord(1, 10, glyphEntries)
'add text record to text object
text.Add(tr2)
'add text object to flash container
flash.Add(text)</code></example>
    </member>
    <member name="M:Aspose.Flash.Text.GlyphEntry.#ctor(System.Int32,System.Int32)">
      <summary>
            GlyphEntry constructor.
            </summary>
      <param name="glyphIndex">Glyph index.</param>
      <param name="advance">Advance value for the glyph.</param>
      <example>This example shows you how to use GlyphEntry constructor<code>[C#]

//define bounds rectangle
Rect bounds = new Rect(-40, -40, 1179, 596);
//define MatrixTransform
MatrixTransform mt = new MatrixTransform();
mt.Scale(50,50);
//define Glyph Entries
ArrayList glyphEntries = new ArrayList();
glyphEntries.Add(new GlyphEntry(1,1));
//define a collection of TextRecords
ArrayList textRecords = new ArrayList();
TextRecord tr = new TextRecord(1,10,glyphEntries);
textRecords.Add(tr);
//define text object
DefineText text = new DefineText(flash.NewIdentifier(), bounds, mt,textRecords);
//add another text record in the DefineText object
//define Glyph Entries
ArrayList glyphEntries = new ArrayList();
glyphEntries.Add(new GlyphEntry(2,1));
//define a collection of TextRecords
ArrayList textRecords = new ArrayList();
TextRecord tr2 = new TextRecord(1, 10, glyphEntries);
//add text record to text object
text.Add(tr2);
//add text object to flash container
flash.Add(text);</code><code>[Visual Basic]

'define bounds rectangle
Dim bounds As New Rect(-40, -40, 1179, 596)
'define MatrixTransform
Dim mt As New MatrixTransform()
mt.Scale(50,50)
'define Glyph Entries
Dim glyphEntries As New ArrayList()
glyphEntries.Add(New GlyphEntry(1,1))
'define a collection of TextRecords
Dim textRecords As New ArrayList()
Dim tr As New TextRecord(1,10,glyphEntries)
textRecords.Add(tr)
'define text object
Dim text As New DefineText(flash.NewIdentifier(), bounds, mt,textRecords)
'add another text record in the DefineText object
'define Glyph Entries
Dim glyphEntries As New ArrayList()
glyphEntries.Add(New GlyphEntry(2,1))
'define a collection of TextRecords
Dim textRecords As New ArrayList()
Dim tr2 As New TextRecord(1, 10, glyphEntries)
'add text record to text object
text.Add(tr2)
'add text object to flash container
flash.Add(text)</code></example>
    </member>
    <member name="P:Aspose.Flash.Text.GlyphEntry.GlyphIndex">
      <summary>
            Returns or sets the glyph index in the current font.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Text.GlyphEntry.GlyphAdvance">
      <summary>
            Returns or sets the advance value for the glyph.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Text.GridFitType">
      <summary>
            Represents different types of grid fitting.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Text.GridFitType.DontUse">
      <summary>
            Do not use grid fitting. AlignmentZones and LCD sub-pixel information will not be used.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Text.GridFitType.Pixel">
      <summary>
            Pixel grid fit. Only supported for left-aligned dynamic text. This setting provides the ultimate in
            FlashType readability, with crisp letters aligned to pixels.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Text.GridFitType.SubPixel">
      <summary>
            Sub-pixel grid fit. Align letters to the 1/3 pixel used by LCD monitors. 
            Can also improve quality for CRT output.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Text.Kerning">
      <summary>
            Represents the spacing between a pair of glyphs.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Text.Kerning.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>
            Kerning constructor.
            </summary>
      <param name="leftIndex">Left glyph index.</param>
      <param name="rightIndex">Right glyph index.</param>
      <param name="adjust">Adjustment value.</param>
    </member>
    <member name="P:Aspose.Flash.Text.Kerning.LeftGlyphIndex">
      <summary>
            Returns or sets the left glyph in the kerning pair.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Text.Kerning.RightGlyphIndex">
      <summary>
            Returns or sets the right glyph in the kerning pair.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Text.Kerning.Adjustment">
      <summary>
            Returns or sets the adjustment in twips that will be added
            to the advance defined for the left glyph.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Text.TextAlignment">
      <summary>
            Represents alignment of a text.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Text.TextAlignment.Left">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Flash.Text.TextAlignment.Right">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Flash.Text.TextAlignment.Center">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Flash.Text.TextAlignment.Justify">
      <summary>
      </summary>
    </member>
    <member name="T:Aspose.Flash.Text.TextLanguage">
      <summary>
            Represents the language of a text.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Text.TextLanguage.Latin">
      <summary>
            Latin fonts.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Text.TextLanguage.Japanese">
      <summary>
            Japanese fonts.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Text.TextLanguage.Korean">
      <summary>
            Korean fonts.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Text.TextLanguage.SimplifiedChinese">
      <summary>
            Simplified Chinese fonts.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Text.TextLanguage.TraditionalChinese">
      <summary>
            Traditional Chinese fonts.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Text.TextManager">
      <summary>
            Used to help with creation of font and text.
            The class supports only existing fonts in a Flash file.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Text.TextManager.#ctor(System.Int32,System.String)">
      <summary>
            TextManager constructor.
            </summary>
      <param name="id">a unique identifier forthe font definition</param>
      <param name="fontName">the font name of a Flash, TrueType or
            OpenType file containing font definition.</param>
    </member>
    <member name="M:Aspose.Flash.Text.TextManager.CanDisplay(System.String)">
      <summary>
            Check wich simbols from Unicode string can be displayed.
            </summary>
      <param name="aString">Unicode string to check.</param>
      <returns>
            The index of the first character which can't be displayed or
            -1 if all characters can be displayed.
            </returns>
    </member>
    <member name="M:Aspose.Flash.Text.TextManager.CreateShape(System.Drawing.Drawing2D.GraphicsPath,System.Collections.ArrayList,System.Collections.ArrayList,System.Single)">
      <summary>
            Creates shape object from GraphicsPath and styles.
            </summary>
      <param name="path">
      </param>
      <param name="lineStyles">
      </param>
      <param name="fillStyles">
      </param>
      <param name="scale">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.Flash.Text.TextManager.CreateFont(System.Int32,System.String,System.Int32,System.Drawing.Color,System.Collections.ArrayList,System.Collections.ArrayList)">
      <summary>
            Creates font object by font name and styles.
            </summary>
      <param name="id">
      </param>
      <param name="fname">
      </param>
      <param name="fsize">
      </param>
      <param name="color">
      </param>
      <param name="fillStyle">
      </param>
      <param name="lineStyle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.Flash.Text.TextManager.CreateFont">
      <summary>
            Create DefineFont2 object containing a complete definition of the font.
            </summary>
      <returns>
        <see cref="T:Aspose.Flash.Text.DefineFont2" /> object.</returns>
    </member>
    <member name="M:Aspose.Flash.Text.TextManager.CreateText(System.Int32,System.String,System.Int32,Aspose.Flash.Basic.RGB)">
      <summary>
            Create DefineText2 object with the specified font size and text color.
            </summary>
      <param name="id">Unique object Id.</param>
      <param name="text">Text string to display.</param>
      <param name="fontSize">Font size.</param>
      <param name="color">Text color with transparency.</param>
      <returns>
        <see cref="T:Aspose.Flash.Text.DefineText2" /> object.</returns>
    </member>
    <member name="M:Aspose.Flash.Text.TextManager.DefineTextBlock(System.Int32,System.Collections.ArrayList,System.Int32,Aspose.Flash.Basic.RGB,System.Int32)">
      <summary>
            Create DefineText2 object  with multiline text.
            </summary>
      <param name="id">Unique object Id.</param>
      <param name="lines">Collection of lines of text.</param>
      <param name="fontSize">Font size.</param>
      <param name="ñolor">Text color with transparency.</param>
      <param name="lineSpacing">Distance between lines.</param>
      <returns>
        <see cref="T:Aspose.Flash.Text.DefineText2" /> object.</returns>
    </member>
    <member name="M:Aspose.Flash.Text.TextManager.CreateTextBounds(System.String,System.Int32)">
      <summary>
            Create a bounding rectangle for the text.
            </summary>
      <param name="text">the string.</param>
      <param name="fontSize">the font size in twips.</param>
      <returns>
        <see cref="T:Aspose.Flash.Basic.Rect" /> object.</returns>
    </member>
    <member name="M:Aspose.Flash.Text.TextManager.CreateShape(System.Int32,System.String,System.Int32,Aspose.Flash.Basic.RGB)">
      <summary>
            Create DefineShape3 object for that text that will enclosed into the shape.
            </summary>
      <param name="id">Unique shape Id.</param>
      <param name="text">Text string that will be converted to a shape.</param>
      <param name="fontSize">Font size.</param>
      <param name="aColor">Fill color.</param>
      <returns>
        <see cref="T:Aspose.Flash.Shapes.DefineShape3" /> object.</returns>
    </member>
    <member name="T:Aspose.Flash.Text.TextRecord">
      <summary>
            Used to display a line of text. It contains an array of objects
            which identify the glyphs that will be displayed together with
            style information that sets the text color, the font size and
            the relative placement of the line within a block of text.
            </summary>
      <example>This example shows you how to use TextRecord class<code>[C#]

//define bounds rectangle
Rect bounds = new Rect(-40, -40, 1179, 596);
//define MatrixTransform
MatrixTransform mt = new MatrixTransform();
mt.Scale(50,50);
//define Glyph Entries
ArrayList glyphEntries = new ArrayList();
glyphEntries.Add(new GlyphEntry(1,1));
//define a collection of TextRecords
ArrayList textRecords = new ArrayList();
TextRecord tr = new TextRecord(1,10,glyphEntries);
textRecords.Add(tr);
//define text object
DefineText text = new DefineText(flash.NewIdentifier(), bounds, mt,textRecords);
//add another text record in the DefineText object
//define Glyph Entries
ArrayList glyphEntries = new ArrayList();
glyphEntries.Add(new GlyphEntry(2,1));
//define a collection of TextRecords
ArrayList textRecords = new ArrayList();
TextRecord tr2 = new TextRecord(1, 10, glyphEntries);
//add text record to text object
text.Add(tr2);
//add text object to flash container
flash.Add(text);</code><code>[Visual Basic]

'define bounds rectangle
Dim bounds As New Rect(-40, -40, 1179, 596)
'define MatrixTransform
Dim mt As New MatrixTransform()
mt.Scale(50,50)
'define Glyph Entries
Dim glyphEntries As New ArrayList()
glyphEntries.Add(New GlyphEntry(1,1))
'define a collection of TextRecords
Dim textRecords As New ArrayList()
Dim tr As New TextRecord(1,10,glyphEntries)
textRecords.Add(tr)
'define text object
Dim text As New DefineText(flash.NewIdentifier(), bounds, mt,textRecords)
'add another text record in the DefineText object
'define Glyph Entries
Dim glyphEntries As New ArrayList()
glyphEntries.Add(New GlyphEntry(2,1))
'define a collection of TextRecords
Dim textRecords As New ArrayList()
Dim tr2 As New TextRecord(1, 10, glyphEntries)
'add text record to text object
text.Add(tr2)
'add text object to flash container
flash.Add(text)</code></example>
    </member>
    <member name="M:Aspose.Flash.Text.TextRecord.#ctor(System.Int32,System.Int32,System.Collections.ArrayList)">
      <summary>
            TextRecord constructor.
            </summary>
      <param name="xOffset">X offset of the text in twips.</param>
      <param name="yOffset">Y offset of the text in twips.</param>
      <param name="glyphEntries">Collection of glyph entries.</param>
      <example>This example shows you how to use TextRecord(Int32, Int32, ArrayList) constructor<code>[C#]

//define bounds rectangle
Rect bounds = new Rect(-40, -40, 1179, 596);
//define MatrixTransform
MatrixTransform mt = new MatrixTransform();
mt.Scale(50,50);
//define Glyph Entries
ArrayList glyphEntries = new ArrayList();
glyphEntries.Add(new GlyphEntry(1,1));
//define a collection of TextRecords
ArrayList textRecords = new ArrayList();
TextRecord tr = new TextRecord(1,10,glyphEntries);
textRecords.Add(tr);
//define text object
DefineText text = new DefineText(flash.NewIdentifier(), bounds, mt,textRecords);
//add another text record in the DefineText object
//define Glyph Entries
ArrayList glyphEntries = new ArrayList();
glyphEntries.Add(new GlyphEntry(2,1));
//define a collection of TextRecords
ArrayList textRecords = new ArrayList();
TextRecord tr2 = new TextRecord(1, 10, glyphEntries);
//add text record to text object
text.Add(tr2);
//add text object to flash container
flash.Add(text);</code><code>[Visual Basic]

'define bounds rectangle
Dim bounds As New Rect(-40, -40, 1179, 596)
'define MatrixTransform
Dim mt As New MatrixTransform()
mt.Scale(50,50)
'define Glyph Entries
Dim glyphEntries As New ArrayList()
glyphEntries.Add(New GlyphEntry(1,1))
'define a collection of TextRecords
Dim textRecords As New ArrayList()
Dim tr As New TextRecord(1,10,glyphEntries)
textRecords.Add(tr)
'define text object
Dim text As New DefineText(flash.NewIdentifier(), bounds, mt,textRecords)
'add another text record in the DefineText object
'define Glyph Entries
Dim glyphEntries As New ArrayList()
glyphEntries.Add(New GlyphEntry(2,1))
'define a collection of TextRecords
Dim textRecords As New ArrayList()
Dim tr2 As New TextRecord(1, 10, glyphEntries)
'add text record to text object
text.Add(tr2)
'add text object to flash container
flash.Add(text)</code></example>
    </member>
    <member name="M:Aspose.Flash.Text.TextRecord.#ctor(System.Int32,Aspose.Flash.Basic.RGB,System.Int32,System.Int32,System.Int32,System.Collections.ArrayList)">
      <summary>
            TextRecord constructor.
            </summary>
      <param name="id">Font Id.</param>
      <param name="color">Text color.</param>
      <param name="xOffset">X offset of the text in twips.</param>
      <param name="yOffset">Y offset of the text in twips.</param>
      <param name="height">Font height.</param>
      <param name="glyphEntries">Collection of glyph entries.</param>
      <example>This example shows you how to use TextRecord(Int32,RGB, Int32, Int32, Int32, ArrayList) constructor<code>[C#]

//define bounds rectangle
Rect bounds = new Rect(-40, -40, 1179, 596);
//define MatrixTransform
MatrixTransform mt = new MatrixTransform();
mt.Scale(50,50);
//define Glyph Entries
ArrayList glyphEntries = new ArrayList();
glyphEntries.Add(new GlyphEntry(1,1));
//define a collection of TextRecords
ArrayList textRecords = new ArrayList();
TextRecord tr = new TextRecord(1,10,glyphEntries);
textRecords.Add(tr);
//define text object
DefineText text = new DefineText(flash.NewIdentifier(), bounds, mt,textRecords);
//add another text record in the DefineText object
//define Glyph Entries
ArrayList glyphEntries = new ArrayList();
glyphEntries.Add(new GlyphEntry(2,1));
//define a collection of TextRecords
ArrayList textRecords = new ArrayList();
TextRecord tr2 = new TextRecord(flash.NewIdentifier(),new RGB(255,0,0),1, 10,50, glyphEntries);
//adding a glyph entry directly to a text record
tr2.Add(new GlyphEntry(3, 1));
//add text record to text object
text.Add(tr2);
//add text object to flash container
flash.Add(text);</code></example>
    </member>
    <member name="M:Aspose.Flash.Text.TextRecord.Add(Aspose.Flash.Text.GlyphEntry)">
      <summary>
            Adds an Glyph entry to the collection.
            </summary>
      <param name="character">Glyph entry.</param>
      <example>This example shows you how to use TextRecord.Add(GlyphEntry) method<code>[Visual Basic]

'define bounds rectangle
Dim bounds As New Rect(-40, -40, 1179, 596)
'define MatrixTransform
Dim mt As New MatrixTransform()
mt.Scale(50,50)
'define Glyph Entries
Dim glyphEntries As New ArrayList()
glyphEntries.Add(New GlyphEntry(1,1))
'define a collection of TextRecords
Dim textRecords As New ArrayList()
Dim tr As New TextRecord(1,10,glyphEntries)
textRecords.Add(tr)
'define text object
Dim text As New DefineText(flash.NewIdentifier(), bounds, mt,textRecords)
'add another text record in the DefineText object
'define Glyph Entries
Dim glyphEntries As New ArrayList()
glyphEntries.Add(New GlyphEntry(2,1))
'define a collection of TextRecords
Dim textRecords As New ArrayList()
Dim tr2 As New TextRecord(1, 10, glyphEntries)
'adding a glyph entry directly to a text record
tr2.Add(New GlyphEntry(3, 1))
'add text record to text object
text.Add(tr2)
'add text object to flash container
flash.Add(text)</code></example>
      <example>This example shows you how to use Add(GlyphEntry) method<code>[C#]

//define bounds rectangle
Rect bounds = new Rect(-40, -40, 1179, 596);
//define MatrixTransform
MatrixTransform mt = new MatrixTransform();
mt.Scale(50,50);
//define Glyph Entries
ArrayList glyphEntries = new ArrayList();
glyphEntries.Add(new GlyphEntry(1,1));
//define a collection of TextRecords
ArrayList textRecords = new ArrayList();
TextRecord tr = new TextRecord(1,10,glyphEntries);
textRecords.Add(tr);
//define text object
DefineText text = new DefineText(flash.NewIdentifier(), bounds, mt,textRecords);
//add another text record in the DefineText object
//define Glyph Entries
ArrayList glyphEntries = new ArrayList();
glyphEntries.Add(new GlyphEntry(2,1));
//define a collection of TextRecords
ArrayList textRecords = new ArrayList();
TextRecord tr2 = new TextRecord(1, 10, glyphEntries);
//adding a glyph entry directly to a text record
tr2.Add(new GlyphEntry(3, 1));
//add text record to text object
text.Add(tr2);
//add text object to flash container
flash.Add(text);</code></example>
    </member>
    <member name="P:Aspose.Flash.Text.TextRecord.FontId">
      <summary>
            Returns or sets the font Id for a text.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Text.TextRecord.TextColorRGB">
      <summary>
            Returns or sets the text color.
            Read/write <see cref="T:Aspose.Flash.Basic.RGB" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Text.TextRecord.TextColor">
      <summary>
            Returns or sets the text color.
            Read/write <see cref="T:System.Drawing.Color" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Text.TextRecord.XOffset">
      <summary>
            Returns or sets the X offset of the text.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Text.TextRecord.YOffset">
      <summary>
            Returns or sets the Y offset of the text.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Text.TextRecord.TextHeight">
      <summary>
            Returns or sets the font height.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Text.TextRecord.GlyphEntries">
      <summary>
            Returns or sets the collection of glyphs.
            Read/write <see cref="T:System.Collections.ArrayList" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Text.TextType">
      <summary>
            Represents the type of a text.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Text.TextType.Unicode">
      <summary>
            Font character set based on the Unicode standard.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Text.TextType.SJIS">
      <summary>
            Font character set based on the SJIS standard for Kanji characters.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Text.TextType.ANSI">
      <summary>
            Font character set based on the ANSI UTF-8 standard which supports
            standard ASCII encoded strings.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Text.ZoneData">
      <summary>
            Represents the text's zone data.
            </summary>
      <example>This example shows you how to use ZoneData class<code>[C#]

//define zoneRecord object
ZoneRecord zoneRecord = new ZoneRecord();
//create zone data array list
ArrayList zoneData = new ArrayList();
//add zone data objects in array list
zoneData.Add(new ZoneData());
zoneData.Add(new ZoneData());
//assign zone data collection to zone record object
zoneRecord.ZoneData = zoneData;
//create an array list of zone records
ArrayList zoneRecords = new ArrayList();
//create a new object of DefineFontAlignZones
DefineFontAlignZones zones = new DefineFontAlignZones();
//assign zone record collection to align zones object
zones.ZoneTable = zoneRecord;</code><code>[Visual Basic]

'define zoneRecord object
Dim zoneRecord As New ZoneRecord()
'create zone data array list
Dim zoneData As New ArrayList()
'add zone data objects in array list
zoneData.Add(New ZoneData())
zoneData.Add(New ZoneData())
'assign zone data collection to zone record object
zoneRecord.ZoneData = zoneData
'create an array list of zone records
Dim zoneRecords As New ArrayList()
'create a new object of DefineFontAlignZones
Dim zones As New DefineFontAlignZones()
'assign zone record collection to align zones object
zones.ZoneTable = zoneRecord</code></example>
    </member>
    <member name="P:Aspose.Flash.Text.ZoneData.AlignmentCoordiante">
      <summary>
            Returns or sets X (left) or Y (baseline) coordinate of an alignment zone.
            Read/write <see cref="T:System.Single" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Text.ZoneData.Range">
      <summary>
            Returns or sets Width or Height of an alignment zone.
            Read/write <see cref="T:System.Single" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Text.ZoneRecord">
      <summary>
            Represents the record where zone data is stored.
            </summary>
      <example>This example shows you how to use ZoneRecord class<code>[C#]

//define zoneRecord object
ZoneRecord zoneRecord = new ZoneRecord();
//create zone data array list
ArrayList zoneData = new ArrayList();
//add zone data objects in array list
zoneData.Add(new ZoneData());
zoneData.Add(new ZoneData());
//assign zone data collection to zone record object
zoneRecord.ZoneData = zoneData;
//create an array list of zone records
ArrayList zoneRecords = new ArrayList();
//create a new object of DefineFontAlignZones
DefineFontAlignZones zones = new DefineFontAlignZones();
//assign zone record collection to align zones object
zones.ZoneTable = zoneRecord;</code><code>[Visual Basic]

'define zoneRecord object
Dim zoneRecord As New ZoneRecord()
'create zone data array list
Dim zoneData As New ArrayList()
'add zone data objects in array list
zoneData.Add(New ZoneData())
zoneData.Add(New ZoneData())
'assign zone data collection to zone record object
zoneRecord.ZoneData = zoneData
'create an array list of zone records
Dim zoneRecords As New ArrayList()
'create a new object of DefineFontAlignZones
Dim zones As New DefineFontAlignZones()
'assign zone record collection to align zones object
zones.ZoneTable = zoneRecord</code></example>
    </member>
    <member name="M:Aspose.Flash.Text.ZoneRecord.#ctor">
      <summary>
            Default constructor.
            </summary>
      <example>This example shows you how to use ZoneRecord constructor<code>[C#]

//define zoneRecord object
ZoneRecord zoneRecord = new ZoneRecord();
//create zone data array list
ArrayList zoneData = new ArrayList();
//add zone data objects in array list
zoneData.Add(new ZoneData());
zoneData.Add(new ZoneData());
//assign zone data collection to zone record object
zoneRecord.ZoneData = zoneData;
//create an array list of zone records
ArrayList zoneRecords = new ArrayList();
//create a new object of DefineFontAlignZones
DefineFontAlignZones zones = new DefineFontAlignZones();
//assign zone record collection to align zones object
zones.ZoneTable = zoneRecord;</code><code>[Visual Basic]

'define zoneRecord object
Dim zoneRecord As New ZoneRecord()
'create zone data array list
Dim zoneData As New ArrayList()
'add zone data objects in array list
zoneData.Add(New ZoneData())
zoneData.Add(New ZoneData())
'assign zone data collection to zone record object
zoneRecord.ZoneData = zoneData
'create an array list of zone records
Dim zoneRecords As New ArrayList()
'create a new object of DefineFontAlignZones
Dim zones As New DefineFontAlignZones()
'assign zone record collection to align zones object
zones.ZoneTable = zoneRecord</code></example>
    </member>
    <member name="P:Aspose.Flash.Text.ZoneRecord.ZoneData">
      <summary>
            Returns or sets the alignment zone information.
            Read/write <see cref="T:System.Collections.ArrayList" /> with <see cref="P:Aspose.Flash.Text.ZoneRecord.ZoneData" /> objects.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Text.ZoneRecord.ZoneMaskX">
      <summary>
            Determines whether the X alignment zones are set there.
            Read/write <see cref="T:System.Boolean" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Text.ZoneRecord.ZoneMaskY">
      <summary>
            Determines whether the Y alignment zones are set there.
            Read/write <see cref="T:System.Boolean" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Video.Codec">
      <summary>
            Represens the base class for video codecs.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Video.Codec.DecodeStream(System.IO.Stream,System.Int32)">
      <summary>
            Decodes the given video stream.
            </summary>
      <param name="flvMovie">The video data.</param>
      <param name="time">Time to seek to in seconds.</param>
      <returns>Decoded frame if possible, otherwise null.</returns>
      <remarks>
            Base implementation only validates parameters.
            </remarks>&gt;
        </member>
    <member name="M:Aspose.Flash.Video.Codec.IsDecodeSupported(Aspose.Flash.Video.VideoCodec)">
      <summary>
            Determines whether decoding is supported for the specified codec.
            </summary>
      <param name="codec">The codec id.</param>
      <returns>
        <c>true</c> if codec supports decoding; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Aspose.Flash.Video.Codec.IsEncodeSupported(Aspose.Flash.Video.VideoCodec)">
      <summary>
            Determines whether encoding is supported for the specified codec.
            </summary>
      <param name="codec">The codec id.</param>
      <returns>
        <c>true</c> if codec suppots encoding; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Aspose.Flash.Video.Codec.EncodeFrame(System.IO.Stream,System.Drawing.Image,Aspose.Flash.Video.VideoCodec,System.Single,System.Int32)">
      <summary>
            Encodes the frame and adds the encoded data to the video stream given.
            </summary>
      <param name="flvStream">The FLV stream.</param>
      <param name="frame">The image to encode.</param>
      <param name="codec">The codec to be used.</param>
      <param name="frameRate">The frame rate of the final movie.</param>
      <param name="frameNumber">The frame number in a sequence.</param>
      <remarks>
            Base implementation only validates parameters.
            </remarks>
    </member>
    <member name="P:Aspose.Flash.Video.Codec.CodecID">
      <summary>
            Gets the codec ID.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Video.DefineVideoStream">
      <summary>
            DefineVideoStream specifies a video character which can later be placed on the display list.
            </summary>
      <example>This example shows you how to use DefineVideoStream class<code>[C#]

//Create a flash container and set frame size and frame rate
FlashContainer fc = new FlashContainer();
fc.FrameRate = 12.0f;
fc.FrameSize = new Rect(0, 0, 4000, 4000);

//define movie here and add to fc
DefineVideoStream defineVideo = new DefineVideoStream(fc.NewIdentifier(), 3, 400, 400, 2, true, VideoCodec.SCREEN_VIDEO);

//encoded video data byte arrays bytes1, bytes2, bytes3
//note: these byte arrays will contain the encoded video data
Byte[] bytes1 = new Byte[0];
Byte[] bytes2 = new Byte[0];
Byte[] bytes3 = new Byte[0];

//define video frames and add them to the video stream
VideoFrame vf1 = new VideoFrame(defineVideo.ObjectId, 0, bytes1);
VideoFrame vf2 = new VideoFrame(defineVideo.ObjectId, 1, bytes2);
VideoFrame vf3 = new VideoFrame(defineVideo.ObjectId, 2, bytes3);

//Add DEFINITION TAG created above inside the flash container
fc.Add(defineVideo);

//Place the video Character on Display List
PlaceObject2 placeObj = new PlaceObject2(defineVideo.Id , 1);

//Add CONTROL TAG created above inside the flash container
fc.Add(placeObj);</code><code>[Visual Basic]

'Create a flash container and set frame size and frame rate
Dim fc As New FlashContainer()
fc.FrameRate = 12.0f
fc.FrameSize = New Rect(0, 0, 4000, 4000)

'define movie here and add to fc
Dim defineVideo As New DefineVideoStream(fc.NewIdentifier(), 3, 400, 400, 2, True, VideoCodec.SCREEN_VIDEO)

'encoded video data byte arrays bytes1, bytes2, bytes3
'note: these byte arrays will contain the encoded video data
Dim bytes1(-1) As Byte
Dim bytes2(-1) As Byte
Dim bytes3(-1) As Byte

'define video frames and add them to the video stream
Dim vf1 As New VideoFrame(defineVideo.ObjectId, 0, bytes1)
Dim vf2 As New VideoFrame(defineVideo.ObjectId, 1, bytes2)
Dim vf3 As New VideoFrame(defineVideo.ObjectId, 2, bytes3)

'Add DEFINITION TAG created above inside the flash container
fc.Add(defineVideo)

'Place the video Character on Display List
Dim placeObj As New PlaceObject2(defineVideo.Id, 1)

'Add CONTROL TAG created above inside the flash container
fc.Add(placeObj)</code></example>
    </member>
    <member name="F:Aspose.Flash.Video.DefineVideoStream.H263">
      <summary>
            The video data was encoded using the Sorenson modified H263 format.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Video.DefineVideoStream.ScreenVideo">
      <summary>
            The video data was encoded using Macromedia's ScreenVideo format.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Video.DefineVideoStream.UseVideo">
      <summary>
            Instructs the Flash Player to use the deblocking value specified in the video data.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Video.DefineVideoStream.Off">
      <summary>
            Instructs the Flash Player to turn the deblocking filter off.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Video.DefineVideoStream.On">
      <summary>
            Instructs the Flash Player to turn the deblocking filter on.
            </summary>
    </member>
    <member name="M:Aspose.Flash.Video.DefineVideoStream.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,Aspose.Flash.Video.VideoCodec)">
      <summary> 
            DefineVideoStream constructor.
            </summary>
      <param name="id">Unique object Id.</param>
      <param name="count">Number of video frames.</param>
      <param name="width">Width of a video clip in pixels.</param>
      <param name="height">Height of a video clip in pixels.</param>
      <param name="deblocking">Determines whether the deblocking filter is used.</param>
      <param name="smoothing">Determines whether smoothing filter is used.</param>
      <param name="codec">Video codec which is used to encode video data. See <see cref="T:Aspose.Flash.Video.VideoCodec" />.</param>
      <example>This example shows you how to use DefineVideoStream constructor<code>[C#]

//Create a flash container and set frame size and frame rate
FlashContainer fc = new FlashContainer();
fc.FrameRate = 12.0f;
fc.FrameSize = new Rect(0, 0, 4000, 4000);

//define movie here and add to fc
DefineVideoStream defineVideo = new DefineVideoStream(fc.NewIdentifier(), 3, 400, 400, 2, true, VideoCodec.SCREEN_VIDEO);

//encoded video data byte arrays bytes1, bytes2, bytes3
//note: these byte arrays will contain the encoded video data
Byte[] bytes1 = new Byte[0];
Byte[] bytes2 = new Byte[0];
Byte[] bytes3 = new Byte[0];

//define video frames and add them to the video stream
VideoFrame vf1 = new VideoFrame(defineVideo.ObjectId, 0, bytes1);
VideoFrame vf2 = new VideoFrame(defineVideo.ObjectId, 1, bytes2);
VideoFrame vf3 = new VideoFrame(defineVideo.ObjectId, 2, bytes3);

//Add DEFINITION TAG created above inside the flash container
fc.Add(defineVideo);

//Place the video Character on Display List
PlaceObject2 placeObj = new PlaceObject2(defineVideo.Id , 1);

//Add CONTROL TAG created above inside the flash container
fc.Add(placeObj);</code><code>[Visual Basic]

'Create a flash container and set frame size and frame rate
Dim fc As New FlashContainer()
fc.FrameRate = 12.0f
fc.FrameSize = New Rect(0, 0, 4000, 4000)

'define movie here and add to fc
Dim defineVideo As New DefineVideoStream(fc.NewIdentifier(), 3, 400, 400, 2, True, VideoCodec.SCREEN_VIDEO)

'encoded video data byte arrays bytes1, bytes2, bytes3
'note: these byte arrays will contain the encoded video data
Dim bytes1(-1) As Byte
Dim bytes2(-1) As Byte
Dim bytes3(-1) As Byte

'define video frames and add them to the video stream
Dim vf1 As New VideoFrame(defineVideo.ObjectId, 0, bytes1)
Dim vf2 As New VideoFrame(defineVideo.ObjectId, 1, bytes2)
Dim vf3 As New VideoFrame(defineVideo.ObjectId, 2, bytes3)

'Add DEFINITION TAG created above inside the flash container
fc.Add(defineVideo)

'Place the video Character on Display List
Dim placeObj As New PlaceObject2(defineVideo.Id, 1)

'Add CONTROL TAG created above inside the flash container
fc.Add(placeObj)</code></example>
    </member>
    <member name="P:Aspose.Flash.Video.DefineVideoStream.ObjectId">
      <summary>
            Returns or sets the Id of a video object.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Video.DefineVideoStream.NumFrames">
      <summary> 
            Returns or sets the number of VideoFrame tags that will make up this stream.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Video.DefineVideoStream.Width">
      <summary>
            Returns or sets the width of a video clip in pixels.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Video.DefineVideoStream.Height">
      <summary>
            Returns or sets the height of a video clip in pixels.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Video.DefineVideoStream.VideoFlagsDeblocking">
      <summary>
            Determines whether the video will be deblocked on playback.
            Read/write <see cref="T:System.Int32" />.
            </summary>
      <remarks>
        <p>Property can have next values:</p>
        <p>0: use VIDEOPACKET value</p>
        <p>1: off</p>
        <p>2: on</p>
        <p>3: reserved.</p>
      </remarks>
    </member>
    <member name="P:Aspose.Flash.Video.DefineVideoStream.VideoFlagsSmoothing">
      <summary>
            Determines whether the flash movie will be smoothed on playback.
            Read/write <see cref="T:System.Boolean" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Video.DefineVideoStream.CodecId">
      <summary>
            Represents or sets the codec which is used to encode the video data.
            Read/write <see cref="T:Aspose.Flash.Video.VideoCodec" />.
            </summary>
    </member>
    <member name="T:Aspose.Flash.Video.VideoCodec">
      <summary>
            Represents used video codec.
            </summary>
    </member>
    <member name="F:Aspose.Flash.Video.VideoCodec.SORENSON_H263">
      <summary>
            Sorenson h.263 video codec
            </summary>
    </member>
    <member name="F:Aspose.Flash.Video.VideoCodec.SCREEN_VIDEO">
      <summary>
            Screen Video codec
            </summary>
    </member>
    <member name="F:Aspose.Flash.Video.VideoCodec.ON2_VP6">
      <summary>
            On2 VP6 video codec
            </summary>
    </member>
    <member name="F:Aspose.Flash.Video.VideoCodec.ON2_VP6_ALPHA">
      <summary>
            On2 VP6 with alpha channel codec
            </summary>
    </member>
    <member name="F:Aspose.Flash.Video.VideoCodec.SCREEN_VIDEO_V2">
      <summary>
            Screen Video v2 codec
            </summary>
    </member>
    <member name="T:Aspose.Flash.Video.VideoFrame">
      <summary>
            Represents a single frame of video data for a video object that
            has already been defined with DefineVideoStream tag.
            </summary>
      <example>This example shows you how to use VideoFrame class<code>[C#]

//Create a flash container and set frame size and frame rate
FlashContainer fc = new FlashContainer();
fc.FrameRate = 12.0f;
fc.FrameSize = new Rect(0, 0, 4000, 4000);

//define movie here and add to fc
DefineVideoStream defineVideo = new DefineVideoStream(fc.NewIdentifier(), 3, 400, 400, 2, true, VideoCodec.SCREEN_VIDEO);

//encoded video data byte arrays bytes1, bytes2, bytes3
//note: these byte arrays will contain the encoded video data
Byte[] bytes1 = new Byte[0];
Byte[] bytes2 = new Byte[0];
Byte[] bytes3 = new Byte[0];

//define video frames and add them to the video stream
VideoFrame vf1 = new VideoFrame(defineVideo.ObjectId, 0, bytes1);
VideoFrame vf2 = new VideoFrame(defineVideo.ObjectId, 1, bytes2);
VideoFrame vf3 = new VideoFrame(defineVideo.ObjectId, 2, bytes3);

//Add DEFINITION TAG created above inside the flash container
fc.Add(defineVideo);

//Place the video Character on Display List
PlaceObject2 placeObj = new PlaceObject2(defineVideo.Id , 1);

//Add CONTROL TAG created above inside the flash container
fc.Add(placeObj);</code><code>[Visual Basic]

'Create a flash container and set frame size and frame rate
Dim fc As New FlashContainer()
fc.FrameRate = 12.0f
fc.FrameSize = New Rect(0, 0, 4000, 4000)

'define movie here and add to fc
Dim defineVideo As New DefineVideoStream(fc.NewIdentifier(), 3, 400, 400, 2, True, VideoCodec.SCREEN_VIDEO)

'encoded video data byte arrays bytes1, bytes2, bytes3
'note: these byte arrays will contain the encoded video data
Dim bytes1(-1) As Byte
Dim bytes2(-1) As Byte
Dim bytes3(-1) As Byte

'define video frames and add them to the video stream
Dim vf1 As New VideoFrame(defineVideo.ObjectId, 0, bytes1)
Dim vf2 As New VideoFrame(defineVideo.ObjectId, 1, bytes2)
Dim vf3 As New VideoFrame(defineVideo.ObjectId, 2, bytes3)

'Add DEFINITION TAG created above inside the flash container
fc.Add(defineVideo)

'Place the video Character on Display List
Dim placeObj As New PlaceObject2(defineVideo.Id, 1)

'Add CONTROL TAG created above inside the flash container
fc.Add(placeObj)</code></example>
    </member>
    <member name="M:Aspose.Flash.Video.VideoFrame.#ctor(System.Int32,System.Int32,System.Byte[])">
      <summary>
            VideoFrame constructor
            </summary>
      <param name="id">Unique Id of the owner's DefineVideoStream object.</param>
      <param name="frameNumber">Sequence number of the frame.</param>
      <param name="data">Encoded video data.</param>
      <example>This example shows you how to use VideoFrame constructor<code>[C#]

//Create a flash container and set frame size and frame rate
FlashContainer fc = new FlashContainer();
fc.FrameRate = 12.0f;
fc.FrameSize = new Rect(0, 0, 4000, 4000);

//define movie here and add to fc
DefineVideoStream defineVideo = new DefineVideoStream(fc.NewIdentifier(), 3, 400, 400, 2, true, VideoCodec.SCREEN_VIDEO);

//encoded video data byte arrays bytes1, bytes2, bytes3
//note: these byte arrays will contain the encoded video data
Byte[] bytes1 = new Byte[0];
Byte[] bytes2 = new Byte[0];
Byte[] bytes3 = new Byte[0];

//define video frames and add them to the video stream
VideoFrame vf1 = new VideoFrame(defineVideo.ObjectId, 0, bytes1);
VideoFrame vf2 = new VideoFrame(defineVideo.ObjectId, 1, bytes2);
VideoFrame vf3 = new VideoFrame(defineVideo.ObjectId, 2, bytes3);

//Add DEFINITION TAG created above inside the flash container
fc.Add(defineVideo);

//Place the video Character on Display List
PlaceObject2 placeObj = new PlaceObject2(defineVideo.Id , 1);

//Add CONTROL TAG created above inside the flash container
fc.Add(placeObj);</code><code>[Visual Basic]

'Create a flash container and set frame size and frame rate
Dim fc As New FlashContainer()
fc.FrameRate = 12.0f
fc.FrameSize = New Rect(0, 0, 4000, 4000)

'define movie here and add to fc
Dim defineVideo As New DefineVideoStream(fc.NewIdentifier(), 3, 400, 400, 2, True, VideoCodec.SCREEN_VIDEO)

'encoded video data byte arrays bytes1, bytes2, bytes3
'note: these byte arrays will contain the encoded video data
Dim bytes1(-1) As Byte
Dim bytes2(-1) As Byte
Dim bytes3(-1) As Byte

'define video frames and add them to the video stream
Dim vf1 As New VideoFrame(defineVideo.ObjectId, 0, bytes1)
Dim vf2 As New VideoFrame(defineVideo.ObjectId, 1, bytes2)
Dim vf3 As New VideoFrame(defineVideo.ObjectId, 2, bytes3)

'Add DEFINITION TAG created above inside the flash container
fc.Add(defineVideo)

'Place the video Character on Display List
Dim placeObj As New PlaceObject2(defineVideo.Id, 1)

'Add CONTROL TAG created above inside the flash container
fc.Add(placeObj)</code></example>
    </member>
    <member name="P:Aspose.Flash.Video.VideoFrame.ObjectId">
      <summary>
            Returns or sets the Id of a DefineVideoStream object which is owner of this VideoFrame.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Video.VideoFrame.FrameNumber">
      <summary>
            Returns or sets the sequence number of this video frame within video stream.
            Frames start at 0 and increment by 1 each frame.
            Read/write <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Aspose.Flash.Video.VideoFrame.VideoData">
      <summary>
            Returns or sets the encoded video data.
            Read/write <see cref="T:System.Byte" />[].
            </summary>
    </member>
  </members>
</doc>